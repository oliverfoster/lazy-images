{
  "version": 3,
  "sources": [
    "core/js/models/lockingModel.js",
    "core/js/wait.js",
    "core/js/adapt.js",
    "core/js/adaptCollection.js",
    "core/js/startController.js",
    "core/js/enums/logLevelEnum.js",
    "core/js/logging.js",
    "core/js/models/buildModel.js",
    "core/js/models/adaptModel.js",
    "core/js/models/articleModel.js",
    "core/js/models/blockModel.js",
    "core/js/models/configModel.js",
    "core/js/models/contentObjectModel.js",
    "core/js/models/componentModel.js",
    "core/js/models/courseModel.js",
    "core/js/enums/buttonStateEnum.js",
    "core/js/models/questionModel.js",
    "core/js/views/accessibilityView.js",
    "core/js/views/navigationView.js",
    "core/js/accessibility.js",
    "core/js/offlineStorage.js",
    "core/js/enums/completionStateEnum.js",
    "core/js/tracking.js",
    "core/js/device.js",
    "core/js/graphics.js",
    "core/js/views/drawerView.js",
    "core/js/drawer.js",
    "core/js/views/notifyView.js",
    "core/js/views/notifyPushView.js",
    "core/js/models/notifyModel.js",
    "core/js/notify.js",
    "core/js/popupManager.js",
    "core/js/models/routerModel.js",
    "core/js/views/adaptView.js",
    "core/js/views/blockView.js",
    "core/js/views/articleView.js",
    "core/js/views/pageView.js",
    "core/js/router.js",
    "core/js/helpers.js",
    "core/js/views/componentView.js",
    "components/adapt-contrib-accordion/js/adapt-contrib-accordion.js",
    "components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults.js",
    "components/adapt-contrib-blank/js/adapt-contrib-blank.js",
    "core/js/views/buttonsView.js",
    "core/js/views/questionView.js",
    "components/adapt-contrib-mcq/js/mcqView.js",
    "components/adapt-contrib-mcq/js/mcqModel.js",
    "components/adapt-contrib-mcq/js/adapt-contrib-mcq.js",
    "components/adapt-contrib-gmcq/js/adapt-contrib-gmcq.js",
    "components/adapt-contrib-graphic/js/adapt-contrib-graphic.js",
    "components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic.js",
    "components/adapt-contrib-matching/js/adapt-contrib-matching.js",
    "components/adapt-contrib-media/js/adapt-contrib-media.js",
    "components/adapt-contrib-narrative/js/adapt-contrib-narrative.js",
    "components/adapt-contrib-slider/js/adapt-contrib-slider.js",
    "components/adapt-contrib-text/js/adapt-contrib-text.js",
    "components/adapt-contrib-textInput/js/adapt-contrib-textInput.js",
    "extensions/adapt-contrib-assessment/js/adapt-assessmentArticleView.js",
    "extensions/adapt-contrib-assessment/js/adapt-assessmentQuestionBank.js",
    "extensions/adapt-contrib-assessment/js/adapt-assessmentArticleModel.js",
    "extensions/adapt-contrib-assessment/js/assessment.js",
    "extensions/adapt-contrib-assessment/js/adapt-assessmentArticleExtension.js",
    "extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking.js",
    "extensions/adapt-contrib-languagePicker/js/accessibilityView.js",
    "extensions/adapt-contrib-languagePicker/js/languagePickerView.js",
    "extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView.js",
    "extensions/adapt-contrib-languagePicker/js/languagePickerNavView.js",
    "extensions/adapt-contrib-languagePicker/js/languagePickerModel.js",
    "extensions/adapt-contrib-languagePicker/js/adapt-languagePicker.js",
    "extensions/adapt-contrib-pageLevelProgress/js/completionCalculations.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resources.js",
    "extensions/adapt-contrib-spoor/js/scorm/API.js",
    "extensions/adapt-contrib-spoor/js/scorm/wrapper.js",
    "extensions/adapt-contrib-spoor/js/scorm/logger.js",
    "extensions/adapt-contrib-spoor/js/scorm.js",
    "extensions/adapt-contrib-spoor/js/serializers/default.js",
    "extensions/adapt-contrib-spoor/js/serializers/scormSuspendDataSerializer.js",
    "extensions/adapt-contrib-spoor/js/serializers/questions.js",
    "extensions/adapt-contrib-spoor/js/adapt-stateful-session.js",
    "extensions/adapt-contrib-spoor/js/adapt-offlineStorage-scorm.js",
    "extensions/adapt-contrib-spoor/js/adapt-contrib-spoor.js",
    "extensions/adapt-contrib-trickle/js/trickleView.js",
    "extensions/adapt-contrib-trickle/js/pageView.js",
    "extensions/adapt-contrib-trickle/js/lib/adaptModelExtension.js",
    "extensions/adapt-contrib-trickle/js/handlers/buttonView.js",
    "extensions/adapt-contrib-trickle/js/handlers/button.js",
    "extensions/adapt-contrib-trickle/js/handlers/completion.js",
    "extensions/adapt-contrib-trickle/js/handlers/notify.js",
    "extensions/adapt-contrib-trickle/js/handlers/resize.js",
    "extensions/adapt-contrib-trickle/js/handlers/tutor.js",
    "extensions/adapt-contrib-trickle/js/handlers/visibility.js",
    "extensions/adapt-contrib-trickle/js/handlers/done.js",
    "extensions/adapt-contrib-trickle/js/adapt-contrib-trickle.js",
    "extensions/adapt-contrib-tutor/js/adapt-contrib-tutor.js",
    "core/js/views/menuView.js",
    "menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu.js",
    "theme/adapt-contrib-vanilla/js/theme-block.js",
    "theme/adapt-contrib-vanilla/js/vanilla.js",
    "plugins.js",
    "core/js/app.js"
  ],
  "names": [],
  "mappingshhdhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACflVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACzlchpjxvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpzlxQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxvilLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxnxldrtiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvyhnrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACplJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxrrnqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACztrnlOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjttntIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChllHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxv
  "file": "adapt.min.js",
  "sourcesContent": [
    "define('core/js/models/lockingModel',[],function() {\n\n\tvar set = Backbone.Model.prototype.set;\n\n\t_.extend(Backbone.Model.prototype, {\n\n\t\tset: function(attrName, attrVal, options) {\n\t\t\tvar stopProcessing = !this.lockedAttributes || typeof attrName === \"object\" || typeof attrVal !== \"boolean\" || !this.isLocking(attrName);\n\t\t\tif (stopProcessing) return set.apply(this, arguments);\n\t\t\t\n\t\t\toptions = options || {};\n\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (!isSettingValueForSpecificPlugin) {\n\t\t\t\tconsole.error(\"Must supply a pluginName to change a locked attribute\");\n\t\t\t\toptions.pluginName = \"compatibility\";\n\t\t\t}\n\n\t\t\tvar pluginName  = options.pluginName;\n\t\t\tif (this.defaults[attrName] !== undefined) {\n\t\t\t\tthis.lockedAttributes[attrName] = !this.defaults[attrName];\n\t\t\t}\n\t\t\tvar lockingValue = this.lockedAttributes[attrName];\n\t\t\tvar isAttemptingToLock = (lockingValue === attrVal);\n\n\t\t\tif (isAttemptingToLock) {\n\n\t\t\t\tthis.setLockState(attrName, true, {pluginName:pluginName, skipcheck: true});\n\n\t\t\t\t//console.log(options.pluginName, \"locking\", attrName, \"on\", this.get(\"_id\"));\n\t\t\t\treturn set.call(this, attrName, lockingValue);\n\n\t\t\t}\n\n\t\t\tthis.setLockState(attrName, false, {pluginName:pluginName, skipcheck: true});\n\n\t\t\tvar totalLockValue = this.getLockCount(attrName, {skipcheck: true});\n\t\t\t//console.log(options.pluginName, \"attempting to unlock\", attrName, \"on\", this.get(\"_id\"), \"lockValue\", totalLockValue, this._lockedAttributesValues[attrName]);\n\t\t\tif (totalLockValue === 0) {\n\t\t\t\t//console.log(options.pluginName, \"unlocking\", attrName, \"on\", this.get(\"_id\"));\n\t\t\t\treturn set.call(this, attrName, !lockingValue);\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLocking: function(attrName, defaultLockValue) {\n\t\t\tif (this.isLocking(attrName)) return;\n\t\t\tif (!this.lockedAttributes) this.lockedAttributes = {};\n\t\t\tthis.lockedAttributes[attrName] = defaultLockValue;\n\t\t},\n\n\t\tunsetLocking: function(attrName) {\n\t\t\tif (!this.isLocking(attrName)) return;\n\t\t\tif (!this.lockedAttributes) return;\n\t\t\tdelete this.lockedAttributes[attrName];\n\t\t\tdelete this._lockedAttributesValues[attrName];\n\t\t\tif (_.keys(this.lockedAttributes).length === 0) {\n\t\t\t\tdelete this.lockedAttributes;\n\t\t\t\tdelete this._lockedAttributesValues;\n\t\t\t}\n\t\t},\n\n\t\tisLocking: function(attrName) {\n\t\t\tvar isCheckingGeneralLockingState = (attrName === undefined);\n\t\t\tvar isUsingLockedAttributes = (this.lockedAttributes !== undefined);\n\n\t\t\tif (isCheckingGeneralLockingState) {\n\t\t\t\treturn isUsingLockedAttributes;\n\t\t\t}\n\n\t\t\tif (!isUsingLockedAttributes) return false;\n\n\t\t\tvar isAttributeALockingAttribute = this.lockedAttributes[attrName] !== undefined;\n\t\t\tif (!isAttributeALockingAttribute) return false;\n\n\t\t\tif (this._lockedAttributesValues === undefined) {\n\t\t\t\tthis._lockedAttributesValues = {};\n\t\t\t}\n\n\t\t\tif (this._lockedAttributesValues[attrName] === undefined) {\n\t\t\t\tthis._lockedAttributesValues[attrName] = {};\t\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tisLocked: function(attrName, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return;\n\t\t\t}\n\n\t\t\treturn this.getLockCount(attrName) > 0;\n\t\t},\n\n\t\tgetLockCount: function(attrName, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return;\n\t\t\t}\n\n\t\t\tvar isGettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (isGettingValueForSpecificPlugin) {\n\n\t\t\t\treturn this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;\n\t\t\t}\n\n\t\t\tvar lockingAttributeValues = _.values(this._lockedAttributesValues[attrName]);\n\t\t\tvar lockingAttributeValuesSum = _.reduce(lockingAttributeValues, function(sum, value){ return sum + (value ? 1 : 0); }, 0);\n\t\t\t\n\t\t\treturn lockingAttributeValuesSum;\n\t\t},\n\n\t\tsetLockState: function(attrName, value, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return this;\n\t\t\t}\n\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (!isSettingValueForSpecificPlugin) {\n\t\t\t\tconsole.error(\"Must supply a pluginName to set a locked attribute lock value\");\n\t\t\t\toptions.pluginName = \"compatibility\";\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tthis._lockedAttributesValues[attrName][options.pluginName] = value;\n\t\t\t} else {\n\t\t\t\tdelete this._lockedAttributesValues[attrName][options.pluginName];\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t});\n\n});\n\n",
    "define('core/js/wait',[],function() {\n\n     var Wait = Backbone.Controller.extend({\n\n        initialize: function() {\n            _.bindAll(this, \"begin\", \"end\");\n        },\n\n        _waitCount: 0,\n        _callbackHandle: null,\n\n        /**\n         * Returns true if there are items in the waiting count.\n         * \n         * @return {Boolean}\n         */\n        isWaiting: function() {\n            return (this._waitCount !== 0);\n        },\n\n        /**\n         * Add one item to the waiting count.\n         * \n         * @return {Object}\n         */\n        begin: function() {\n\n            if (!this.isWaiting()) {\n                this.trigger(\"wait\");\n            }\n\n            this._waitCount++;\n\n            if (this._callbackHandle) {\n                clearTimeout(this._callbackHandle);\n                this._callbackHandle = null;\n            }\n\n            return this;\n\n        },\n\n        /**\n         * Remove an item from the waiting count and trigger ready asynchronously if no more items are waiting.\n         * \n         * @return {Object}\n         */\n        end: function() {\n\n            if (!this.isWaiting()) {\n                return this;\n            }\n\n            this._waitCount--;\n\n            if (this.isWaiting()) {\n                return this;\n            }\n            \n            if (this._callbackHandle) {\n                return this;\n            }\n\n            this._callbackHandle = setTimeout(function() {\n\n                this._callbackHandle = null;\n                this.trigger(\"ready\");\n\n            }.bind(this), 0);\n\n            return this;\n\n        },\n\n        /**\n         * Queue this function until all open waits have been ended.\n         * \n         * @param  {Function} callback\n         * @return {Object}\n         */\n        queue: function(callback) {\n\n            this.begin();\n            this.once(\"ready\", callback);\n            this.end();\n\n            return this;\n\n        },\n\n        /**\n         * Wait for this asynchonous function to execute before triggering ready event.\n         * \n         * @param  {Function} callback   [ Function to execute whilst holding queued callback. Once complete run first argiument, done(). ]\n         * @return {Object}\n         */\n        for: function(callback) {\n\n            this.begin();\n            _.defer(function() {\n                callback(this.end);\n            }.bind(this));\n\n            return this;\n\n        }\n\n    });\n\n    return Wait;\n\n});\n",
    "define('core/js/adapt',[\n    'core/js/models/lockingModel',\n    'core/js/wait'\n], function(lockingModel, Wait) {\n\n    var AdaptModel = Backbone.Model.extend({\n\n        defaults: {\n            _canScroll: true, //to stop scrollTo behaviour,\n            _outstandingCompletionChecks: 0,\n            _pluginWaitCount:0,\n            _isStarted: false\n        },\n\n        lockedAttributes: {\n            _canScroll: false\n        },\n\n        initialize: function () {\n            this.setupWait();\n        },\n\n        //call when entering an asynchronous completion check\n        checkingCompletion: function() {\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\n            this.set(\"_outstandingCompletionChecks\", ++outstandingChecks);\n        },\n\n        //call when exiting an asynchronous completion check\n        checkedCompletion: function() {\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\n            this.set(\"_outstandingCompletionChecks\", --outstandingChecks);\n        },\n\n        //wait until there are no outstanding completion checks\n        deferUntilCompletionChecked: function(callback) {\n\n            if (this.get(\"_outstandingCompletionChecks\") === 0) return callback();\n\n            var checkIfAnyChecksOutstanding = function(model, outstandingChecks) {\n                if (outstandingChecks !== 0) return;\n\n                Adapt.off(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\n\n                callback();\n            };\n\n            Adapt.on(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\n\n        },\n\n        setupWait: function() {\n\n            this.wait = new Wait();\n\n            // Setup legcay events and handlers\n            var beginWait = function () {\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.begin() as Adapt.trigger('plugin:beginWait') may be removed in the future\");\n                this.wait.begin();\n            }.bind(this);\n\n            var endWait = function() {\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.end() as Adapt.trigger('plugin:endWait') may be removed in the future\");\n                this.wait.end();\n            }.bind(this);\n\n            var ready = function() {\n\n                if (this.wait.isWaiting()) {\n                    return;\n                }\n\n                var isEventListening = (this._events['plugins:ready']);\n                if (!isEventListening) {\n                    return;\n                }\n\n                Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.queue(callback) as Adapt.on('plugins:ready', callback) may be removed in the future\");\n                this.trigger('plugins:ready');\n\n            }.bind(this);\n\n            this.listenTo(this.wait, \"ready\", ready);\n            this.listenTo(this, {\n                'plugin:beginWait': beginWait,\n                'plugin:endWait': endWait\n            });\n\n        },\n\n        isWaitingForPlugins:function() {\n            Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.isWaitingForPlugins() may be removed in the future\");\n            return this.wait.isWaiting();\n        },\n\n        checkPluginsReady:function() {\n            Adapt.log.warn(\"DEPRECATED - Use Adapt.wait.isWaiting() as Adapt.checkPluginsReady() may be removed in the future\");\n            if (this.isWaitingForPlugins()) {\n                return;\n            }\n            this.trigger('plugins:ready');\n        }\n\n    });\n\n    var Adapt = new AdaptModel();\n\n    Adapt.location = {};\n    Adapt.componentStore = {};\n    Adapt.mappedIds = {};\n\n    Adapt.loadScript = window.__loadScript;\n\n    Adapt.initialize = function() {\n\n        //wait until no more completion checking\n        Adapt.deferUntilCompletionChecked(function() {\n\n            //start adapt in a full restored state\n            Adapt.trigger('adapt:start');\n\n            if (!Backbone.History.started) {\n                Backbone.history.start();\n            }\n\n            Adapt.set(\"_isStarted\", true);\n\n            Adapt.trigger('adapt:initialize');\n\n        });\n\n    };\n\n    Adapt.scrollTo = function(selector, settings) {\n        // Get the current location - this is set in the router\n        var location = (Adapt.location._contentType) ?\n            Adapt.location._contentType : Adapt.location._currentLocation;\n        // Trigger initial scrollTo event\n        Adapt.trigger(location+':scrollTo', selector);\n        //Setup duration variable passed upon arguments\n        var settings = (settings || {});\n        var disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n        if (disableScrollToAnimation) {\n            settings.duration = 0;\n        }\n        else if (!settings.duration) {\n            settings.duration = $.scrollTo.defaults.duration;\n        }\n\n        var offsetTop = -$(\".navigation\").outerHeight();\n        // prevent scroll issue when component description aria-label coincident with top of component\n        if (Adapt.config.get('_accessibility')._isActive &&\n            $(selector).hasClass('component')) {\n            offsetTop -= $(selector).find('.aria-label').height() || 0;\n        }\n\n        if (!settings.offset) settings.offset = { top: offsetTop, left: 0 };\n        if (settings.offset.top === undefined) settings.offset.top = offsetTop;\n        if (settings.offset.left === undefined) settings.offset.left = 0;\n\n        if (settings.offset.left === 0) settings.axis = \"y\";\n\n        if (Adapt.get(\"_canScroll\") !== false) {\n            // Trigger scrollTo plugin\n            $.scrollTo(selector, settings);\n        }\n\n        // Trigger an event after animation\n        // 300 milliseconds added to make sure queue has finished\n        _.delay(function() {\n            $(selector).a11y_focus();\n            Adapt.trigger(location+':scrolledTo', selector);\n        }, settings.duration+300);\n\n    };\n\n    Adapt.navigateToElement = function(selector, settings) {\n        // Allows a selector to be passed in and Adapt will navigate to this element\n\n        // Setup settings object\n        var settings = (settings || {});\n\n        // Removes . symbol from the selector to find the model\n        var currentModelId = selector.replace(/\\./g, '');\n        var currentModel = Adapt.findById(currentModelId);\n        // Get current page to check whether this is the current page\n        var currentPage = (currentModel._siblings === 'contentObjects') ? currentModel : currentModel.findAncestor('contentObjects');\n\n        // If current page - scrollTo element\n        if (currentPage.get('_id') === Adapt.location._currentId) {\n           return Adapt.scrollTo(selector, settings);\n        }\n\n        // If the element is on another page navigate and wait until pageView:ready is fired\n        // Then scrollTo element\n        Adapt.once('pageView:ready', function() {\n            _.defer(function() {\n                Adapt.scrollTo(selector, settings);\n            });\n        });\n\n        var shouldReplaceRoute = settings.replace || false;\n\n        Backbone.history.navigate('#/id/' + currentPage.get('_id'), {trigger: true, replace: shouldReplaceRoute});\n    };\n\n    Adapt.register = function(name, object) {\n        // Used to register components\n        // Store the component view\n        if (Adapt.componentStore[name])\n            throw Error('This component already exists in your project');\n\n        if (object.view) {\n            //use view+model object\n            if(!object.view.template) object.view.template = name;\n        } else {\n            //use view object\n            if(!object.template) object.template = name;\n        }\n\n        Adapt.componentStore[name] = object;\n\n        return object;\n    };\n\n    // Used to map ids to collections\n    Adapt.setupMapping = function() {\n        // Clear any existing mappings.\n        Adapt.mappedIds = {};\n\n        // Setup course Id\n        Adapt.mappedIds[Adapt.course.get('_id')] = \"course\";\n\n        // Setup each collection\n        var collections = [\"contentObjects\", \"articles\", \"blocks\", \"components\"];\n\n        for (var i = 0, len = collections.length; i < len; i++) {\n            var collection = collections[i];\n            var models = Adapt[collection].models;\n            for (var j = 0, lenj = models.length; j < lenj; j++) {\n                var model = models[j];\n                Adapt.mappedIds[model.get('_id')] = collection;\n\n            }\n        }\n\n    };\n\n    Adapt.mapById = function(id) {\n        // Returns collection name that contains this models Id\n        return Adapt.mappedIds[id];\n    };\n\n    Adapt.findById = function(id) {\n\n        // Return a model\n        // Checks if the Id passed in is the course Id\n        if (id === Adapt.course.get('_id')) {\n            return Adapt.course;\n        }\n\n        var collectionType = Adapt.mapById(id);\n\n        if (!collectionType) {\n            console.warn('Adapt.findById() unable to find collection type for id: ' + id);\n            return;\n        }\n\n        return Adapt[collectionType]._byAdaptID[id][0];\n\n    };\n\n    // Relative strings describe the number and type of hops in the model hierarchy\n    //\n    // \"@component +1\" means to move one component forward from the current model\n    // This function would return the following:\n    // {\n    //       type: \"component\",\n    //       offset: 1\n    // }\n    // Trickle uses this function to determine where it should scrollTo after it unlocks\n    Adapt.parseRelativeString = function(relativeString) {\n\n        if (relativeString[0] === \"@\") {\n            relativeString = relativeString.substr(1);\n        }\n\n        var type = relativeString.match(/(component|block|article|page|menu)/);\n        if (!type) {\n            Adapt.log.error(\"Adapt.parseRelativeString() could not match relative type\", relativeString);\n            return;\n        }\n        type = type[0];\n\n        var offset = parseInt(relativeString.substr(type.length).trim()||0);\n        if (isNaN(offset)) {\n            Adapt.log.error(\"Adapt.parseRelativeString() could not parse relative offset\", relativeString);\n            return;\n        }\n\n        return {\n            type: type,\n            offset: offset\n        };\n\n    };\n\n    Adapt.remove = function() {\n        Adapt.trigger('preRemove');\n        Adapt.trigger('remove');\n        _.defer(function() {\n            Adapt.trigger('postRemove');\n        });\n    };\n\n    return Adapt;\n\n});\n\n",
    "define('core/js/adaptCollection',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AdaptCollection = Backbone.Collection.extend({\n        initialize : function(models, options){\n            this.url = options.url;\n\n            this.once('reset', this.loadedData, this);\n            if (this.url) {\n                this.fetch({\n                    reset:true,\n                    error: _.bind(function(model, xhr, options) {\n                        console.error(\"ERROR: unable to load file \" + this.url);\n                    }, this)\n                });\n            }\n        },\n\n        loadedData: function() {\n            Adapt.trigger('adaptCollection:dataLoaded');\n        }\n\n    });\n\n    return AdaptCollection;\n\n});\n\n",
    "define('core/js/startController',[\n    'core/js/adapt'\n], function(Adapt) {\n    \n    var StartController = Backbone.Controller.extend({\n\n        model: null,\n\n        initialize: function() {\n            this.model = new Backbone.Model(Adapt.course.get(\"_start\"));\n        },\n\n        setStartLocation: function() {\n            if (!this.isEnabled()) return;\n            window.history.replaceState('', '', this.getStartHash());\n        },\n\n        getStartHash: function(alwaysForce) {\n            var startId = this.getStartId();\n\n            var hasStartId = (startId)\n                ? true\n                : false;\n\n            var isRouteSpecified = (_.indexOf(window.location.href,\"#\") > -1);\n            var shouldForceStartId = alwaysForce || this.model.get(\"_force\");\n            var shouldNavigateToStartId = hasStartId && (!isRouteSpecified || shouldForceStartId);\n\n            var startHash = \"#/\";\n            if (shouldNavigateToStartId) {\n                if (startId !== Adapt.course.get(\"_id\")) {\n                    startHash = \"#/id/\"+startId;\n                }\n            } else {\n                //go to specified route or course main menu\n                var hasLocationHash = (window.location.hash)\n                    ? true\n                    : false;\n\n                startHash = hasLocationHash ? window.location.hash : startHash;\n            }\n\n            return startHash;\n        },\n\n        isEnabled: function() {\n            if (!this.model || !this.model.get(\"_isEnabled\")) return false;\n            return true;\n        },\n\n        getStartId: function() {\n            var startId = this.model.get(\"_id\");\n            var startIds = this.model.get(\"_startIds\");\n            var $html = $(\"html\");\n            \n            var hasStartIdsConfiguration = (startIds && startIds.length > 0);\n            if (hasStartIdsConfiguration) {\n                for (var i = 0, l =  startIds.length; i < l; i++) {\n                    var item = startIds[i];\n                    var className =  item._className;\n                    var skipIfComplete = item._skipIfComplete;\n                    \n                    var model = Adapt.findById(item._id);\n                    \n                    if (!model) {\n                        console.log(\"startController: cannot find id\", item._id);\n                        continue;\n                    }\n                    \n                    if (skipIfComplete) {\n                        if (model.get(\"_isComplete\")) continue;\n                    }\n\n                    if (!className || $html.is(className) || $html.hasClass(className)) {\n                        startId = item._id;\n                        break;\n                    }\n                }\n            }\n\n            return startId;\n        }\n\n    });\n\n    Adapt.once(\"adapt:start\", function() {\n        var startController = new StartController();\n        startController.setStartLocation();\n    });\n\n    return StartController;\n\n});\n\n",
    "define('core/js/enums/logLevelEnum',[],function() {\n\n    // Used to determine if log call should be printed based on log level\n    var LOG_LEVEL = ENUM([\n        \"DEBUG\",\n        \"INFO\",\n        \"WARN\",\n        \"ERROR\",\n        \"FATAL\"\n    ]);\n\n    return LOG_LEVEL;\n\n});\n",
    "define('core/js/logging',[\n    'core/js/adapt',\n    'core/js/enums/logLevelEnum'\n], function(Adapt, LOG_LEVEL) {\n\n    var Logging = Backbone.Controller.extend({\n\n        _config: {\n            _isEnabled: true,\n            _level: LOG_LEVEL.INFO.asLowerCase, // Default log level\n            _console: true // Log to console\n        },      \n        \n        initialize: function() {\n\n            Adapt.once('configModel:loadCourseData', this.onLoadCourseData.bind(this));\n\n        },\n        \n        onLoadCourseData: function() {\n\n            this.loadConfig();\n\n            this.debug('Logging config loaded');\n\n            this.trigger('log:ready');\n\n        },\n\n        loadConfig: function() {\n\n            if (Adapt.config.has('_logging')) {\n                this._config = Adapt.config.get('_logging');\n            }\n\n            this.checkQueryStringOverride();\n\n        },\n\n        checkQueryStringOverride: function() {\n\n            // Override default log level with level present in query string\n            var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);\n            if (!matches || matches.length < 2) return;\n\n            var override = LOG_LEVEL(matches[1].toUpperCase());\n            if (!override) return;\n\n            this._config._level = override.asLowerCase;\n            this.debug('Loglevel override in query string:', this._config._level);\n            \n        },\n        \n        debug: function() {            \n            this._log(LOG_LEVEL.DEBUG, Array.prototype.slice.call(arguments));\n        },\n        \n        info: function() {\n            this._log(LOG_LEVEL.INFO, Array.prototype.slice.call(arguments));\n        },\n        \n        warn: function() {\n            this._log(LOG_LEVEL.WARN, Array.prototype.slice.call(arguments));\n        },\n        \n        error: function() {\n            this._log(LOG_LEVEL.ERROR, Array.prototype.slice.call(arguments));\n        },\n        \n        fatal: function() {\n            this._log(LOG_LEVEL.FATAL, Array.prototype.slice.call(arguments));\n        },\n        \n        _log: function(level, data) {\n\n            var isEnabled = (this._config._isEnabled);\n            if (!isEnabled) return;\n\n            var configLevel = LOG_LEVEL(this._config._level.toUpperCase());\n\n            var isLogLevelAllowed = (level >= configLevel);\n            if (!isLogLevelAllowed) return;\n\n            this._logToConsole(level, data);\n\n            // Allow error reporting plugins to hook and report to logging systems\n            this.trigger('log', level, data);\n            this.trigger('log:' + level.asLowerCase, level, data);\n\n        },\n\n        _logToConsole: function(level, data) {\n\n            var shouldLogToConsole = (this._config._console);\n            if (!shouldLogToConsole) return;\n\n            var log = [level.asUpperCase + ':'];\n            data && log.push.apply(log, data);\n\n            // is there a matching console method we can use e.g. console.error()?\n            if(console[level.asLowerCase]) {\n                console[level.asLowerCase].apply(console, log);\n            } else {\n                console.log.apply(console, log);\n            }\n        }\n\n    });\n\n    Adapt.log = new Logging();\n});\n\n",
    "define('core/js/models/buildModel',[\n    'core/js/adapt',\n    'core/js/logging'\n], function (Adapt) {\n\n    var BuildModel = Backbone.Model.extend({\n\n        defaults: {\n            jsonext: 'json'\n        },\n\n        initialize: function(attrs, options) {\n            this.url = options.url;\n            // Fetch data & if successful trigger event to enable plugins to stop course files loading\n            // Then check if course files can load\n            // 'configModel:loadCourseData' event starts the core content collections and models being fetched\n            this.fetch({\n                success: _.bind(function() {\n                    this.isLoaded = true;\n                    Adapt.trigger('buildModel:dataLoaded');\n                }, this),\n                error: function() {\n                    console.log('Unable to load adapt/js/build.js');\n                    Adapt.trigger('buildModel:dataLoaded');\n                }\n            });\n        }\n\n    });\n\n    return BuildModel;\n\n});\n",
    "define('core/js/models/adaptModel',[\n    'core/js/adapt',\n    'core/js/logging'\n], function (Adapt) {\n\n    var AdaptModel = Backbone.Model.extend({\n\n        defaults: {\n            _canShowFeedback: true,\n            _classes: \"\",\n            _canReset: false,\n            _isComplete: false,\n            _isInteractionComplete: false,\n            _requireCompletionOf: -1,\n            _isEnabled: true,\n            _isResetOnRevisit: false,\n            _isAvailable: true,\n            _isOptional: false,\n            _isReady: false,\n            _isVisible: true,\n            _isLocked: false,\n            _isHidden: false\n        },\n\n        trackable: [\n            '_id',\n            '_isComplete',\n            '_isInteractionComplete'\n        ],\n\n        initialize: function () {\n            // Wait until data is loaded before setting up model\n            this.listenToOnce(Adapt, 'app:dataLoaded', this.setupModel);\n\n        },\n\n        setupModel: function() {\n            if (this.get('_type') === 'page') {\n                this._children = 'articles';\n            }\n            if (this._siblings === 'contentObjects' && this.get('_parentId') !== Adapt.course.get('_id')) {\n                this._parent = 'contentObjects';\n            }\n            if (this._children) {\n                //if parent is optional, apply to children\n                if (this.get('_isOptional')) this.setOptional(true);\n\n                this.setupChildListeners();\n            }\n\n            this.init();\n\n            _.defer(_.bind(function() {\n                if (this._children) {\n                    this.checkCompletionStatus();\n\n                    this.checkInteractionCompletionStatus();\n\n                    this.checkLocking();\n                }\n\n                this.setupTrackables();\n\n            }, this));\n\n        },\n\n        setupTrackables: function() {\n\n            // Limit state trigger calls and make state change callbacks batched-asynchronous\n            var originalTrackableStateFunction = this.triggerTrackableState;\n            this.triggerTrackableState = _.compose(\n                _.bind(function() {\n\n                    // Flag that the function is awaiting trigger\n                    this.triggerTrackableState.isQueued = true;\n\n                }, this),\n                _.debounce(_.bind(function() {\n                    \n                    // Trigger original function\n                    originalTrackableStateFunction.apply(this);\n\n                    // Unset waiting flag\n                    this.triggerTrackableState.isQueued = false;\n\n                }, this), 17)\n            );\n\n            // Listen to model changes, trigger trackable state change when appropriate\n            this.listenTo(this, \"change\", function(model, value) {\n\n                // Skip if trigger queued or adapt hasn't started yet\n                if (this.triggerTrackableState.isQueued || !Adapt.attributes._isStarted) {\n                    return;\n                }\n\n                // Check that property is trackable\n                var trackablePropertyNames = _.result(this, 'trackable', []);\n                var changedPropertyNames = _.keys(model.changed);\n                var isTrackable = _.find(changedPropertyNames, function(item, index) {\n                     return _.contains(trackablePropertyNames, item);\n                }.bind(this));\n\n                if (isTrackable) {\n                    // Trigger trackable state change\n                    this.triggerTrackableState();\n                }\n            });\n        },\n\n        setupChildListeners: function() {\n            var children = this.getChildren();\n            if (!children.length) {\n                return;\n            }\n\n            this.listenTo(children, {\n                \"change:_isReady\": this.checkReadyStatus,\n                \"change:_isComplete\": this.onIsComplete,\n                \"change:_isInteractionComplete\": this.checkInteractionCompletionStatus\n            });\n        },\n\n        init: function() {},\n\n        getTrackableState: function() {\n\n            var trackable = this.resultExtend(\"trackable\", []);\n            var json = this.toJSON();\n\n            var args = trackable;\n            args.unshift(json);\n\n            return _.pick.apply(_, args);\n\n        },\n\n        setTrackableState: function(state) {\n\n            var trackable = this.resultExtend(\"trackable\", []);\n\n            var args = trackable;\n            args.unshift(state);\n\n            state = _.pick.apply(_, args);\n\n            this.set(state);\n\n            return this;\n\n        },\n\n        triggerTrackableState: function() {\n            \n            Adapt.trigger(\"state:change\", this, this.getTrackableState());\n            \n        },\n\n        reset: function(type, force) {\n            if (!this.get(\"_canReset\") && !force) return;\n\n            type = type || true;\n\n            switch (type) {\n            case \"hard\": case true:\n                this.set({\n                    _isEnabled: true,\n                    _isComplete: false,\n                    _isInteractionComplete: false\n                });\n                break;\n            case \"soft\":\n                this.set({\n                    _isEnabled: true,\n                    _isInteractionComplete: false\n                });\n                break;\n            }\n        },\n\n        checkReadyStatus: function () {\n            // Filter children based upon whether they are available\n            // Check if any return _isReady:false\n            // If not - set this model to _isReady: true\n            var children = this.getAvailableChildModels();\n            if (_.find(children, function(child) { return child.get('_isReady') === false; })) {\n                return;\n            }\n\n            this.set({_isReady: true});\n        },\n\n        setCompletionStatus: function() {\n            if (this.get('_isVisible')) {\n                this.set('_isComplete', true);\n                this.set('_isInteractionComplete', true);\n            }\n        },\n\n        checkCompletionStatus: function () {\n            //defer to allow other change:_isComplete handlers to fire before cascading to parent\n            Adapt.checkingCompletion();\n            _.defer(_.bind(this.checkCompletionStatusFor, this, \"_isComplete\"));\n        },\n\n        checkInteractionCompletionStatus: function () {\n            //defer to allow other change:_isInteractionComplete handlers to fire before cascading to parent\n            Adapt.checkingCompletion();\n            _.defer(_.bind(this.checkCompletionStatusFor, this, \"_isInteractionComplete\"));\n        },\n\n        /**\n         * Function for checking whether the supplied completion attribute should be set to true or false. \n         * It iterates over our immediate children, checking the same completion attribute on any mandatory child\n         * to see if enough/all of them them have been completed. If enough/all have, we set our attribute to true; \n         * if not, we set it to false.\n         * @param {string} [completionAttribute] Either \"_isComplete\" or \"_isInteractionComplete\". Defaults to \"_isComplete\" if not supplied.\n         */        \n        checkCompletionStatusFor: function(completionAttribute) {\n            if (!completionAttribute) completionAttribute = \"_isComplete\";\n\n            var completed = false;\n            var children = this.getAvailableChildModels();\n            var requireCompletionOf = this.get(\"_requireCompletionOf\");\n\n            if (requireCompletionOf === -1) { // a value of -1 indicates that ALL mandatory children must be completed\n                completed = (_.find(children, function(child) {\n                    return !child.get(completionAttribute) && !child.get('_isOptional');\n                }) === undefined);\n            } else {\n                completed = (_.filter(children, function(child) {\n                    return child.get(completionAttribute) && !child.get('_isOptional');\n                }).length >= requireCompletionOf);\n            }\n\n            this.set(completionAttribute, completed);\n\n            Adapt.checkedCompletion();\n        },\n\n        findAncestor: function (ancestors) {\n\n            var parent = this.getParent();\n\n            if (this._parent === ancestors) {\n                return parent;\n            }\n\n            var returnedAncestor = parent.getParent();\n\n            if (parent._parent !== ancestors) {\n                returnedAncestor = returnedAncestor.getParent();\n            }\n\n            // Returns a single model\n            return returnedAncestor;\n\n        },\n\n        findDescendantModels: function(descendants) {\n            var children = this.getChildren().models;\n\n            // first check if descendant is child and return child\n            if (this._children === descendants) {\n                return children;\n            }\n\n            var allDescendants = [];\n            var flattenedDescendants;\n            var returnedDescendants;\n\n            function searchChildren(models) {\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var model = models[i];\n                    allDescendants.push(model.getChildren().models);\n                    flattenedDescendants = _.flatten(allDescendants);\n                }\n\n                returnedDescendants = flattenedDescendants;\n\n                if (models.length === 0 || models[0]._children === descendants) {\n                    return;\n                } else {\n                    allDescendants = [];\n                    searchChildren(returnedDescendants);\n                }\n            }\n\n            searchChildren(children);\n\n            return returnedDescendants;\n        },\n\n        \n        // Fetchs the sub structure of a model as a flattened array\n        // \n        // Such that the tree:\n        //  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\n        // \n        // will become the array (parent first = false):\n        //  [ c1, c2, b1, c3, c4, b2, a1, c5, c6, b3, a2 ]\n        // \n        // or (parent first = true):\n        //  [ a1, b1, c1, c2, b2, c3, c4, a2, b3, c5, c6 ]\n        // \n        // This is useful when sequential operations are performed on the menu/page/article/block/component hierarchy.        \n        getAllDescendantModels: function(isParentFirst) {\n\n            var descendants = [];\n\n            if (this.get(\"_type\") === \"component\") {\n                descendants.push(this);\n                return descendants;\n            }\n\n            var children = this.getChildren();\n\n            for (var i = 0, l = children.models.length; i < l; i++) {\n\n                var child = children.models[i];\n                if (child.get(\"_type\") === \"component\") {\n\n                    descendants.push(child);\n                    continue;\n\n                }\n\n                var subDescendants = child.getAllDescendantModels(isParentFirst);\n                if (isParentFirst === true) {\n                    descendants.push(child);\n                }\n\n                descendants = descendants.concat(subDescendants);\n                \n                if (isParentFirst !== true) {\n                    descendants.push(child);\n                }\n\n            }\n\n            return descendants;\n\n        },\n\n        findDescendants: function (descendants) {\n            Adapt.log.warn(\"DEPRECATED - Use findDescendantModels() as findDescendants() may be removed in the future\");\n\n            // first check if descendant is child and return child\n            if (this._children === descendants) {\n                return this.getChildren();\n            }\n\n            var allDescendants = [];\n            var flattenedDescendants;\n            var children = this.getChildren();\n            var returnedDescendants;\n\n            function searchChildren(children) {\n                var models = children.models;\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var model = models[i];\n                    var childrensModels = model.getChildren().models;\n                    allDescendants.push(childrensModels);\n                    flattenedDescendants = _.flatten(allDescendants);\n                }\n\n                returnedDescendants = new Backbone.Collection(flattenedDescendants);\n\n                if (children.models.length === 0 || children.models[0]._children === descendants) {\n                    return;\n                } else {\n                    allDescendants = [];\n                    searchChildren(returnedDescendants);\n                }\n            }\n\n            searchChildren(children);\n\n            // returns a collection of children\n            return returnedDescendants;\n        },\n\n        // Returns a relative model from the Adapt hierarchy\n        //    \n        // Such that in the tree:\n        //  { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\n        // \n        //  findRelative(modelC1, \"@block +1\") = modelB2;\n        //  findRelative(modelC1, \"@component +4\") = modelC5;\n        //\n        // See Adapt.parseRelativeString() for a description of relativeStrings\n        findRelativeModel: function(relativeString, options) {\n            \n            var types = [ \"menu\", \"page\", \"article\", \"block\", \"component\" ];\n\n            options = options || {};\n\n            var modelId = this.get(\"_id\");\n            var modelType = this.get(\"_type\");\n\n            // return a model relative to the specified one if opinionated\n            var rootModel = Adapt.course;\n            if (options.limitParentId) {\n                rootModel = Adapt.findById(options.limitParentId);\n            }\n\n            var relativeDescriptor = Adapt.parseRelativeString(relativeString);\n\n            var findAncestorType = (_.indexOf(types, modelType) > _.indexOf(types, relativeDescriptor.type));\n            var findSiblingType = (modelType === relativeDescriptor.type);\n\n            var searchBackwards = (relativeDescriptor.offset < 0);\n            var moveBy = Math.abs(relativeDescriptor.offset);\n            var movementCount = 0;\n\n            var findDescendantType = (!findSiblingType && !findAncestorType);\n\n            var pageDescendants;\n            if (searchBackwards) {\n                // parents first [p1,a1,b1,c1,c2,a2,b2,c3,c4,p2,a3,b3,c6,c7,a4,b4,c8,c9]\n                pageDescendants = rootModel.getAllDescendantModels(true);\n\n                // reverse so that we don't need a forward and a backward iterating loop\n                // reversed [c9,c8,b4,a4,c7,c6,b3,a3,p2,c4,c3,b2,a2,c2,c1,b1,a1,p1]\n                pageDescendants.reverse();\n\n                if (findDescendantType) {\n                    // move by one less as ordering allows\n                    moveBy-=1;\n                }\n\n            } else if (findDescendantType) {\n                // parents first [p1,a1,b1,c1,c2,a2,b2,c3,c4,p2,a3,b3,c6,c7,a4,b4,c8,c9]\n                pageDescendants = rootModel.getAllDescendantModels(true);\n            } else if (findSiblingType || findAncestorType) {\n                // children first [c1,c2,b1,a1,c3,c4,b2,a2,p1,c6,c7,b3,a3,c8,c9,b4,a4,p2]\n                pageDescendants = rootModel.getAllDescendantModels(false);\n            }\n\n            // filter if opinionated\n            if (typeof options.filter === \"function\") {\n                pageDescendants = _.filter(pageDescendants, options.filter);\n            }\n\n            // find current index in array\n            var modelIndex = _.findIndex(pageDescendants, function(pageDescendant) {\n                if (pageDescendant.get(\"_id\") === modelId) {\n                    return true;\n                }\n                return false;\n            });\n\n            if (options.loop) {\n\n                // normalize offset position to allow for overflow looping\n                var typeCounts = {};\n                pageDescendants.forEach(function(model) {\n                    var type = model.get(\"_type\");\n                    typeCounts[type] = typeCounts[type] || 0;\n                    typeCounts[type]++;\n                });\n                moveBy = moveBy % typeCounts[relativeDescriptor.type];\n                \n                // double up entries to allow for overflow looping\n                pageDescendants = pageDescendants.concat(pageDescendants.slice(0));\n\n            }\n\n            for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {\n                var descendant = pageDescendants[i];\n                if (descendant.get(\"_type\") === relativeDescriptor.type) {\n                    if (movementCount === moveBy) {\n                        return Adapt.findById(descendant.get(\"_id\"));\n                    }\n                    movementCount++;\n                }\n            }\n\n            return undefined;\n        },\n\n        getChildren: function () {\n            if (this.get(\"_children\")) return this.get(\"_children\");\n\n            var childrenCollection;\n\n            if (!this._children) {\n                childrenCollection = new Backbone.Collection();\n            } else {\n                var children = Adapt[this._children].where({_parentId: this.get(\"_id\")});\n                childrenCollection = new Backbone.Collection(children);\n            }\n\n            if (this.get('_type') == 'block' && childrenCollection.length == 2\n                && childrenCollection.models[0].get('_layout') !== 'left' && this.get('_sortComponents') !== false) {\n                // Components may have a 'left' or 'right' _layout,\n                // so ensure they appear in the correct order\n                // Re-order component models to correct it\n                childrenCollection.comparator = '_layout';\n                childrenCollection.sort();\n            }\n\n            this.set(\"_children\", childrenCollection);\n\n            // returns a collection of children\n            return childrenCollection;\n        },\n\n        getAvailableChildModels: function() {\n            return this.getChildren().where({\n                _isAvailable: true\n            });\n        },\n\n        getAvailableChildren: function() {\n            Adapt.log.warn(\"DEPRECATED - Use getAvailableChildModels() as getAvailableChildren() may be removed in the future\");\n\n            return new Backbone.Collection(this.getChildren().where({\n                _isAvailable: true\n            }));\n        },\n\n        getParent: function () {\n            if (this.get(\"_parent\")) return this.get(\"_parent\");\n            if (this._parent === \"course\") {\n                return Adapt.course;\n            }\n            var parent = Adapt.findById(this.get(\"_parentId\"));\n            this.set(\"_parent\", parent);\n\n            // returns a parent model\n            return parent;\n        },\n\n        getAncestorModels: function(shouldIncludeChild) {\n            var parents = [];\n            var context = this;\n\n            if (shouldIncludeChild) parents.push(context);\n\n            while (context.has(\"_parentId\")) {\n                context = context.getParent();\n                parents.push(context);\n            }\n\n            return parents.length ? parents : null;\n        },\n\n        getParents: function(shouldIncludeChild) {\n            Adapt.log.warn(\"DEPRECATED - Use getAncestorModels() as getParents() may be removed in the future\");\n\n            var parents = [];\n            var context = this;\n\n            if (shouldIncludeChild) parents.push(context);\n\n            while (context.has(\"_parentId\")) {\n                context = context.getParent();\n                parents.push(context);\n            }\n\n            return parents.length ? new Backbone.Collection(parents) : null;\n        },\n\n        getSiblings: function (passSiblingsAndIncludeSelf) {\n            var siblings;\n            if (!passSiblingsAndIncludeSelf) {\n                // returns a collection of siblings excluding self\n                if (this._hasSiblingsAndSelf === false) {\n                    return this.get(\"_siblings\");\n                }\n                siblings = _.reject(Adapt[this._siblings].where({\n                    _parentId: this.get(\"_parentId\")\n                }), _.bind(function (model) {\n                    return model.get('_id') == this.get('_id');\n                }, this));\n\n                this._hasSiblingsAndSelf = false;\n\n            } else {\n                // returns a collection of siblings including self\n                if (this._hasSiblingsAndSelf) {\n                    return this.get(\"_siblings\");\n                }\n\n                siblings = Adapt[this._siblings].where({\n                    _parentId: this.get(\"_parentId\")\n                });\n                this._hasSiblingsAndSelf = true;\n            }\n\n            var siblingsCollection = new Backbone.Collection(siblings);\n            this.set(\"_siblings\", siblingsCollection);\n            return siblingsCollection;\n        },\n\n        setOnChildren: function (key, value, options) {\n\n            var args = arguments;\n\n            this.set.apply(this, args);\n\n            if (!this._children) return;\n\n            var children = this.getChildren();\n            var models = children.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var child = models[i];\n                child.setOnChildren.apply(child, args);\n            }\n\n        },\n\n        setOptional: function(value) {\n            this.set({_isOptional: value});\n        },\n\n        checkLocking: function() {\n            var lockType = this.get(\"_lockType\");\n\n            if (!lockType) return;\n\n            switch (lockType) {\n                case \"sequential\":\n                    this.setSequentialLocking();\n                    break;\n                case \"unlockFirst\":\n                    this.setUnlockFirstLocking();\n                    break;\n                case \"lockLast\":\n                    this.setLockLastLocking();\n                    break;\n                case \"custom\":\n                    this.setCustomLocking();\n                    break;\n                default:\n                    console.warn(\"AdaptModel.checkLocking: unknown _lockType \\\"\" +\n                        lockType + \"\\\" found on \" + this.get(\"_id\"));\n            }\n        },\n\n        setSequentialLocking: function() {\n            var children = this.getAvailableChildModels();\n\n            for (var i = 1, j = children.length; i < j; i++) {\n                children[i].set(\"_isLocked\", !children[i - 1].get(\"_isComplete\"));\n            }\n        },\n\n        setUnlockFirstLocking: function() {\n            var children = this.getAvailableChildModels();\n            var isFirstChildComplete = children[0].get(\"_isComplete\");\n\n            for (var i = 1, j = children.length; i < j; i++) {\n                children[i].set(\"_isLocked\", !isFirstChildComplete);\n            }\n        },\n\n        setLockLastLocking: function() {\n            var children = this.getAvailableChildModels();\n            var lastIndex = children.length - 1;\n\n            for (var i = lastIndex - 1; i >= 0; i--) {\n                if (!children[i].get(\"_isComplete\")) {\n                    return children[lastIndex].set(\"_isLocked\", true);\n                }\n            }\n\n            children[lastIndex].set(\"_isLocked\", false);\n        },\n\n        setCustomLocking: function() {\n            var children = this.getAvailableChildModels();\n\n            for (var i = 0, j = children.length; i < j; i++) {\n                var child = children[i];\n\n                child.set(\"_isLocked\", this.shouldLock(child));\n            }\n        },\n\n        shouldLock: function(child) {\n            var lockedBy = child.get(\"_lockedBy\");\n\n            if (!lockedBy) return false;\n\n            for (var i = lockedBy.length - 1; i >= 0; i--) {\n                var id = lockedBy[i];\n\n                try {\n                    var model = Adapt.findById(id);\n\n                    if (!model.get(\"_isAvailable\")) continue;\n                    if (!model.get(\"_isComplete\")) return true;\n                }\n                catch (e) {\n                    console.warn(\"AdaptModel.shouldLock: unknown _lockedBy ID \\\"\" + id +\n                        \"\\\" found on \" + child.get(\"_id\"));\n                }\n            }\n\n            return false;\n        },\n\n        onIsComplete: function() {\n            this.checkCompletionStatus();\n\n            this.checkLocking();\n        }\n\n    });\n\n    return AdaptModel;\n\n});\n\n",
    "define('core/js/models/articleModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ArticleModel = AdaptModel.extend({\n        _parent:'contentObjects',\n    \t_siblings:'articles',\n        _children: 'blocks'\n    });\n\n    return ArticleModel;\n\n});\n\n",
    "define('core/js/models/blockModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\t\n    var BlockModel = AdaptModel.extend({\n        _parent:'articles',\n    \t_siblings:'blocks',\n        _children: 'components',\n        \n        defaults: function() {\n            return _.extend({\n                _sortComponents: true\n            }, AdaptModel.prototype.defaults);\n        }\n    });\n\n    return BlockModel;\n\n});\n\n",
    "define('core/js/models/configModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var ConfigModel = Backbone.Model.extend({\n\n        defaults: {\n            screenSize: {\n                small: 520,\n                medium: 760,\n                large: 1024\n            },\n            _completionCriteria: {\n                _requireContentCompleted: true,\n                _requireAssessmentPassed: false\n            },\n            _forceRouteLocking: false,\n            _canLoadData: true,\n            _disableAnimation: false\n        },\n\n        initialize: function(attrs, options) {\n            this.url = options.url;\n            // Fetch data & if successful trigger event to enable plugins to stop course files loading\n            // Then check if course files can load\n            // 'configModel:loadCourseData' event starts the core content collections and models being fetched\n            this.fetch({\n                success: function() {\n                    Adapt.trigger('offlineStorage:prepare');\n\n                    Adapt.wait.queue(function() {\n\n                        Adapt.trigger('configModel:dataLoaded');\n\n                        if (this.get('_canLoadData')) {\n                            Adapt.trigger('configModel:loadCourseData');\n                        }\n\n                        if (this.get('_defaultDirection') === 'rtl'){\n                            // We're going to use rtl style\n                            $('html').addClass('dir-rtl');\n                        }\n\n                        // Check if animations should be disabled\n                        var disableAnimationArray = this.get('_disableAnimationFor');\n                        if (disableAnimationArray && disableAnimationArray.length > 0) {\n                            for (var i = 0; i < disableAnimationArray.length; i++) {\n                                if ($(\"html\").is(disableAnimationArray[i])) {\n                                    this.set('_disableAnimation', true);\n                                    console.log('Animation disabled.');\n                                }\n                            }\n                        }\n                    }.bind(this));\n                }.bind(this),\n                error: function() {\n                    console.log('Unable to load course/config.json');\n                }\n            });\n        },\n\n        loadData: function() {\n\n        }\n\n    });\n\n   return ConfigModel;\n\n});\n\n",
    "define('core/js/models/contentObjectModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ContentObjectModel = AdaptModel.extend({\n    \t_parent:'course',\n    \t_siblings:'contentObjects',\n        _children: 'contentObjects'\n    });\n\n    return ContentObjectModel;\n});\n\n",
    "define('core/js/models/componentModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ComponentModel = AdaptModel.extend({\n        _parent:'blocks',\n        _siblings:'components',\n\n        trackable: AdaptModel.resultExtend(\"trackable\", [\n            '_userAnswer'\n        ])\n\n    });\n\n    return ComponentModel;\n\n});\n\n",
    "define('core/js/models/courseModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var CourseModel = AdaptModel.extend({\n\n        initialize: function(attrs, options) {\n            AdaptModel.prototype.initialize.apply(this, arguments);\n            Adapt.trigger('courseModel:dataLoading');\n\n            this.url = options.url;\n\n            this.on('sync', this.loadedData, this);\n            if (this.url) {\n                this.fetch({\n                    error: _.bind(function(model, xhr, options) {\n                        console.error(\"ERROR: unable to load file \" + this.url);\n                    }, this)\n                });\n            }\n        },\n\n        loadedData: function() {\n            Adapt.trigger('courseModel:dataLoaded');\n        },\n\n        _children: \"contentObjects\"\n\n    });\n\n    return CourseModel;\n\n});\n\n",
    "define('core/js/enums/buttonStateEnum',[],function() {\n\n    var BUTTON_STATE = ENUM([\n        'SUBMIT',\n        'CORRECT',\n        'INCORRECT',\n        'SHOW_CORRECT_ANSWER',\n        'HIDE_CORRECT_ANSWER',\n        'SHOW_FEEDBACK',\n        'RESET'\n    ]);\n\n    return BUTTON_STATE;\n\n});\n",
    "define('core/js/models/questionModel',[\n    'core/js/adapt',\n    'core/js/models/componentModel',\n    'core/js/enums/buttonStateEnum'\n], function(Adapt, ComponentModel, BUTTON_STATE) {\n\n    var QuestionModel = ComponentModel.extend({\n\n        //////\n        // Setup question types\n        ////\n\n        // Used to set model defaults\n        defaults: function() {\n            // Extend from the ComponentModel defaults\n            return ComponentModel.resultExtend(\"defaults\", {\n                _isQuestionType: true,\n                _shouldDisplayAttempts: false,\n                _canShowModelAnswer: true,\n                _canShowFeedback: true,\n                _canShowMarking: true,\n                _isSubmitted: false,\n                _questionWeight: Adapt.config.get(\"_questionWeight\"),\n            });\n        },\n\n        // Extend from the ComponentModel trackable\n        trackable: ComponentModel.resultExtend(\"trackable\", [\n            '_isSubmitted',\n            '_score',\n            '_isCorrect',\n            '_attemptsLeft'\n        ]),\n\n        init: function() {\n            this.setupDefaultSettings();\n            this.listenToOnce(Adapt, \"adapt:initialize\", this.onAdaptInitialize);\n        },\n\n        // Calls default methods to setup on questions\n        setupDefaultSettings: function() {\n            // Not sure this is needed anymore, keeping to maintain API\n            this.setupWeightSettings();\n            this.setupButtonSettings();\n        },\n\n        // Used to setup either global or local button text\n        setupButtonSettings: function() {\n            var globalButtons = Adapt.course.get(\"_buttons\");\n\n            // Check if  '_buttons' attribute exists and if not use the globally defined buttons.\n            if (!this.has(\"_buttons\")) {\n                this.set(\"_buttons\", globalButtons);\n            } else {\n                // Check all the components buttons.\n                // If they are empty use the global defaults.\n                var componentButtons = this.get(\"_buttons\");\n\n                for (var key in componentButtons) {\n                    if (typeof componentButtons[key] === 'object') {\n                        // Button text.\n                        if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {\n                            componentButtons[key].buttonText = globalButtons[key].buttonText;\n                        }\n\n                        // ARIA labels.\n                        if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {\n                            componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;\n                        }\n                    }\n\n                    if (!componentButtons[key] && globalButtons[key]) {\n                        componentButtons[key] = globalButtons[key];\n                    }\n                }\n            }\n        },\n\n        // Used to setup either global or local question weight/score\n        setupWeightSettings: function() {\n            // Not needed as handled by model defaults, keeping to maintain API\n        },\n\n        //////\n        // Selection restoration process\n        ////\n\n\n        // Used to add post-load changes to the model\n        onAdaptInitialize: function() {\n            this.restoreUserAnswers();\n        },\n\n        // Used to restore the user answers \n        restoreUserAnswers: function() {},\n\n        \n        //////\n        // Submit process\n        ////\n\n        // Use to check if the user is allowed to submit the question\n        // Maybe the user has to select an item?\n        canSubmit: function() {},\n\n        // Used to update the amount of attempts the user has left\n        updateAttempts: function() {\n            if (!this.get('_attemptsLeft')) {\n                this.set(\"_attemptsLeft\", this.get('_attempts'));\n            }\n            this.set(\"_attemptsLeft\", this.get('_attemptsLeft') - 1);\n        },\n\n        // Used to set _isEnabled and _isSubmitted on the model\n        setQuestionAsSubmitted: function() {\n            this.set({\n                _isEnabled: false,\n                _isSubmitted: true\n            });\n        },\n\n        // This is important for returning or showing the users answer\n        // This should preserve the state of the users answers\n        storeUserAnswer: function() {},\n\n        // Sets _isCorrect:true/false based upon isCorrect method below\n        markQuestion: function() {\n\n            if (this.isCorrect()) {\n                this.set('_isCorrect', true);\n            } else {\n                this.set('_isCorrect', false);\n            }\n\n        },\n\n         // Should return a boolean based upon whether to question is correct or not\n        isCorrect: function() {},\n\n        // Used to set the score based upon the _questionWeight\n        setScore: function() {},\n\n        // Checks if the question should be set to complete\n        // Calls setCompletionStatus and adds complete classes\n        checkQuestionCompletion: function() {\n\n            var isComplete = (this.get('_isCorrect') || this.get('_attemptsLeft') === 0);\n\n            if (isComplete) {\n                this.setCompletionStatus();\n            }\n\n            return isComplete;\n\n        },\n\n        // Updates buttons based upon question state by setting\n        // _buttonState on the model which buttonsView listens to\n        updateButtons: function() {\n\n            var isInteractionComplete = this.get('_isInteractionComplete');\n            var isCorrect = this.get('_isCorrect');\n            var isEnabled = this.get('_isEnabled');\n            var buttonState = this.get('_buttonState');\n            var canShowModelAnswer = this.get('_canShowModelAnswer');\n\n            if (isInteractionComplete) {\n\n                if (isCorrect || !canShowModelAnswer) {\n                    // Use correct instead of complete to signify button state\n                    this.set('_buttonState', BUTTON_STATE.CORRECT);\n\n                } else {\n\n                    switch (buttonState) {\n                        case BUTTON_STATE.SUBMIT:\n                        case BUTTON_STATE.HIDE_CORRECT_ANSWER:\n                            this.set('_buttonState', BUTTON_STATE.SHOW_CORRECT_ANSWER);\n                            break;\n                        default:\n                            this.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);\n                    }\n\n                }\n\n            } else {\n\n                if (isEnabled) {\n                    this.set('_buttonState', BUTTON_STATE.SUBMIT);\n                } else {\n                    this.set('_buttonState', BUTTON_STATE.RESET);\n                }\n            }\n\n        },\n\n        // Used to setup the correct, incorrect and partly correct feedback\n        setupFeedback: function() {\n\n            if (this.get('_isCorrect')) {\n                this.setupCorrectFeedback();\n            } else if (this.isPartlyCorrect()) {\n                this.setupPartlyCorrectFeedback();\n            } else {\n                this.setupIncorrectFeedback();\n            }\n\n        },\n\n        // Used by the question to determine if the question is incorrect or partly correct\n        // Should return a boolean\n        isPartlyCorrect: function() {},\n\n        setupCorrectFeedback: function() {\n\n            var feedback = this.get(\"_feedback\");\n\n            this.set({\n                feedbackTitle: this.getFeedbackTitle(feedback),\n                feedbackMessage: feedback.correct || \"\"\n            });\n\n        },\n\n        setupPartlyCorrectFeedback: function() {\n\n            var feedback = this.get(\"_feedback\");\n            \n            if (!feedback) return;\n\n            if (feedback._partlyCorrect) {\n                if (this.get('_attemptsLeft') === 0 || !feedback._partlyCorrect.notFinal) {\n                    if (feedback._partlyCorrect.final) {\n                        this.set({\n                            feedbackTitle: this.getFeedbackTitle(feedback),\n                            feedbackMessage: feedback._partlyCorrect.final\n                        });\n                    } else {\n                        this.setupIncorrectFeedback();\n                    }\n                } else {\n                    this.set({\n                        feedbackTitle: this.getFeedbackTitle(feedback),\n                        feedbackMessage: feedback._partlyCorrect.notFinal ? feedback._partlyCorrect.notFinal : \"\"\n                    });\n                }\n            } else {\n                this.setupIncorrectFeedback();\n            }\n\n        },\n\n        setupIncorrectFeedback: function() {\n\n            var feedback = this.get(\"_feedback\");\n\n            if (this.get('_attemptsLeft') === 0 || feedback && !feedback._incorrect.notFinal) {\n                this.set({\n                    feedbackTitle: this.getFeedbackTitle(feedback),\n                    feedbackMessage: feedback ? feedback._incorrect.final : \"\"\n                });\n            } else {\n                this.set({\n                    feedbackTitle: this.getFeedbackTitle(feedback),\n                    feedbackMessage: feedback ? feedback._incorrect.notFinal : \"\"\n                });\n            }\n\n        },\n        \n        getFeedbackTitle: function(feedback) {\n            return feedback.title || this.get('displayTitle') ||  this.get('title') || \"\";\n        },\n\n        // Reset the model to let the user have another go (not the same as attempts)\n        reset: function(type, force) {\n            if (!this.get(\"_canReset\") && !force) return;\n\n            type = type || true; //hard reset by default, can be \"soft\", \"hard\"/true\n\n            ComponentModel.prototype.reset.call(this, type, force);\n\n            var attempts = this.get('_attempts');\n            this.set({\n                _attemptsLeft: attempts,\n                _isCorrect: undefined,\n                _isSubmitted: false,\n                _buttonState: BUTTON_STATE.SUBMIT\n            });\n        },\n\n        // Reset question for subsequent attempts\n        setQuestionAsReset: function() {\n            this.set({\n                _isEnabled: true,\n                _isSubmitted: false\n            });\n        },\n\n        // Used by the question view to reset the stored user answer\n        resetUserAnswer: function() {},\n        \n        refresh: function() {\n            this.trigger('question:refresh');\n        },\n\n        getButtonState: function() {\n            if (this.get('_isCorrect')) {\n                return BUTTON_STATE.CORRECT;\n            }\n\n            if (this.get('_attemptsLeft') === 0) {\n                 return this.get('_canShowModelAnswer') ? BUTTON_STATE.SHOW_CORRECT_ANSWER : BUTTON_STATE.INCORRECT;\n            }\n\n            return this.get('_isSubmitted') ? BUTTON_STATE.RESET : BUTTON_STATE.SUBMIT;\n        },\n\n        // Returns an object specific to the question type, e.g. if the question\n        // is a 'choice' this should contain an object with:\n        // - correctResponsesPattern[]\n        // - choices[]\n        getInteractionObject: function() {\n            return {};\n        },\n\n        // Returns a string detailing how the user answered the question.\n        getResponse: function() {},\n\n        // Returns a string describing the type of interaction: \"choice\" and \"matching\" supported (see scorm wrapper)\n        getResponseType: function() {}\n\n    });\n\n    return QuestionModel;\n\n});\n\n",
    "define('core/js/views/accessibilityView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AccessibilityView = Backbone.View.extend({\n\n        el: '#accessibility-toggle',\n\n        initialize: function() {\n            this.render();\n        },\n\n        events: {\n            'click' : 'toggleAccessibility'\n        },\n\n        render: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n\n            if (!hasAccessibility) {\n                return;\n            } else {\n                var isActive = Adapt.config.get('_accessibility')._isActive;\n                var offLabel = Adapt.course.get('_globals') && (Adapt.course.get('_globals')._accessibility.accessibilityToggleTextOff || Adapt.course.get('_globals')._accessibility._accessibilityToggleTextOff);\n                var onLabel = Adapt.course.get('_globals') && (Adapt.course.get('_globals')._accessibility.accessibilityToggleTextOn || Adapt.course.get('_globals')._accessibility._accessibilityToggleTextOn);\n\n                var toggleText = isActive ? offLabel : onLabel;\n\n                this.$el.attr('aria-label', Adapt.course.get(\"title\") + \". \"\n                    + Adapt.course.get('_globals')._accessibility._ariaLabels.accessibilityToggleButton + \". \"\n                    + $.a11y_normalize(toggleText));\n            }\n        },\n\n        toggleAccessibility: function(event) {\n            event.preventDefault();\n\n            var hasAccessibility = Adapt.config.get('_accessibility')._isActive;\n\n            var toggleAccessibility = (hasAccessibility) ? false : true;\n\n            Adapt.config.get('_accessibility')._isActive = toggleAccessibility;\n\n            Adapt.trigger('accessibility:toggle');\n\n            this.render();\n\n            Backbone.history.navigate(window.location.hash || \"#/\", {trigger: true});\n        }\n\n    });\n\n    return AccessibilityView;\n\n});\n\n",
    "define('core/js/views/navigationView',[\n    'core/js/adapt',\n    'core/js/views/accessibilityView'\n], function(Adapt, AccessibilityView) {\n\n    var NavigationView = Backbone.View.extend({\n\n        className: \"navigation\",\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                'courseModel:dataLoading': this.remove,\n                'accessibility:toggle': this.onA11yToggle\n            });\n            this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);\n            this.template = \"navigation\";\n            this.preRender();\n        },\n\n        events: {\n            'click [data-event]':'triggerEvent'\n        },\n\n        preRender: function() {\n            Adapt.trigger('navigationView:preRender', this);\n            this.render();\n        },\n\n        render: function() {\n            var template = Handlebars.templates[this.template];\n            this.$el.html(template(\n                {\n                    _globals: Adapt.course.get(\"_globals\"),\n                    _accessibility: Adapt.config.get(\"_accessibility\")\n                }\n            )).insertBefore('#wrapper');\n\n            _.defer(_.bind(function() {\n                Adapt.trigger('navigationView:postRender', this);\n            }, this));\n\n            this.setupA11yButton();\n\n            if (Adapt.accessibility.isActive()) {\n                this.setupUsageInstructions();\n            }\n\n            return this;\n        },\n\n        triggerEvent: function(event) {\n            event.preventDefault();\n            var currentEvent = $(event.currentTarget).attr('data-event');\n            Adapt.trigger('navigation:' + currentEvent);\n        },\n\n        hideNavigationButton: function(model) {\n            if (model.get('_type') === \"course\") {\n                $('.navigation-back-button, .navigation-home-button').addClass('display-none');\n            } else {\n                this.showNavigationButton();\n            }\n        },\n\n        showNavigationButton: function() {\n            $('.navigation-back-button, .navigation-home-button').removeClass('display-none');\n        },\n\n        setupA11yButton: function() {\n            new AccessibilityView();\n        },\n\n        setupUsageInstructions: function() {\n            var config = Adapt.course.get(\"_globals\")._accessibility;\n\n            if (!config || !config._accessibilityInstructions) {\n                this.$('#accessibility-instructions').remove();\n                return;\n            }\n\n            var instructionsList = config._accessibilityInstructions;\n\n            var usageInstructions;\n            if (instructionsList[Adapt.device.browser]) {\n                usageInstructions = instructionsList[Adapt.device.browser];\n            } else if (Modernizr.touch) {\n                usageInstructions = instructionsList.touch || \"\";\n            } else {\n                usageInstructions = instructionsList.notouch || \"\";\n            }\n\n           this.$('#accessibility-instructions').html( usageInstructions );\n        },\n\n        onA11yToggle:function() {\n            // listen once because if a11y active on launch instructions will already be setup\n            \n            if (Adapt.accessibility.isActive()) {\n                this.setupUsageInstructions();\n            }\n        }\n\n    });\n\n    return NavigationView;\n\n});\n\n",
    "define('core/js/accessibility',[\n    'core/js/adapt',\n    'a11y'\n], function(Adapt) {\n\n    var defaultAriaLevels = {\n        \"_menu\": 1,\n        \"_menuItem\": 2,\n        \"_page\": 1,\n        \"_article\": 2,\n        \"_block\": 3,\n        \"_component\": 4,\n        \"_componentItem\": 5\n    };\n\n    var Accessibility = Backbone.Controller.extend({\n\n        $html: $('html'),\n\n        _hasUsageInstructionRead: false,\n        _isLoaded: false,\n        _hasCourseLoaded: false,\n\n        reset: function() {\n            _.extend(this, {\n                _hasUsageInstructionRead: false\n            });\n        },\n\n        initialize: function() {\n            //RUN ONCE\n            if (this._isLoaded) return;\n\n            this.removeLegacyElements();\n\n            //TRIGGER SETUP ON DATA LOADED AND TOGGLE BUTTON\n            Adapt.once('app:dataLoaded', function() {\n                //check if accessibility mode should be restored\n                this._hasCourseLoaded = true;\n                Adapt.config.get(\"_accessibility\")._isActive = Adapt.offlineStorage.get(\"a11y\") || false;\n                this.setupAccessibility();\n\n            }, this);\n\n            Adapt.on('accessibility:toggle', this.setupAccessibility, this);\n\n            //SETUP RENDERING HELPERS\n            Adapt.once('app:dataLoaded', this.setupHelpers, this);\n\n            //SETUP NO SELECT PARAMETERS ON DEVICE CHANGE\n            Adapt.on(\"device:changed\", this.setupNoSelect);\n\n            //Configure the accessibility library\n            this.listenToOnce(Adapt, \"app:dataReady\", this.configureA11yLibrary);\n\n            //CAPTURE ROUTING/NEW DOCUMENT LOADING START AND END\n            this.listenTo(Adapt, {\n                'router:location': this.onNavigationStart,\n                'pageView:ready menuView:ready router:plugin': this.onNavigationEnd\n            });\n        },\n\n        removeLegacyElements: function() {\n            var $legacyElements = $(\"body\").children(\"#accessibility-toggle, #accessibility-instructions\");\n\n            if (!$legacyElements.length) return;\n\n            Adapt.log.warn(\"DEPRECATED - #accessibility-toggle and #accessibility-instructions have been moved to the navigation bar. Please remove them from all of your .html files.\");\n            $legacyElements.remove();\n        },\n\n        setupAccessibility: function() {\n            //CALLED ON BUTTON CLICK AND ON DATA LOAD\n            if (!this.isEnabled()) return;\n\n            //save accessibility state\n            Adapt.offlineStorage.set(\"a11y\", Adapt.config.get(\"_accessibility\")._isActive);\n\n            this.reset();\n\n            this.configureA11yLibrary();\n\n            // Check if accessibility is active\n            if (this.isActive()) {\n                this.setupDocument();\n                this.setupPopupListeners();\n                this.setupLogging();\n\n            } else {\n\n                this.revertDocument();\n                this.revertPopupListeners();\n                this.removeUsageInstructionListener();\n                this.revertLogging();\n            }\n        },\n\n        setupHelpers: function() {\n\n            //MAKE $.a11y_text and $.a11y_normalize IN GLOBAL HANDLEBARS HELPERS a11y_text and a11y_normalize\n            var config = Adapt.config.has('_accessibility')\n                ? Adapt.config.get(\"_accessibility\")\n                : false;\n\n            var helpers = {\n\n                a11y_text: function(text) {\n                    //ALLOW ENABLE/DISABLE OF a11y_text HELPER\n                    if (config && config._isTextProcessorEnabled === false) {\n                        return text;\n                    } else {\n                        return $.a11y_text(text);\n                    }\n                },\n\n                a11y_normalize: function(text) {\n                    return $.a11y_normalize(text);\n                },\n\n                a11y_remove_breaks: function(text) {\n                    return $.a11y_remove_breaks(text);\n                },\n\n                a11y_aria_label: function(text) {\n                    return new Handlebars.SafeString('<div class=\"aria-label prevent-default'+getIgnoreClass()+'\" '+getTabIndex()+' role=\"region\">'+text+'</div>');\n                },\n\n                a11y_aria_label_relative: function(text) {\n                    return new Handlebars.SafeString('<div class=\"aria-label relative prevent-default'+getIgnoreClass()+'\" '+getTabIndex()+' role=\"region\">'+text+'</div>');\n                },\n\n                a11y_wrap_focus: function(text) {\n                    return new Handlebars.SafeString('<a class=\"a11y-focusguard a11y-ignore a11y-ignore-focus\" '+getTabIndex()+' role=\"button\">&nbsp;</a>');\n                },\n\n                a11y_attrs_heading: function(levelOrType) {\n                    // get the global configuration from config.json\n                    var cfg = Adapt.config.get('_accessibility');\n                    // default level to use if nothing overrides it\n                    var level = 1;\n\n                    // first check to see if the Handlebars context has an override\n                    if (this._ariaLevel) {\n                        levelOrType = this._ariaLevel;\n                    }\n\n                    if (isNaN(levelOrType) === false) {\n                        // if a number is passed just use this\n                        level = levelOrType;\n                    }\n                    else if (_.isString(levelOrType)) {\n                        // if a string is passed check if it is defined in global configuration\n                        cfg._ariaLevels = cfg._ariaLevels || defaultAriaLevels;\n                        if (cfg._ariaLevels && cfg._ariaLevels[\"_\"+levelOrType] !== undefined) {\n                            level = cfg._ariaLevels[\"_\"+levelOrType];\n                        }\n                    }\n\n                    return new Handlebars.SafeString(' role=\"heading\" aria-level=\"'+level+'\" '+getTabIndex()+' ');\n                },\n\n                a11y_attrs_tabbable: function() {\n                    return new Handlebars.SafeString(' role=\"region\" '+getTabIndex()+' ');\n                }\n\n            };\n\n            for (var name in helpers) {\n                if (helpers.hasOwnProperty(name)) {\n                     Handlebars.registerHelper(name, helpers[name]);\n                }\n            }\n\n            var getTabIndex = function() {\n                return this.isActive() ? 'tabindex=\"0\"' : 'tabindex=\"-1\"';\n            }.bind(this);\n\n            var getIgnoreClass = function() {\n                return $.a11y.options.isTabbableTextEnabled ? '' : ' a11y-ignore';\n            }.bind(this);\n\n        },\n\n        setupNoSelect: function() {\n            if (!Adapt.config.get('_accessibility') || !Adapt.config.get('_accessibility')._disableTextSelectOnClasses) return;\n\n            var classes = Adapt.config.get('_accessibility')._disableTextSelectOnClasses.split(\" \");\n\n            var isMatch = false;\n            for (var i = 0, item; item = classes[i++];) {\n                if ($('html').is(item)) {\n                    isMatch = true;\n                    break;\n                }\n            }\n\n            if (isMatch) {\n                $('html').addClass(\"no-select\");\n            } else  {\n                $('html').removeClass(\"no-select\");\n            }\n\n        },\n\n        configureA11yLibrary: function() {\n\n            var topOffset = $('.navigation').height();\n            var bottomoffset = 0;\n            $.a11y.options.focusOffsetTop = topOffset;\n            $.a11y.options.focusOffsetBottom = bottomoffset;\n            $.a11y.options.OS = Adapt.device.OS.toLowerCase();\n            $.a11y.options.isTouchDevice = Adapt.device.touch;\n\n            if (this.isActive()) {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: true,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: true,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: true,\n                    isAlertsEnabled: true\n                });\n            } else {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: false,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: false,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: false,\n                    isAlertsEnabled: false\n                });\n            }\n\n            this.setupNoSelect();\n\n            $.a11y.ready();\n        },\n\n        onNavigationStart: function() {\n            this._isLoaded = false;\n            //STOP DOCUMENT READING, MOVE FOCUS TO APPROPRIATE LOCATION\n            $(\"#a11y-focuser\").a11y_focus(true);\n            _.defer(function() {\n                $.a11y_on(false, '.page');\n                $.a11y_on(false, '.menu');\n            });\n        },\n\n        onNavigationEnd: function(view) {\n            //prevent sub-menu items provoking behaviour\n            if (view && view.model) {\n                if (view.model.get(\"_id\") != Adapt.location._currentId) return;\n            }\n\n            //always use detached aria labels for divs and spans\n            _.defer(function() {\n                $('body').a11y_aria_label(true);\n            });\n\n            this._isLoaded = true;\n\n            $.a11y_on(false, '.page');\n            $.a11y_on(false, '.menu');\n\n            this.configureA11yLibrary();\n            $.a11y_update();\n            this.setNavigationBar();\n\n            $('#accessibility-toggle').focus();\n\n            //MAKE FOCUS RIGHT\n            _.delay(_.bind(function() {\n                this.focusInitial();\n            }, this), 500);\n\n        },\n\n        setNavigationBar: function() {\n            var $navArias = $(\".navigation\").find(\".aria-label\").not('#accessibility-instructions');\n\n            if (this.isActive()) {\n                $navArias.attr(\"tabindex\", 0).removeAttr(\"aria-hidden\").removeClass(\"a11y-ignore\");\n            } else {\n                $navArias.attr(\"tabindex\", -1).attr(\"aria-hidden\", \"true\");\n            }\n        },\n\n        isActive: function() {\n            return Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled\n                && Adapt.config.get('_accessibility')._isActive;\n        },\n\n        isEnabled: function() {\n            return Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n        },\n\n        setupDocument: function() {\n            this.$html.addClass('accessibility');\n\n            if (Adapt.config.get('_accessibility')._isTextProcessorEnabled) {\n                this.$html.addClass('text-to-speech');\n            }\n\n            $('.skip-nav-link').removeClass('a11y-ignore a11y-ignore-focus');\n\n            $.a11y(true)\n            $.a11y_on(true, \"#accessibility-instructions\");\n        },\n\n        setupPopupListeners: function() {\n            this.listenTo(Adapt, 'popup:opened popup:closed', this.onPop);\n        },\n\n        setupLogging: function() {\n            if (!Adapt.config.get(\"_accessibility\") || !Adapt.config.get(\"_accessibility\")._logReading) return;\n\n            $(document).on(\"reading\", this.onRead);\n        },\n\n        revertDocument: function() {\n            this.$html.removeClass('accessibility text-to-speech');\n            $('.skip-nav-link').addClass('a11y-ignore a11y-ignore-focus');\n            $.a11y(false);\n            $.a11y_on(false, \"#accessibility-instructions\");\n            $.a11y_on(true, \"#accessibility-toggle\");\n        },\n\n        revertPopupListeners: function() {\n            this.stopListening(Adapt, 'popup:opened popup:closed', this.onPop);\n        },\n\n        removeUsageInstructionListener:function() {\n            $('#accessibility-instructions').off(\"blur\", this.onFocusInstructions);\n        },\n\n        revertLogging: function() {\n            if (Adapt.course.has(\"_globals\") && (!Adapt.course.get(\"_globals\")._accessibility || !Adapt.course.get(\"_globals\")._accessibility._logReading)) return;\n\n            $($.a11y).off(\"reading\", this.onRead);\n        },\n\n\n        focusInitial: function() {\n            if (!this.isActive()) return;\n\n            var debouncedInitial = _.debounce(_.bind(function() {\n                //ENABLED DOCUMENT READING\n\n                if (!this._hasUsageInstructionRead) {\n\n                    this._hasUsageInstructionRead = true;\n\n                    $.a11y_on(true, '.page');\n                    $.a11y_on(true, '.menu');\n\n                    $('#accessibility-instructions').one(\"blur\", this.onFocusInstructions);\n\n                    _.delay(function(){\n                        $('#accessibility-instructions').focusNoScroll();\n                    }, 250);\n\n                } else {\n\n                    if (Adapt.location._currentId && $.a11y.options.OS!=\"mac\") {\n                        //required to stop JAWS from auto reading content in IE\n                        var currentModel = Adapt.findById(Adapt.location._currentId);\n                        var alertText = \" \";\n\n                        switch (currentModel.get(\"_type\")) {\n                            case \"page\":\n                                if (Adapt.course.get(\"_globals\") && Adapt.course.get(\"_globals\")._accessibility && Adapt.course.get(\"_globals\")._accessibility._ariaLabels && Adapt.course.get(\"_globals\")._accessibility._ariaLabels.pageLoaded) {\n                                    alertText = Adapt.course.get(\"_globals\")._accessibility._ariaLabels.pageLoaded;\n                                }\n                                break;\n\n                            case \"menu\":\n                            /* falls through */\n                            default:\n                                if (Adapt.course.get(\"_globals\") && Adapt.course.get(\"_globals\")._accessibility && Adapt.course.get(\"_globals\")._accessibility._ariaLabels && Adapt.course.get(\"_globals\")._accessibility._ariaLabels.menuLoaded) {\n                                    alertText = Adapt.course.get(\"_globals\")._accessibility._ariaLabels.menuLoaded;\n                                }\n                                break;\n                        }\n\n                        $.a11y_alert(alertText);\n                    }\n\n                     _.delay(_.bind(function() {\n                        var windowScrollTop = $(window).scrollTop();\n                        var documentScrollTop = $(document).scrollTop();\n\n                        $.a11y_on(true, '.page');\n                        $.a11y_on(true, '.menu');\n\n                        //prevent auto scrolling to top when scroll has been initiated\n                        if (windowScrollTop > 0 || documentScrollTop > 0) return;\n\n                        _.delay(function(){\n                            $.a11y_focus();\n                        }, 500);\n\n                    }, this), 500);\n\n                }\n\n            }, this), 100);\n            debouncedInitial();\n\n        },\n\n        onRead: function(event, text) {\n            //OUTPUT READ TEXT TO CONSOLE\n            console.log(\"READING: \" + text);\n        },\n\n        onPop: function() {\n            //MAKE SURE POPUP IS CONFIGURED CORRECTLY WITH ARIA LABELS, TABINDEXES ETC\n            if (this.isActive()) {\n                $.a11y_update();\n            }\n        },\n\n        onFocusInstructions: function(event) {\n            //HIDE INSTRUCTIONS FROM TAB WRAP AROUND AFTER LEAVING INSTRUCTIONS\n            if (!Adapt.accessibility._isLoaded) return;\n            $('#accessibility-instructions')\n                .addClass(\"a11y-ignore-focus\")\n                .off(\"blur\", Adapt.accessibility.onFocusInstructions);\n        }\n\n    });\n\n    Adapt.accessibility = new Accessibility();\n\n    return Adapt.accessibility;\n\n});\n\n",
    "define('core/js/offlineStorage',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    //Basic API for setting and getting name+value pairs\n    //Allows registration of a single handler.\n\n    var OfflineStorage = Backbone.Controller.extend({\n\n        /**\n         * set to true initially so that if there are no offlineStorage handlers (i.e. if contrib-spoor is not installed)\n         * this can still be accessed OK\n         */\n        ready: true,\n        _handler: undefined,\n\n        /**\n         * set .ready to false if an offlineStorage handler is being attached - we'll need to wait until the handler lets us know\n         * it's ready before we can safely use offlineStorage\n         */\n        initialize: function(handler) {\n            if (!handler) {\n                return;\n            }\n\n            this.ready = false;\n            this._handler = handler;\n        },\n\n        /**\n         * Flag to indicate if an offlineStorage handler has been defined.\n         * @returns {boolean} true if an offlineStorage handler has been defined, false otherwise\n         */\n        hasHandler: function() {\n            return this._handler !== undefined;\n        },\n\n        set: function(name, value) {\n            if (!(this._handler && this._handler.set)) return;\n            return this._handler.set.apply(this._handler, arguments);\n        },\n\n        get: function(name) {\n            if (!(this._handler && this._handler.get)) return;\n            return this._handler.get.apply(this._handler, arguments);\n        },\n\n        /**\n         * Some forms of offlineStorage could take time to initialise, this allows us to let plugins know when it's ready to be used\n         */\n        setReadyStatus: function() {\n            this.ready = true;\n            Adapt.trigger(\"offlineStorage:ready\");\n        }\n\n    });\n\n    Adapt.offlineStorage = new OfflineStorage();\n\n    return Adapt.offlineStorage;\n\n});\n\n",
    "define('core/js/enums/completionStateEnum',[],function() {\n  \n      var COMPLETION_STATE = ENUM([\n          'INCOMPLETE',\n          'COMPLETED',\n          'PASSED',\n          'FAILED'\n      ]);\n  \n      return COMPLETION_STATE;\n  \n  });\n",
    "define('core/js/tracking',[\n    'core/js/adapt',\n    'core/js/enums/completionStateEnum'\n], function(Adapt, COMPLETION_STATE) {\n\n    var Tracking = Backbone.Controller.extend({\n\n        _config: {\n            _requireContentCompleted: true,\n            _requireAssessmentCompleted: false\n        },\n\n        _assessmentState: null,\n\n        initialize: function() {\n            Adapt.once('configModel:loadCourseData', this.loadConfig.bind(this));\n            Adapt.on('app:dataReady', this.setupEventListeners.bind(this));\n        },\n\n        setupEventListeners: function() {\n            // Check if completion requires passing an assessment. \n            if (this._config._requireAssessmentCompleted) {\n                this.listenTo(Adapt, 'assessment:complete', this.onAssessmentComplete);\n            }\n\n            // Check if completion requires completing all content.\n            if (this._config._requireContentCompleted) {\n                this.listenTo(Adapt.course, 'change:_isComplete', this.checkCompletion);\n            }\n        },\n\n        /**\n         * Store the assessment state.\n         * @param {object} assessmentState - The object returned by Adapt.assessment.getState()\n         */\n        onAssessmentComplete: function(assessmentState) {\n            this._assessmentState = assessmentState;\n\n            this.checkCompletion();\n        },\n\n        /**\n         * Evaluate the course and assessment completion.\n         */\n        checkCompletion: function() {\n            var completionData = this.getCompletionData();\n\n            if (completionData.status === COMPLETION_STATE.INCOMPLETE) {\n                return;\n            }\n\n            Adapt.trigger('tracking:complete', completionData);\n            Adapt.log.debug('tracking:complete', completionData);\n        },\n\n        /**\n         * The return value of this function should be passed to the trigger of 'tracking:complete'.\n         * @returns An object representing the user's course completion.\n         */\n        getCompletionData: function() {\n            var completionData = {\n                status: COMPLETION_STATE.INCOMPLETE,\n                assessment: null\n            };\n\n            // Course complete is required.\n            if (this._config._requireContentCompleted && !Adapt.course.get('_isComplete')) {\n                // INCOMPLETE: course not complete.\n                return completionData;\n            }\n\n            // Assessment completed required.\n            if (this._config._requireAssessmentCompleted) {\n                if (!this._assessmentState) {\n                    // INCOMPLETE: assessment is not complete.\n                    return completionData;\n                }\n\n                // PASSED/FAILED: assessment completed.\n                completionData.status = this._assessmentState.isPass ? COMPLETION_STATE.PASSED : COMPLETION_STATE.FAILED;\n                completionData.assessment = this._assessmentState;\n\n                return completionData;\n            }\n\n            // COMPLETED: criteria met, no assessment requirements.\n            completionData.status = COMPLETION_STATE.COMPLETED;\n\n            return completionData;\n        },\n\n        /**\n         * Set the _config object to the values retrieved from config.json.\n         */\n        loadConfig: function() {\n            if (Adapt.config.has('_completionCriteria')) {\n                this._config = Adapt.config.get('_completionCriteria');\n            }\n        }\n\n    });\n\n    Adapt.tracking = new Tracking();\n\n    return Adapt.tracking;\n});\n\n",
    "define('core/js/device',[\n    'core/js/adapt',\n    'bowser'\n], function(Adapt, Bowser) {\n\n    var $html = $('html');\n    var $window = $(window);\n\n    Adapt.device = {\n        touch: Modernizr.touchevents,\n        screenWidth: getScreenWidth(),\n        screenHeight: getScreenHeight(),\n        browser: (Bowser.name || '').toLowerCase(),\n        version: (Bowser.version || '').toLowerCase(),\n        OS: getOperatingSystem().toLowerCase(),\n        osVersion: Bowser.osversion || '',\n        renderingEngine: getRenderingEngine()\n    };\n\n    // Define 'orientation' and 'aspectRatio' here once 'screenWidth' and 'screenHeight' have been set,\n    // as both these functions are getters, essentially.\n    Object.defineProperties(Adapt.device, {\n        \"orientation\": {\n            get: function () {\n                return (this.screenWidth >= this.screenHeight) ? 'landscape' : 'portrait';\n            }\n        },\n        \"aspectRatio\": {\n            get: function () {\n                return this.screenWidth / this.screenHeight;\n            }\n        }\n    });\n\n    Adapt.once('app:dataReady', function() {\n        Adapt.device.screenSize = checkScreenSize();\n\n        $html.addClass('size-' + Adapt.device.screenSize);\n        \n        if (Adapt.device.orientation) {\n            $html.addClass('orientation-' + Adapt.device.orientation);\n        }\n\n        // As Adapt.config is available it's ok to bind the 'resize'.\n        $window.on('resize orientationchange', onWindowResize);\n    });\n\n    /**\n     * Compares the calculated screen width to the breakpoints defined in config.json.\n     * \n     * @returns {string} 'large', 'medium' or 'small'\n     */\n    function checkScreenSize() {\n        var screenSizeConfig = Adapt.config.get('screenSize');\n        var screenSize;\n\n        if (Adapt.device.screenWidth > screenSizeConfig.medium) {\n            screenSize = 'large';\n        } else if (Adapt.device.screenWidth > screenSizeConfig.small) {\n            screenSize = 'medium';\n        } else {\n            screenSize = 'small';\n        }\n\n        return screenSize;\n    }\n\n    function getScreenWidth() {\n        return isAppleDevice()\n            ? getAppleScreenWidth()\n            : window.innerWidth || $window.width();\n    }\n\n    function getScreenHeight() {\n        return isAppleDevice()\n            ? getAppleScreenHeight()\n            : window.innerHeight || $window.height();\n    }\n\n    function getOperatingSystem() {\n        var os = '';\n        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android',\n            'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                os = flags[i];\n                break;\n            }\n        }\n\n        if (os === '') {\n            // Fall back to using navigator.platform in case Bowser can't detect the OS.\n            var platform = navigator.platform;\n            var platforms = ['Win', 'Mac', 'Linux'];\n            os = 'PlatformUnknown';\n\n            for (var i = 0; i < platforms.length; i++) {\n                if (platform.indexOf(platforms[i]) != -1) {\n                    os = platforms[i].toLowerCase();\n                    break;\n                }\n            }\n\n            // Set consistency with the Bowser flags.\n            if (os == 'win') {\n                os = 'windows';\n            }\n        }\n\n        return os;\n    }\n\n    function getRenderingEngine() {\n        var engine = '';\n        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                engine = flags[i];\n                break;\n            }\n        }\n\n        return engine;\n    }\n\n    var onWindowResize = _.debounce(function onScreenSizeChanged() {\n        // Calculate the screen properties.\n        var previousWidth = Adapt.device.screenWidth;\n        var previousHeight = Adapt.device.screenHeight;\n\n        Adapt.device.screenWidth = getScreenWidth();\n        Adapt.device.screenHeight = getScreenHeight();\n\n        if (previousWidth === Adapt.device.screenWidth && previousHeight === Adapt.device.screenHeight) {\n            // Do not trigger a change if the viewport hasn't actually changed.  Scrolling on iOS will trigger a resize.\n            return;\n        }\n\n        var newScreenSize = checkScreenSize();\n\n        if (newScreenSize !== Adapt.device.screenSize) {\n            Adapt.device.screenSize = newScreenSize;\n\n            $html.removeClass('size-small size-medium size-large').addClass('size-' + Adapt.device.screenSize);\n\n            if (Adapt.device.orientation) {\n                $html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + Adapt.device.orientation);\n            }\n\n            Adapt.trigger('device:changed', Adapt.device.screenSize);\n        }\n\n        Adapt.trigger('device:preResize device:resize device:postResize', Adapt.device.screenWidth);\n\n    }, 100);\n\n    function isAppleDevice() {\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    }\n\n    function getAppleScreenWidth() {\n        return (Math.abs(window.orientation) === 90) ? screen.height : screen.width;\n    }\n\n    function getAppleScreenHeight() {\n        return (Math.abs(window.orientation) === 90) ? screen.width : screen.height;\n    }\n\n    function getAppleDeviceType() {\n        var type = '';\n\n        var flags = ['iphone', 'ipad', 'ipod'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                type = flags[i];\n                break;\n            }\n        }\n\n        return type;\n    }\n\n    function pixelDensity() {\n        var pixelDensity = (window.devicePixelRatio || 1);\n\n        if (pixelDensity >= 3) {\n            return 'ultra-high';\n        } else if (pixelDensity >= 2) {\n            return 'high';\n        } else if (pixelDensity >= 1.5) {\n            return 'medium';\n        } else {\n            return 'low';\n        }\n    }\n\n    var browser = Adapt.device.browser.toLowerCase();\n    // Convert 'msie' and 'internet explorer' to 'ie'.\n    var browserString = browser.replace(/msie|internet explorer/, 'ie');\n    browserString = browserString + ' version-' + Adapt.device.version + ' OS-' + Adapt.device.OS + ' ' + getAppleDeviceType();\n    browserString += browserString.replace('.', '-').toLowerCase();\n\n    $html.addClass(browserString + ' pixel-density-' + pixelDensity());\n});\n\n",
    "define('core/js/graphics',[\n  'core/js/adapt',\n  'handlebars',\n  'inview'\n],function(Adapt, Handlebars) {\n\n  var Graphics = Backbone.Controller.extend({\n\n    initialize: function() {\n      _.bindAll(this, \"_onScroll\", \"_delayedThreholdIncrease\", \"_checkImage\");\n      this._onScroll = _.throttle(this._onScroll, 100);\n      this._delayedThreholdIncrease = _.debounce(this._delayedThreholdIncrease, 500);\n      this._offscreenPixelThreshold = 0;\n      this._registerHelpers();\n      this.listenTo(Adapt, \"app:dataReady\", this._onDataReady);\n    },\n\n    _registerHelpers: function() {\n\n      var helpers = {\n\n        \"graphic\": function(options) {\n\n          var noArgs = (arguments.length === 1);\n          // if no options were passed and no local _graphic object is defined, return\n          if (noArgs && typeof this._graphic !== \"object\") return \"\";\n          // if no options were passed and the _graphic object is defined, use it\n          if (noArgs && this._graphic) options = this._graphic;\n          // if options were passed but were not an object, return\n          if (!options || typeof options !== \"object\") return \"\";\n\n          var imageWidth = Adapt.graphics.getImageSize();\n\n          // 'small' or 'large' or 'src' or '_src'\n          var rtn = options[imageWidth] || options.src || options._src || \"\";\n\n          if (!Adapt.graphics.isActive()) return new Handlebars.SafeString('src=\"'+rtn+'\"');\n\n          // produce a dummy image of the right size or ratio to put in place\n          var width = options._width || 16;\n          var height = options._height || 9;\n          var canvas = $('<canvas width=\"'+width+'\" height=\"'+height+'\" >')[0];\n          var context = canvas.getContext(\"2d\");\n          context.fillStyle = options._color || \"#ffffff\";\n          context.fillRect(0, 0, width, height);\n          var data = canvas.toDataURL(\"image/jpeg\", 0.1);\n          return new Handlebars.SafeString('src=\"'+data+'\" data-adapt-graphics=\"'+rtn+'\"');\n\n        }\n\n      };\n\n      for (var name in helpers) {\n        Handlebars.registerHelper(name, helpers[name]);\n      }\n\n    },\n\n    getImageSize: function() {\n      var screenWidth = Adapt.device.screenSize;\n      return screenWidth === 'medium' ? 'small' : screenWidth;\n    },\n\n    _onDataReady: function() {\n      if (!this.isActive()) return;\n      this._setUpEventListeners();\n    },\n\n    isActive: function() {\n      if (!this.isEnabled()) return false;\n      var graphics = Adapt.config.get(\"_graphics\");\n      var className = graphics._className;\n      var $html = $(\"html\");\n      if (!className || $html.is(className) || $html.hasClass(className)) return true;\n      return false;\n    },\n\n    isEnabled: function() {\n      var graphics = Adapt.config.get(\"_graphics\");\n      if (!graphics || !graphics._isEnabled) return false;\n      return true;\n    },\n\n    _setUpEventListeners() {\n      this.listenTo(Adapt, \"pageView:postRender menuView:postRender\", this._onPostRender);\n      this.listenTo(Adapt, \"remove\", this._onRemove);\n    },\n\n    _onPostRender: function(view) {\n      // wait for page / menu to be ready\n      if (view.model.get(\"_isReady\")) return this._start();\n      this.listenToOnce(view.model, \"change:_isReady\", this._start);\n    },\n\n    _start: function() {\n      // start listening for scrolls\n      this._offscreenPixelThreshold = 0;\n      $(window).on(\"scroll\", this._onScroll);\n      this._onScroll();\n    },\n\n    _onScroll: function() {\n      var $progImages = $(\"img[data-adapt-graphics], video[data-adapt-graphics-poster]\");\n      if (!$progImages.length) return this._stop();\n      $progImages.each(this._checkImage);\n      if (!this._offscreenPixelThreshold) this._delayedThreholdIncrease();\n    },\n\n    _stop: function() {\n      // stop listening for scrolls\n      $(window).off(\"scroll\", this._onScroll);\n    },\n\n    _checkImage: function(index, img) {\n      var $img = $(img);\n\n      var measurements = this._getElementMeasurements($img);\n\n      var percentInview = measurements.percentInview;\n      var bottom = measurements.bottom;\n      var top = measurements.top;\n\n      var isFarOffscreenBottom = (bottom < this._offscreenPixelThreshold);\n      var isFarOffscreenTop = (top < this._offscreenPixelThreshold);\n      var isFarOffscreen = (isFarOffscreenBottom || isFarOffscreenTop);\n\n      var isNotInview = (!percentInview);\n\n      if (isNotInview && isFarOffscreen) return;\n\n      // replace dummy image with image for video tag\n      if ($img.is(\"video\")) {\n        img.poster = $img.attr(\"data-adapt-graphics-poster\");\n        $img.removeAttr(\"data-adapt-graphics-poster\");\n        return;\n      }\n\n      // replace dummy image with image for img tag\n      img.src = $img.attr(\"data-adapt-graphics\");\n      $img.removeAttr(\"data-adapt-graphics\");\n\n    },\n\n    _getElementMeasurements: function($img) {\n      var hasSpace = this._isElementOccupyingSpace($img[0]);\n      if (hasSpace) return $img.onscreen();\n\n      // the image is currently hidden\n      var $parent = $(this._findSpaciousParent($img[0]));\n      if (!$parent.length) return;\n      // use spacious parent measurements\n      return $parent.onscreen();\n    },\n\n    _isElementOccupyingSpace: function(el) {\n      return Boolean(el.clientHeight || el.clientWidth)\n    },\n\n    _findSpaciousParent: function(el) {\n      while (el = el.parentNode) {\n        if (this._isElementOccupyingSpace(el)) return el;\n      }\n    },\n\n    _delayedThreholdIncrease: function() {\n      // increase the offscreen threshold for loading images\n      this._offscreenPixelThreshold = -window.innerHeight*2;\n      this._onScroll();\n    },\n\n    _onRemove: function() {\n      this._stop();\n    }\n\n  });\n\n  return Adapt.graphics = new Graphics();\n\n});\n\n",
    "define('core/js/views/drawerView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var DrawerView = Backbone.View.extend({\n\n        className: 'drawer display-none',\n        disableAnimation: false,\n        escapeKeyAttached: false,\n\n        initialize: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this._isVisible = false;\n            this.drawerDir = 'right';\n            if(Adapt.config.get('_defaultDirection')=='rtl'){//on RTL drawer on the left\n                this.drawerDir = 'left';\n            }\n            this.setupEventListeners();\n            this.render();\n            this.drawerDuration = Adapt.config.get('_drawer')._duration;\n            this.drawerDuration = (this.drawerDuration) ? this.drawerDuration : 400;\n            // Setup cached selectors\n            this.$wrapper = $('#wrapper');\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                'navigation:toggleDrawer': this.toggleDrawer,\n                'drawer:triggerCustomView': this.openCustomView,\n                'drawer:closeDrawer': this.onCloseDrawer,\n                'remove': this.onCloseDrawer,\n                'drawer:remove': this.remove,\n                'accessibility:toggle': this.onAccessibilityToggle\n            });\n\n            this._onKeyUp = _.bind(this.onKeyUp, this);\n            this.setupEscapeKey();\n        },\n\n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && ! this.escapeKeyAttached) {\n                $(window).on(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = true;\n            } else {\n                $(window).off(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = false;\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            event.preventDefault();\n\n            this.onCloseDrawer();\n        },\n\n        events: {\n            'click .drawer-back': 'onBackButtonClicked',\n            'click .drawer-close':'onCloseDrawer'\n        },\n\n        render: function() {\n            var template = Handlebars.templates['drawer']\n            $(this.el).html(template({_globals: Adapt.course.get(\"_globals\")})).prependTo('body');\n            var shadowTemplate = Handlebars.templates['shadow'];\n            $(shadowTemplate()).prependTo('body');\n            // Set defer on post render\n            _.defer(_.bind(function() {\n                this.postRender();\n            }, this));\n            return this;\n        },\n\n        // Set tabindex for select elements\n        postRender: function() {\n            this.$('a, button, input, select, textarea').attr('tabindex', -1);\n\n            this.checkIfDrawerIsAvailable();\n        },\n\n        openCustomView: function(view, hasBackButton) {\n            // Set whether back button should display\n            this._hasBackButton = hasBackButton;\n            this._isCustomViewVisible = true;\n            Adapt.trigger('drawer:empty');\n            this.showDrawer();\n            this.$('.drawer-holder').html(view);\n        },\n\n        checkIfDrawerIsAvailable: function() {\n            if (this.collection.length == 0) {\n                $('.navigation-drawer-toggle-button').addClass('display-none');\n                Adapt.trigger('drawer:noItems');\n            } else {\n                $('.navigation-drawer-toggle-button').removeClass('display-none');\n            }\n        },\n\n        onBackButtonClicked: function(event) {\n            event.preventDefault();\n            this.showDrawer(true);\n        },\n\n        onCloseDrawer: function(event) {\n            if (event) {\n                event.preventDefault();\n            }\n            this.hideDrawer();\n        },\n\n        toggleDrawer: function() {\n            if (this._isVisible && this._isCustomViewVisible === false) {\n                this.hideDrawer();\n            } else {\n                this.showDrawer(true);\n            }\n        },\n\n        showDrawer: function(emptyDrawer) {\n            this.$el.removeClass('display-none');\n            //only trigger popup:opened if drawer is visible, pass popup manager drawer element\n            if (!this._isVisible) {\n                Adapt.trigger('popup:opened', this.$el);\n                $('body').scrollDisable();\n                this._isVisible = true;\n            }\n\n            var drawerWidth = this.$el.width();\n            // Sets tab index to 0 for all tabbable elements in Drawer\n            this.$('a, button, input, select, textarea').attr('tabindex', 0);\n\n            if (emptyDrawer) {\n                this.$('.drawer-back').addClass('display-none');\n                this._isCustomViewVisible = false;\n                this.emptyDrawer();\n                if(this.collection.models.length === 1) {\n                    Adapt.trigger(this.collection.models[0].get('eventCallback'));\n                } else {\n                    this.renderItems();\n                    Adapt.trigger('drawer:openedItemView');\n                }\n            } else {\n                if (this._hasBackButton && this.collection.models.length > 1) {\n                    this.$('.drawer-back').removeClass('display-none');\n                } else {\n                    this.$('.drawer-back').addClass('display-none');\n                }\n                Adapt.trigger('drawer:openedCustomView');\n            }\n\n            //delay drawer animation until after background fadeout animation is complete\n            if (this.disableAnimation) {\n                $('#shadow').removeClass(\"display-none\");\n\n                var direction={};\n                direction[this.drawerDir]=0;\n                this.$el.css(direction);\n                complete.call(this);\n                \n            } else {\n\n                $('#shadow').velocity({opacity:1},{duration:this.drawerDuration, begin: _.bind(function() {\n                    $(\"#shadow\").removeClass(\"display-none\");\n                    complete.call(this);\n                }, this)});\n\n                var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\n                var direction={};\n                direction[this.drawerDir]=0;\n                this.$el.velocity(direction, this.drawerDuration, easing);\n\n            }\n\n            function complete() {\n                this.addShadowEvent();\n                Adapt.trigger('drawer:opened');\n                \n                //focus on first tabbable element in drawer\n                this.$el.a11y_focus();\n\t    }\n\n        },\n\n        emptyDrawer: function() {\n            this.$('.drawer-holder').empty();\n        },\n\n        renderItems: function() {\n            Adapt.trigger('drawer:empty');\n            this.emptyDrawer();\n            var models = this.collection.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var item = models[i];\n                new DrawerItemView({model: item});\n            }\n        },\n\n        hideDrawer: function() {\n            //only trigger popup:closed if drawer is visible\n            if (this._isVisible) {\n                Adapt.trigger('popup:closed');\n                this._isVisible = false;\n                $('body').scrollEnable();\n            } else {\n                return;\n            }\n\n            if (this.disableAnimation) {\n\n                var direction={};\n                direction[this.drawerDir]=-this.$el.width();\n                this.$el.css(direction).addClass('display-none');\n\n                $('#shadow').addClass(\"display-none\");\n\n                Adapt.trigger('drawer:closed');\n\n            } else {\n\n                var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\n\n                var direction={};\n                direction[this.drawerDir]=-this.$el.width();\n                this.$el.velocity(direction, this.drawerDuration, easing, _.bind(function() {\n                    this.$el.addClass('display-none');\n                    Adapt.trigger('drawer:closed');\n                }, this));\n\n                $('#shadow').velocity({opacity:0}, {duration:this.drawerDuration, complete:function() {\n                    $('#shadow').addClass(\"display-none\");\n                }});\n\n            }\n\n            this._isCustomViewVisible = false;\n            this.removeShadowEvent();\n\n\n        },\n\n        addShadowEvent: function() {\n            $('#shadow').one('click touchstart', _.bind(function() {\n                this.onCloseDrawer();\n            }, this));\n        },\n\n        removeShadowEvent: function() {\n            $('#shadow').off('click touchstart');\n        },\n\n        remove: function() {\n            Backbone.View.prototype.remove.apply(this, arguments);\n            $(window).off(\"keyup\", this._onKeyUp);\n\n            Adapt.trigger('drawer:empty');\n            this.collection.reset();\n            $('#shadow').remove();\n        }\n\n    });\n\n    var DrawerItemView = Backbone.View.extend({\n\n        className: 'drawer-item',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'drawer:empty', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .drawer-item-open': 'onDrawerItemClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['drawerItem']\n            $(this.el).html(template(data)).appendTo('.drawer-holder');\n            return this;\n        },\n\n        onDrawerItemClicked: function(event) {\n            event.preventDefault();\n            var eventCallback = this.model.get('eventCallback');\n            Adapt.trigger(eventCallback);\n        }\n    });\n\n    return DrawerView;\n});\n\n",
    "define('core/js/drawer',[\n    'core/js/adapt',\n    'core/js/views/drawerView'\n], function(Adapt, DrawerView) {\n\n    var DrawerCollection = new Backbone.Collection(null, { comparator: 'drawerOrder' });\n    var Drawer = {};\n\n    Drawer.addItem = function(drawerObject, eventCallback) {\n        drawerObject.eventCallback = eventCallback;\n        DrawerCollection.add(drawerObject);\n    };\n\n    Drawer.triggerCustomView = function(view, hasBackButton) {\n        if (hasBackButton !== false) {\n            hasBackButton = true;\n        }\n        Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);\n    };\n\n    Adapt.on({\n        'adapt:start': function() {\n             new DrawerView({ collection: DrawerCollection });\n        },\n        'app:languageChanged': function() {\n            Adapt.trigger('drawer:remove');\n        }\n    });\n\n    Adapt.drawer = Drawer;\n\n});\n\n",
    "define('core/js/views/notifyView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var NotifyView = Backbone.View.extend({\n\n        className: function() {\n            var classes = 'notify ';\n            classes += (this.model.get('_classes') || '');\n            return classes;\n        },\n\n        disableAnimation: false,\n\n        escapeKeyAttached: false,\n\n        initialize: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n\n            this.setupEventListeners();\n\n            //include accessibility globals in notify model\n            this.model.set('_globals', Adapt.course.get('_globals'));\n            this.render();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                'remove page:scrollTo': this.closeNotify,\n                'notify:resize': this.resetNotifySize,\n                'notify:cancel': this.cancelNotify,\n                'notify:close': this.closeNotify,\n                'device:resize': this.resetNotifySize,\n                'accessibility:toggle': this.onAccessibilityToggle\n            });\n\n            this._onKeyUp = _.bind(this.onKeyUp, this);\n            this.setupEscapeKey();\n        },\n\n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && ! this.escapeKeyAttached) {\n                $(window).on('keyup', this._onKeyUp);\n                this.escapeKeyAttached = true;\n            } else {\n                $(window).off('keyup', this._onKeyUp);\n                this.escapeKeyAttached = false;\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            event.preventDefault();\n\n            this.cancelNotify();\n        },\n\n        events: {\n            'click .notify-popup-alert-button':'onAlertButtonClicked',\n            'click .notify-popup-prompt-button': 'onPromptButtonClicked',\n            'click .notify-popup-done': 'onCloseButtonClicked',\n            'click .notify-shadow': 'onShadowClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['notify'];\n\n            //hide notify container\n            this.$el.css('visibility', 'hidden');\n            //attach popup + shadow\n            this.$el.html(template(data)).prependTo('body');\n            //hide popup\n            this.$('.notify-popup').css('visibility', 'hidden');\n            //show notify container\n            this.$el.css('visibility', 'visible');\n\n            this.showNotify();\n            return this;\n        },\n\n        onAlertButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger(this.model.get('_callbackEvent'), this);\n        },\n\n        onPromptButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger($(event.currentTarget).attr('data-event'));\n        },\n\n        onCloseButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.cancelNotify();\n        },\n\n        onShadowClicked: function(event) {\n            event.preventDefault();\n            if (this.model.get(\"_closeOnShadowClick\") === false) return;\n            this.cancelNotify();\n        },\n\n        cancelNotify: function() {\n            if (this.model.get(\"_isCancellable\") === false) return;\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger('notify:cancelled');\n        },\n\n        resetNotifySize: function() {\n            $('.notify-popup').removeAttr('style');\n\n            this.resizeNotify();\n        },\n\n        resizeNotify: function() {\n            var windowHeight = $(window).height();\n            var notifyHeight = this.$('.notify-popup').outerHeight();\n\n            if (notifyHeight > windowHeight) {\n                this.$('.notify-popup').css({\n                    'height':'100%',\n                    'top':0,\n                    'overflow-y': 'scroll',\n                    '-webkit-overflow-scrolling': 'touch'\n                });\n            } else {\n                this.$('.notify-popup').css({\n                    'margin-top': -(notifyHeight/2)\n                });\n            }\n        },\n\n        showNotify: function() {\n\n            this.addSubView();\n\n            Adapt.trigger('notify:opened', this);\n\n            this.$el.imageready( _.bind(loaded, this));\n\n            function loaded() {\n                if (this.disableAnimation) {\n                    this.$('.notify-shadow').css('display', 'block');\n                } else {\n\n                    this.$('.notify-shadow').velocity({ opacity: 0 }, {duration:0}).velocity({ opacity: 1 }, {duration:400, begin: _.bind(function() {\n                        this.$('.notify-shadow').css('display', 'block');\n                    }, this)});\n\n                }\n\n                this.resizeNotify();\n\n                if (this.disableAnimation) {\n\n                    this.$('.notify-popup').css('visibility', 'visible');\n                    complete.call(this);\n\n                } else {\n\n                    this.$('.notify-popup').velocity({ opacity: 0 }, {duration:0}).velocity({ opacity: 1 }, { duration:400, begin: _.bind(function() {\n                        this.$('.notify-popup').css('visibility', 'visible');\n                        complete.call(this);\n                    }, this) });\n\n                }\n\n                function complete() {\n                    /*ALLOWS POPUP MANAGER TO CONTROL FOCUS*/\n                    Adapt.trigger('popup:opened', this.$('.notify-popup'));\n                    $('body').scrollDisable();\n                    $('html').addClass('notify');\n\n                    //set focus to first accessible element\n                    this.$('.notify-popup').a11y_focus();\n                }\n            }\n\n        },\n\n        addSubView: function() {\n\n            this.subView = this.model.get(\"_view\");\n            if (!this.subView) return;\n\n            this.$(\".notify-popup-content-inner\").append(this.subView.$el);\n\n        },\n\n        closeNotify: function (event) {\n\n            if (this.disableAnimation) {\n\n                this.$('.notify-popup').css('visibility', 'hidden');\n                this.$el.css('visibility', 'hidden');\n\n                this.remove();\n\n            } else {\n\n                this.$('.notify-popup').velocity({ opacity: 0 }, {duration:400, complete: _.bind(function() {\n                    this.$('.notify-popup').css('visibility', 'hidden');\n                }, this)});\n\n                this.$('.notify-shadow').velocity({ opacity: 0 }, {duration:400, complete:_.bind(function() {\n                    this.$el.css('visibility', 'hidden');\n                    this.remove();\n                }, this)});\n            }\n\n            $('body').scrollEnable();\n            $('html').removeClass('notify');\n\n            Adapt.trigger('popup:closed');\n            Adapt.trigger('notify:closed');\n        },\n\n        remove: function() {\n            this.removeSubView();\n            Backbone.View.prototype.remove.apply(this, arguments);\n        },\n\n        removeSubView: function() {\n\n            if (!this.subView) return;\n            this.subView.remove();\n            this.subView = null;\n\n        }\n\n    });\n\n    return NotifyView;\n\n});\n\n",
    "define('core/js/views/notifyPushView',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var NotifyPushView = Backbone.View.extend({\n\n        className: function () {\n            return 'notify-push ' + this.model.get('_classes');\n        },\n\n        initialize: function () {\n            this.listenTo(Adapt, 'notify:pushShown notify:pushRemoved', this.updateIndexPosition);\n            this.listenTo(this.model.collection, 'remove', this.updateIndexPosition);\n            this.listenTo(this.model.collection, 'change:_index', this.updatePushPosition);\n            this.listenTo(Adapt, 'remove', this.remove);\n\n            // Include accessibility globals in notify model.\n            this.model.set('_globals', Adapt.course.get('_globals'));\n\n            this.preRender();\n            this.render();\n        },\n\n        events: {\n            'click .notify-push-close': 'closePush',\n            'click .notify-push-inner': 'triggerEvent'\n        },\n\n        preRender: function () {\n            this.hasBeenRemoved = false;\n        },\n\n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['notifyPush'];\n            this.$el.html(template(data)).appendTo('#wrapper');\n\n            _.defer(_.bind(function () {\n                this.postRender();\n            }, this));\n\n            return this;\n        },\n\n        postRender: function () {\n            this.$el.addClass('show');\n\n            _.delay(_.bind(function () {\n                this.closePush();\n            }, this), this.model.get('_timeout'));\n\n            Adapt.trigger('notify:pushShown');\n        },\n\n        closePush: function (event) {\n            if (event) {\n                event.preventDefault();\n            }\n\n            // Check whether this view has been removed as the delay can cause it to be fired twice\n            if (this.hasBeenRemoved === false) {\n\n                this.hasBeenRemoved = true;\n\n                this.$el.removeClass('show');\n\n                _.delay(_.bind(function () {\n                    this.model.collection.remove(this.model);\n                    Adapt.trigger('notify:pushRemoved', this);\n                    this.remove();\n                }, this), 600);\n            }\n        },\n\n        triggerEvent: function (event) {\n            Adapt.trigger(this.model.get('_callbackEvent'));\n            this.closePush();\n        },\n\n        updateIndexPosition: function () {\n            if (!this.hasBeenRemoved) {\n                var models = this.model.collection.models;\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var index = i;\n                    var model = models[i];\n                    if (model.get('_isActive') === true) {\n                        model.set('_index', index);\n                        this.updatePushPosition();\n                    }\n                }\n            }\n        },\n\n        updatePushPosition: function () {\n            if (this.hasBeenRemoved) {\n                return;\n            }\n\n            if (this.model.get('_index') != undefined) {\n                var elementHeight = this.$el.height();\n                var offset = 20;\n                var navigationHeight = $('.navigation').height();\n                var currentIndex = this.model.get('_index');\n                var flippedIndex = (currentIndex == 0) ? 1 : 0;\n\n                if (this.model.collection.where({ _isActive: true }).length === 1) {\n                    flippedIndex = 0;\n                }\n\n                var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;\n                this.$el.css('top', positionLowerPush);\n            }\n        }\n    });\n\n    return NotifyPushView;\n\n});\n\n",
    "define('core/js/models/notifyModel',[],function() {\n\n    var NotifyModel = Backbone.Model.extend({\n        defaults: {\n        \t_isActive:false,\n        \t_showIcon:false,\n        \t_timeout:3000\n        }\n    });\n\n    return NotifyModel;\n\n});\n\n",
    "define('core/js/notify',[\n\t'core/js/adapt',\n\t'core/js/views/notifyView',\n\t'core/js/views/notifyPushView',\n\t'core/js/models/notifyModel'\n], function(Adapt, NotifyView, NotifyPushView, NotifyModel) {\n\n\t// Build a collection to store push notifications\n\tvar NotifyPushCollection = Backbone.Collection.extend({\n\n\t\tmodel: NotifyModel,\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo(this, 'add', this.onPushAdded);\n\t\t\tthis.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);\n\t\t},\n\n\t\tonPushAdded: function(model) {\n\t\t\tthis.checkPushCanShow(model);\n\t\t},\n\n\t\tcheckPushCanShow: function(model) {\n\t\t\tif (this.canShowPush()) {\n\t\t\t\tmodel.set('_isActive', true);\n\t\t\t\tthis.showPush(model);\n\t\t\t}\n\t\t},\n\n\t\tcanShowPush: function() {\n\t\t\tvar availablePushNotifications = this.where({_isActive:true});\n\t\t\tif (availablePushNotifications.length >= 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tshowPush: function(model) {\n\t\t\tnew NotifyPushView({\n\t\t\t\tmodel: model\n\t\t\t});\n\t\t},\n\n\t\tonRemovePush: function(view) {\n\t\t\tvar inactivePushNotifications = this.where({_isActive:false});\n\t\t\tif (inactivePushNotifications.length > 0) {\n\t\t\t\tthis.checkPushCanShow(inactivePushNotifications[0]);\n\t\t\t}\n\t\t}\n\n\t});\n\n\tvar NotifyPushes = new NotifyPushCollection();\n\n\tAdapt.on('notify:alert', function(notifyObject) {\n\t\taddNotifyView('alert', notifyObject);\n\t});\n\n\tAdapt.on('notify:prompt', function(notifyObject) {\n\t\taddNotifyView('prompt', notifyObject);\n\t});\n\n\tAdapt.on('notify:popup', function(notifyObject) {\n\t\taddNotifyView('popup', notifyObject);\n\t});\n\n\tAdapt.on('notify:push', function(notifyObject) {\n\t\taddNotifyView('push', notifyObject);\n\t});\n\n\tfunction addNotifyView(type, notifyObject) {\n\t\t// set default values \n\t\tnotifyObject._isCancellable = (notifyObject._isCancellable === undefined) \n\t\t\t? true : notifyObject._isCancellable;\n\t\t\n\t\tnotifyObject._showCloseButton = (notifyObject._showCloseButton === undefined) \n\t\t\t? true : notifyObject._showCloseButton;\n\n\t\tnotifyObject._closeOnShadowClick = (notifyObject._closeOnShadowClick === undefined) \n\t\t\t? true : notifyObject._closeOnShadowClick;\n\n\t\tnotifyObject._type = type;\n\n\t\tif (type === 'push') {\n\n\t\t\tNotifyPushes.push(notifyObject);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar notify = new NotifyView({\n\t\t\tmodel: new NotifyModel(notifyObject)\n\t\t});\n\n\t}\n\n});\n\n",
    "define('core/js/popupManager',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    Adapt.on('popup:opened', function($element) {\n\n\t\t//capture currently active element or element specified\n        var $activeElement = $element || $(document.activeElement);\n\n        //save tab indexes\n        $activeElement.a11y_popup();\n    });\n\n    Adapt.on('popup:closed', function() {\n\n        //restore tab indexes\n        $.a11y_popdown();\n\n    });\n\n});\n\n",
    "define('core/js/models/routerModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n \tvar RouterModel = Backbone.Model.extend({\n\n \t\tdefaults: {\n \t\t\t_canNavigate: true\n \t\t},\n\n \t\tlockedAttributes: {\n \t\t\t_canNavigate: false\n \t\t}\n \t\t\n \t});\n\n \treturn RouterModel;\n\n });\n\n",
    "define('core/js/views/adaptView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AdaptView = Backbone.View.extend({\n\n        attributes: function() {\n            return {\n                \"data-adapt-id\": this.model.get('_id')\n            };\n        },\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(this.model, 'change:_isVisible', this.toggleVisibility);\n            this.listenTo(this.model, 'change:_isHidden', this.toggleHidden);\n            this.listenTo(this.model, 'change:_isComplete', this.onIsCompleteChange);\n            this.model.set('_globals', Adapt.course.get('_globals'));\n            this.model.set('_isReady', false);\n            this._isRemoved = false;\n            this.preRender();\n            this.render();\n            this.setupOnScreenHandler();\n        },\n\n        preRender: function() {},\n\n        postRender: function() {\n            this.addChildren();\n        },\n\n        render: function() {\n            Adapt.trigger(this.constructor.type + 'View:preRender', this);\n\n            var data = this.model.toJSON();\n            data.view = this;\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n\n            _.defer(_.bind(function() {\n                // don't call postRender after remove\n                if(this._isRemoved) return;\n\n                this.postRender();\n                Adapt.trigger(this.constructor.type + 'View:postRender', this);\n            }, this));\n\n            return this;\n        },\n\n        setupOnScreenHandler: function() {\n            var onscreen = this.model.get('_onScreen');\n\n            if (!onscreen || !onscreen._isEnabled) return;\n\n            this.$el.on('onscreen.adaptView', _.bind(function (e, m) {\n\n                if (!m.onscreen) return;\n\n                var minVerticalInview = onscreen._percentInviewVertical || 33;\n\n                if (m.percentInviewVertical < minVerticalInview) return;\n\n                this.$el.addClass( onscreen._classes || 'onscreen' ).off('onscreen.adaptView');\n\n            }, this));\n        },\n\n        addChildren: function() {\n            var nthChild = 0;\n            var children = this.model.getChildren();\n            var models = children.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var model = models[i];\n                if (model.get('_isAvailable')) {\n                    nthChild ++;\n\n                    var ChildView;\n                    var ViewModelObject = this.constructor.childView || Adapt.componentStore[model.get(\"_component\")];\n\n                    //use view+model object\n                    if (ViewModelObject.view) ChildView = ViewModelObject.view;\n                    //use view only object\n                    else ChildView = ViewModelObject;\n\n                    if (ChildView) {\n                        var $parentContainer = this.$(this.constructor.childContainer);\n                        model.set(\"_nthChild\", nthChild);\n                        if (Adapt.config.get(\"_defaultDirection\") == 'rtl' && model.get(\"_type\") == 'component') {\n                            $parentContainer.prepend(new ChildView({model:model}).$el);\n                        } else {\n                            $parentContainer.append(new ChildView({model:model}).$el);\n                        }\n                    } else {\n                        throw 'The component \\'' + models[i].attributes._id + '\\'' +\n                              ' (\\'' + models[i].attributes._component + '\\')' +\n                              ' has not been installed, and so is not available in your project.';\n                    }\n                }\n            }\n        },\n\n        setReadyStatus: function() {\n            this.model.set('_isReady', true);\n        },\n\n        setCompletionStatus: function() {\n            if (this.model.get('_isVisible')) {\n                this.model.set('_isComplete', true);\n                this.model.set('_isInteractionComplete', true);\n            }\n        },\n\n        resetCompletionStatus: function(type) {\n            if (!this.model.get(\"_canReset\")) return;\n\n            var descendantComponents = this.model.findDescendantModels('components');\n            if (descendantComponents.length === 0) {\n                this.model.reset(type);\n            } else {\n                _.each(descendantComponents, function(model) {\n                    model.reset(type);\n                });\n            }\n        },\n\n        preRemove: function() {},\n\n        remove: function() {\n\n            this.preRemove();\n            this._isRemoved = true;\n\n            Adapt.wait.for(function(end) {\n\n                this.$el.off('onscreen.adaptView');\n                this.model.setOnChildren('_isReady', false);\n                this.model.set('_isReady', false);\n                Backbone.View.prototype.remove.call(this);\n\n                end();\n            }.bind(this));\n\n            return this;\n        },\n\n        setVisibility: function() {\n            var visible = \"visibility-hidden\";\n            if (this.model.get('_isVisible')) {\n                visible = \"\";\n            }\n            return visible;\n        },\n\n        toggleVisibility: function() {\n            if (this.model.get('_isVisible')) {\n                return this.$el.removeClass('visibility-hidden');\n            }\n            this.$el.addClass('visibility-hidden');\n        },\n\n        setHidden: function() {\n            var hidden = \"\";\n            if (this.model.get('_isHidden')) {\n                hidden = \"display-none\";\n            }\n            return hidden;\n        },\n\n        toggleHidden: function() {\n            if (!this.model.get('_isHidden')) {\n                return this.$el.removeClass('display-none');\n            }\n            this.$el.addClass('display-none');\n        },\n        \n        onIsCompleteChange:function(model, isComplete){\n            this.$el.toggleClass('completed', isComplete);\n        }\n    });\n\n    return AdaptView;\n\n});\n\n",
    "define('core/js/views/blockView',[\n    'core/js/views/adaptView'\n], function(AdaptView) {\n\n    var BlockView = AdaptView.extend({\n\n        className: function() {\n            return \"block \" + \n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" nth-child-\" +\n            this.model.get(\"_nthChild\") +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n        }\n\n    }, {\n        childContainer: '.component-container',\n        type: 'block',\n        template: 'block'\n    });\n\n    return BlockView;\n\n});\n\n",
    "define('core/js/views/articleView',[\n    'core/js/views/adaptView',\n    'core/js/views/blockView'\n], function(AdaptView, BlockView) {\n\n    var ArticleView = AdaptView.extend({\n        \n        className: function() {\n            return \"article \" +\n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') +\n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" nth-child-\" +\n            this.model.get(\"_nthChild\") +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n        }\n\n    }, {\n        childContainer: '.block-container',\n        childView: BlockView,\n        type: 'article',\n        template: 'article'\n    });\n\n    return ArticleView;\n\n});\n\n",
    "define('core/js/views/pageView',[\n    'core/js/adapt',\n    'core/js/views/adaptView',\n    'core/js/views/articleView'\n], function(Adapt, AdaptView, ArticleView) {\n\n    var PageView = AdaptView.extend({\n        \n        className: function() {\n            return \"page \" + \n            this.model.get('_id') + \n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n        },\n\n        preRender: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this.$el.css('opacity', 0);\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\n\n            var accessibility = Adapt.config.get('_accessibility');\n            if (!accessibility._isEnabled && !accessibility._isEnabledOnTouchDevices) {\n                return;\n            }\n            // create aria-label outside of #wrapper\n            this.$pageLabel = $('<div/>', {\n                'class': 'aria-label relative a11y-ignore-focus prevent-default',\n                tabindex: 0,\n                role: 'region',\n                text: Adapt.course.get('_globals')._accessibility._ariaLabels.pageEnd\n            }).appendTo('body');\n        },\n\n        isReady: function() {\n            if (this.model.get('_isReady')) {\n                _.defer(_.bind(function() {\n                    $('.loading').hide();\n                    $(window).scrollTop(0);\n                    Adapt.trigger('pageView:ready', this);\n                    var styleOptions = { opacity: 1 };\n                    if (this.disableAnimation) {\n                        this.$el.css(styleOptions);\n                        $.inview();\n                    } else {\n                        this.$el.velocity(styleOptions, {\n                            duration: 'fast',\n                            complete: function() {\n                                $.inview();\n                            }\n                        });\n                    }\n                    $(window).scroll();\n                }, this));\n            }\n        },\n\n        remove: function() {\n            if (this.$pageLabel) {\n                this.$pageLabel.remove();\n            }\n            AdaptView.prototype.remove.call(this);\n        }\n\n    }, {\n        childContainer: '.article-container',\n        childView: ArticleView,\n        type: 'page',\n        template: 'page'\n    });\n\n    return PageView;\n\n});\n\n",
    "define('core/js/router',[\n    'core/js/adapt',\n    'core/js/models/routerModel',\n    'core/js/views/pageView',\n    'core/js/startController'\n], function(Adapt, RouterModel, PageView) {\n\n    Adapt.router = new RouterModel(null, { reset: true });\n\n    var Router = Backbone.Router.extend({\n\n        // Flag to indicate if the router has tried to redirect to the current location.\n        _isCircularNavigationInProgress: false,\n\n        initialize: function() {\n            this.showLoading();\n\n            // Store #wrapper element and html to cache for later use.\n            this.$wrapper = $('#wrapper');\n            this.$html = $('html');\n\n            Adapt.once('app:dataReady', function() {\n                document.title = Adapt.course.get('title');\n            });\n\n            this.listenTo(Adapt, {\n                'navigation:backButton': this.navigateToPreviousRoute,\n                'navigation:homeButton': this.navigateToHomeRoute,\n                'navigation:skipNavigation': this.skipNavigation,\n                'navigation:parentButton': this.navigateToParent,\n                'router:navigateTo': this.navigateToArguments\n            });\n        },\n\n        routes: {\n            '': 'handleRoute',\n            'id/:id': 'handleRoute',\n            ':pluginName(/*location)(/*action)': 'handleRoute'\n        },\n\n        pruneArguments: function(args) {\n            var prunedArgs = _.toArray(args);\n\n            if (prunedArgs.length !== 0) {\n                // Remove any null arguments.\n                prunedArgs = _.without(args, null);\n            }\n\n            return prunedArgs;\n        },\n\n        handleRoute: function() {\n            var args = this.pruneArguments(arguments);\n            \n            if (Adapt.router.get('_canNavigate')) {\n                // Reset _isCircularNavigationInProgress protection as code is allowed to navigate away.\n                this._isCircularNavigationInProgress = false;\n            }\n\n            // Check if the current page is in the process of navigating to itself.\n            // It will redirect to itself if the URL was changed and _canNavigate is false.\n            if (this._isCircularNavigationInProgress === false) {\n                // Trigger an event pre 'router:location' to allow extensions to stop routing.\n                Adapt.trigger('router:navigate', args);\n            }\n\n            // Re-check as _canNavigate can be set to false on 'router:navigate' event.\n            if (Adapt.router.get('_canNavigate')) {\n                // Disable navigation whilst rendering.\n                Adapt.router.set('_canNavigate', false, { pluginName: 'adapt' });\n\n                switch (args.length) {\n                    case 1:\n                        // If only one parameter assume it's the ID.\n                        return this.handleId.apply(this, args);\n                    case 2:\n                        // If there are two parameters assume it's a plugin.\n                        return this.handlePluginRouter.apply(this, args);\n                    default:\n                        // Route to course home page.\n                        return this.handleCourse();\n                }\n            }\n\n            if (this._isCircularNavigationInProgress) {\n                // Navigation correction finished.\n                // Router has successfully re-navigated to the current _id as the URL was changed \n                // while _canNavigate: false\n                this._isCircularNavigationInProgress = false;\n                return;\n            }\n\n            // Cancel navigation to stay at the current location.\n            this._isCircularNavigationInProgress = true;\n            Adapt.trigger('router:navigationCancelled', args);\n\n            // Reset URL to the current one.\n            this.navigateToCurrentRoute(true);\n        },\n\n        handlePluginRouter: function(pluginName, location, action) {\n            var pluginLocation = pluginName;\n\n            if (location) {\n                pluginLocation = pluginLocation + '-' +location;\n\n                if (action) {\n                    pluginLocation = pluginLocation + '-' + action;\n                }\n            }\n\n            this.updateLocation(pluginLocation, null, null, function() {\n                Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);\n                Adapt.trigger('router:plugin', pluginName, location, action);\n\n                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n            });\n        },\n\n        handleCourse: function() {\n            if (Adapt.course.has('_start')) {\n                // Do not allow access to the menu when the start controller is enabled.\n                var startController = Adapt.course.get('_start');\n\n                if (startController._isEnabled == true && startController._isMenuDisabled == true) {\n                    return;\n                }\n            }\n\n            this.showLoading();\n\n            this.removeViews(_.bind(function() {\n                Adapt.course.set('_isReady', false);\n\n                this.setContentObjectToVisited(Adapt.course);\n                \n                this.updateLocation('course', null, null, _.bind(function() {\n                    Adapt.once('menuView:ready', function() {\n                        // Allow navigation.\n                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                    });\n\n                    Adapt.trigger('router:menu', Adapt.course);\n                }, this));\n            }, this));\n        },\n\n        handleId: function(id) {\n            var currentModel = Adapt.findById(id);\n            var type = '';\n\n            if (!currentModel) {\n                Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                return;\n            }\n\n            type = currentModel.get('_type');\n\n            switch (type) {\n                case 'page':\n                case 'menu':\n                    if (currentModel.get('_isLocked') && Adapt.config.get('_forceRouteLocking')) {\n                        Adapt.log.warn('Unable to navigate to locked id: ' + id);\n                        Adapt.router.set('_canNavigate', true, {pluginName: 'adapt'});\n                        if (Adapt.location._previousId === undefined) {\n                            return this.navigate('#/', { trigger: true, replace: true });\n                        } else {\n                            return Backbone.history.history.back();\n                        }\n                    } else {\n                        this.showLoading();\n                        this.removeViews(_.bind(function() {\n\n                            this.setContentObjectToVisited(currentModel);\n\n                            if (type == 'page') {\n                                var location = 'page-' + id;\n                                this.updateLocation(location, 'page', id, _.bind(function() {\n                                    Adapt.once('pageView:ready', function() {\n                                        // Allow navigation.\n                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                                    });\n                                    Adapt.trigger('router:page', currentModel);\n                                    this.$wrapper.append(new PageView({ model: currentModel }).$el);\n                                }, this));\n                            } else {\n                                var location = 'menu-' + id;\n                                this.updateLocation(location, 'menu', id, _.bind(function() {\n                                    Adapt.once('menuView:ready', function() {\n                                        // Allow navigation.\n                                        Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                                    });\n                                    Adapt.trigger('router:menu', currentModel);\n                                }, this));\n                            }\n                        }, this));\n                    }\n                    break;\n                default:\n                    // Allow navigation.\n                    Adapt.router.set('_canNavigate', true, { pluginName: 'adapt' });\n                    Adapt.navigateToElement('.' + id, { replace: true });\n            }\n        },\n\n        removeViews: function(onComplete) {\n            Adapt.remove();\n\n            Adapt.wait.queue(onComplete);\n        },\n\n        showLoading: function() {\n            $('.loading').show();\n        },\n\n        navigateToArguments: function(args) {\n            args = this.pruneArguments(args);\n\n            var options = { trigger: false, replace: false };\n\n            switch (args.length) {\n                case 0:\n                    this.navigate('#/', options);\n                    break;\n                case 1:\n                    if (Adapt.findById(args[0])) {\n                        this.navigate('#/id/' + args[0], options);\n                    } else {\n                        this.navigate('#/' + args[0], options);\n                    }\n                    break;\n                case 2:\n                case 3:\n                    this.navigate('#/' + args.join('/'), options);\n                    break;\n                default:\n                    Adapt.log.warn('DEPRECATED - use Backbone.history.navigate or ' +\n                        'window.location.href instead of Adapt.trigger(\"router:navigateTo\")');\n                    this.handleRoute.apply(this, args);\n            }\n        },\n\n        skipNavigation: function() {\n             $('.' + Adapt.location._contentType).a11y_focus();\n        },\n\n        navigateToPreviousRoute: function(force) {\n            // Sometimes a plugin might want to stop the default navigation.\n            // Check whether default navigation has changed.\n            if (Adapt.router.get('_canNavigate') || force) {\n                if (!Adapt.location._currentId) {\n                    return Backbone.history.history.back();\n                }\n                if (Adapt.location._previousContentType === 'page' && Adapt.location._contentType === 'menu') {\n                    return this.navigateToParent();\n                }\n                if (Adapt.location._previousContentType === 'page') {\n                    return Backbone.history.history.back();\n                }\n                if (Adapt.location._currentLocation === 'course') {\n                    return;\n                }\n                this.navigateToParent();\n            }\n        },\n\n        navigateToHomeRoute: function(force) {\n            if (Adapt.router.get('_canNavigate') || force ) {\n                this.navigate('#/', { trigger: true });\n            }\n        },\n\n        navigateToCurrentRoute: function(force) {\n            if (Adapt.router.get('_canNavigate') || force) {\n                if (!Adapt.location._currentId) {\n                    return;\n                }\n                var currentId = Adapt.location._currentId;\n                var route = (currentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + currentId;\n                this.navigate(route, { trigger: true, replace: true });\n            }\n        },\n\n        navigateToParent: function(force) {\n            if (Adapt.router.get('_canNavigate') || force) {\n                var parentId = Adapt.contentObjects.findWhere({ _id: Adapt.location._currentId }).get('_parentId');\n                var route = (parentId === Adapt.course.get('_id')) ? '#/' : '#/id/' + parentId;\n                this.navigate(route, { trigger: true });\n            }\n        },\n\n        setContentObjectToVisited: function(model) {\n            model.set('_isVisited', true);\n        },\n\n        updateLocation: function(currentLocation, type, id, onComplete) {\n            // Handles updating the location.\n            Adapt.location._previousId = Adapt.location._currentId;\n            Adapt.location._previousContentType = Adapt.location._contentType;\n\n            if (currentLocation === 'course') {\n                Adapt.location._currentId = Adapt.course.get('_id');\n                Adapt.location._contentType = 'menu';\n                Adapt.location._lastVisitedMenu = currentLocation;\n            } else if (!type) {\n                Adapt.location._currentId = null;\n                Adapt.location._contentType = null;\n            } else if (_.isString(id)) {\n                Adapt.location._currentId = id;\n                Adapt.location._contentType = type;\n\n                if (type === 'menu') {\n                    Adapt.location._lastVisitedType = 'menu';\n                    Adapt.location._lastVisitedMenu = id;\n                } else if (type === 'page') {\n                    Adapt.location._lastVisitedType = 'page';\n                    Adapt.location._lastVisitedPage = id;\n                }\n            }\n\n            Adapt.location._currentLocation = currentLocation;\n\n            var classes = (Adapt.location._currentId) ? 'location-'\n                    + Adapt.location._contentType\n                    + ' location-id-'\n                    + Adapt.location._currentId :\n                    'location-' + Adapt.location._currentLocation;\n\n            var previousClasses = Adapt.location._previousClasses;\n            if (previousClasses) {\n                this.$html.removeClass(previousClasses);\n            }\n            Adapt.location._previousClasses = classes;\n\n            this.$html\n                .addClass(classes)\n                .attr('data-location', Adapt.location._currentLocation);\n                \n            this.$wrapper\n                .removeClass()\n                .addClass(classes)\n                .attr('data-location', Adapt.location._currentLocation);\n\n            this.setDocumentTitle();\n\n            // Trigger event when location changes.\n            Adapt.trigger('router:location', Adapt.location);\n\n            Adapt.wait.queue(onComplete);\n        },\n\n        setDocumentTitle: function() {\n            if (!Adapt.location._currentId) return;\n\n            var currentModel = Adapt.findById(Adapt.location._currentId);\n            var pageTitle = '';\n\n            if (currentModel && currentModel.get('_type') !== 'course') {\n                var currentTitle = currentModel.get('title');\n                \n                if (currentTitle) {\n                    pageTitle = ' | ' + currentTitle;\n                }\n            }\n\n            var courseTitle = Adapt.course.get('title');\n            var documentTitle = $('<div>' + courseTitle + pageTitle + '</div>').text();\n\n            Adapt.once('pageView:ready menuView:ready', function() {\n                document.title = documentTitle;\n            });\n        }\n    });\n\n    return new Router({ model: new Backbone.Model() });\n\n});\n\n",
    "define('core/js/helpers',[\n    'handlebars',\n    'core/js/adapt'\n], function(Handlebars, Adapt){\n\n    var helpers = {\n\n        lowercase: function(text) {\n            return text.toLowerCase();\n        },\n\n        capitalise:  function(text) {\n            return text.charAt(0).toUpperCase() + text.slice(1);\n        },\n\n        inc: function(index) {\n            return index+1;\n        },\n\n        dec: function(index) {\n            return index-1;\n        },\n\n        odd: function (index) {\n            return (index +1) % 2 === 0  ? 'even' : 'odd';\n        },\n\n        equals: function(value, text, block) {\n            return helpers.compare.call(this, value, \"==\", text, block);\n        },\n\n        compare: function(value, operator, text, block) {\n            // Comparison operators\n            switch (operator) {\n            case \"===\":\n                if (value === text) return block.fn(this);\n                break;\n            case \"=\": case \"==\":\n                if (value == text) return block.fn(this);\n                break;\n            case \">=\":\n                if (value >= text) return block.fn(this);\n                break;\n            case \"<=\":\n                if (value <= text) return block.fn(this);\n                break;\n            case \">\":\n                if (value > text) return block.fn(this);\n                break;\n            case \"<\":\n                if (value < text) return block.fn(this);\n                break;\n            }\n            return block.inverse(this);\n        },\n\n        math: function(lvalue, operator, rvalue, options) {\n            // Mathematical operators\n            lvalue = parseFloat(lvalue);\n            rvalue = parseFloat(rvalue);\n            switch (operator) {\n            case \"+\": return lvalue + rvalue;\n            case \"-\": return lvalue - rvalue;\n            case \"*\": return lvalue * rvalue;\n            case \"/\": return lvalue / rvalue;\n            case \"%\": return lvalue % rvalue;\n            }\n        },\n\n        /**\n         * Allow JSON to be a template i.e. you can use handlebars {{expressions}} within your JSON\n         */\n        compile: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            var data = this;\n            if (context) {\n                // choose between a passed argument context or the default handlebars helper context\n                data = (!context.data || !context.data.root ? context : context.data.root);\n            }\n            return Handlebars.compile(template)(data);\n        },\n\n        /**\n         * Allow JSON to be a template and accessible text\n         */\n        compile_a11y_text: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            return Handlebars.helpers.a11y_text.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * Allow JSON to be a template and normalized text\n         */\n        compile_a11y_normalize: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            return Handlebars.helpers.a11y_normalize.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * Remove all html tags except styling tags\n         */\n        compile_a11y_remove_breaks: function(template, context) {\n            if (!template) return \"\";\n            return Handlebars.helpers.a11y_remove_breaks.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * makes the _globals object in course.json available to a template\n         */\n        import_globals: function(context) {\n            if (context.data.root._globals) return \"\";\n            context.data.root._globals = Adapt.course.get('_globals');\n            return \"\";\n        },\n\n        /**\n         * makes the Adapt module data available to a template\n         */\n        import_adapt: function(context) {\n\n            if (context.data.root.Adapt) return;\n            var adapt = context.data.root.Adapt = {};\n\n            var i, l, name;\n\n            var directImport = ['config','course'];\n            for (i = 0, l = directImport.length; i < l; i++) {\n                name = directImport[i];\n                // convert the model to a json object and add to the current context\n                adapt[name] = Adapt[name].toJSON();\n            }\n\n            var indexedImport = ['contentObjects','articles','blocks','components'];\n            for (i = 0, l = indexedImport.length; i < l; i++) {\n                name = indexedImport[i];\n                // convert the collection of models to an array of json objects\n                var importArray = Adapt[name].toJSON();\n                // convert the array of json models to an object indexed by id\n                var importIndex = {};\n                for (var i1 = 0, l1 = importArray.length; i1 < l1; i1++) {\n                    var item = importArray[i1];\n                    importIndex[item._id] = item;\n                }\n                // add the indexed object to the current context\n                adapt[name] = importIndex;\n            }\n\n            return \"\";\n\n        }\n\n    };\n\n    // Compatibility references\n    helpers['if_value_equals'] = helpers['equals'];\n    helpers['numbers'] = helpers['inc'];\n    helpers['lowerCase'] = helpers['lowercase'];\n\n    for (var name in helpers) {\n        if (helpers.hasOwnProperty(name)) {\n             Handlebars.registerHelper(name, helpers[name]);\n        }\n    }\n\n    return helpers;\n\n});\n\n",
    "define('core/js/views/componentView',[\n    'core/js/adapt',\n    'core/js/views/adaptView'\n], function(Adapt, AdaptView) {\n\n    var ComponentView = AdaptView.extend({\n\n        className: function() {\n            return \"component \" + \n            this.model.get('_component') + \n            \"-component \" + this.model.get('_id') + \n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" \" + this.setHidden() +\n            \" component-\" + this.model.get('_layout') + \n            \" nth-child-\" + this.model.get(\"_nthChild\") +\n            \" \" + (this.model.get('_isComplete') ? 'completed' : '');\n        },\n\n        initialize: function(){\n\t\t\t//standard initialization + renderState function\n            AdaptView.prototype.initialize.apply(this, arguments);\n            this.renderState();\n        },\n\n        renderState: function() {\n            if (!Handlebars.partials['state']) return;\n\n            // the preferred way to indicate that a state is not required\n            if (this.model.get('_disableAccessibilityState')) return;\n            // do not perform if component has .not-accessible class\n            if (this.$el.is(\".not-accessible\")) return;\n\t\t\t// do not perform if component has .no-state class\n            if (this.$el.is(\".no-state\")) return;\n\n            var $previousState = this.$(\".accessibility-state\");\n            var isStateRendered = $previousState.length;\n\n            var data = _.extend(this.model.toJSON(), {a11yConfig: Adapt.config.get('_accessibility')});\n            var element = Handlebars.partials['state'](data);\n\n            if (isStateRendered) {\n                $previousState.html(element);\n            } else {\n                this.$el.append(element);\n            }\n\n            this.listenToOnce(this.model, 'change:_isComplete', this.renderState);\n        },\n\n        postRender: function() {}\n\n    }, {\n        type:'component'\n    });\n\n    return ComponentView;\n\n});\n\n",
    "define('components/adapt-contrib-accordion/js/adapt-contrib-accordion',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Accordion = ComponentView.extend({\n\n        events: {\n            'click .accordion-item-title': 'toggleItem'\n        },\n\n        toggleSpeed: 200,\n\n        preRender: function() {\n            // Checks to see if the accordion should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n        },\n\n        // Used to check if the accordion should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n\n                _.each(this.model.get('_items'), function(item) {\n                    item._isVisited = false;\n                });\n            }\n        },\n\n        toggleItem: function(event) {\n            event.preventDefault();\n\n            var $toggleButton = $(event.currentTarget);\n            var $accordionItem = $toggleButton.parent('.accordion-item');\n            var isCurrentlyExpanded = $toggleButton.hasClass('selected');\n\n            if (this.model.get('_shouldCollapseItems') === false) {\n                // Close and reset the selected Accordion item only\n                this.closeItem($accordionItem);\n            } else {\n                // Close and reset all Accordion items\n                var allAccordionItems = this.$('.accordion-item');\n                var count = allAccordionItems.length;\n                for (var i = 0; i < count; i++) {\n                    this.closeItem($(allAccordionItems[i]));\n                }\n            }\n\n            if (!isCurrentlyExpanded) {\n                this.openItem($accordionItem);\n            }\n        },\n\n        closeItem: function($itemEl) {\n            if (!$itemEl) {\n                return false;\n            }\n\n            var $body = $('.accordion-item-body', $itemEl).first();\n            var $button = $('button', $itemEl).first();\n            var $icon = $('.accordion-item-title-icon', $itemEl).first();\n\n            $body.stop(true, true).slideUp(this.toggleSpeed);\n            $button.removeClass('selected');\n            $button.attr('aria-expanded', false);\n            $icon.addClass('icon-plus');\n            $icon.removeClass('icon-minus');\n        },\n\n        openItem: function($itemEl) {\n            if (!$itemEl) {\n                return false;\n            }\n\n            var $body = $('.accordion-item-body', $itemEl).first();\n            var $button = $('button', $itemEl).first();\n            var $icon = $('.accordion-item-title-icon', $itemEl).first();\n\n            $body = $body.stop(true, true).slideDown(this.toggleSpeed, function() {\n                var a11y = Adapt.config.get('_accessibility');\n                if (!a11y || !a11y._isActive) return;\n                _.delay(function() {\n                    // Allow animation to complete before focusing\n                    $body.a11y_focus();\n                }, 500);\n            });\n\n            $button.addClass('selected');\n            $button.attr('aria-expanded', true);\n\n            this.setVisited($itemEl.index());\n            $button.addClass('visited');\n\n            $icon.removeClass('icon-plus');\n            $icon.addClass('icon-minus');\n        },\n\n        setVisited: function(index) {\n            var item = this.model.get('_items')[index];\n            item._isVisited = true;\n            this.checkCompletionStatus();\n        },\n\n        getVisitedItems: function() {\n            return _.filter(this.model.get('_items'), function(item) {\n                return item._isVisited;\n            });\n        },\n\n        checkCompletionStatus: function() {\n            if (this.getVisitedItems().length == this.model.get('_items').length) {\n                this.setCompletionStatus();\n            }\n        }\n\n    });\n\n    Adapt.register('accordion', Accordion);\n\n    return Accordion;\n\n});\n\n",
    "define('components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults',[\n    'core/js/adapt',\n    'core/js/views/componentView'\n], function(Adapt, ComponentView) {\n\n    var AssessmentResults = ComponentView.extend({\n\n        events: {\n            'inview': 'onInview',\n            'click .results-retry-button button': 'onRetry'\n        },\n\n        preRender: function () {\n            if (this.model.setLocking) this.model.setLocking(\"_isVisible\", false);\n\n            this.saveOriginalTexts();\n\n            this.setupEventListeners();\n\n            this.setupModelResetEvent();\n\n            this.checkIfComplete();\n\n            this.checkIfVisible();\n        },\n\n        saveOriginalTexts: function() {\n            this.model.set({\n                \"originalTitle\": this.model.get(\"title\"),\n                \"originalBody\": this.model.get(\"body\"),\n                \"originalInstruction\": this.model.get(\"instruction\")\n            });\n        },\n\n        checkIfVisible: function() {\n            \n            if (!Adapt.assessment) {\n                return false;\n            }\n\n            var isVisibleBeforeCompletion = this.model.get(\"_isVisibleBeforeCompletion\") || false;\n            var isVisible = false;\n\n            var wasVisible = this.model.get(\"_isVisible\");\n\n            var assessmentModel = Adapt.assessment.get(this.model.get(\"_assessmentId\"));\n            if (!assessmentModel || assessmentModel.length === 0) return;\n\n            var state = assessmentModel.getState();\n            var isComplete = state.isComplete;\n            var isAttemptInProgress = state.attemptInProgress;\n            var attemptsSpent = state.attemptsSpent;\n            var hasHadAttempt = (!isAttemptInProgress && attemptsSpent > 0);\n            \n            isVisible = (isVisibleBeforeCompletion && !isComplete) || hasHadAttempt;\n\n            if (!wasVisible && isVisible) isVisible = false;\n\n            this.model.set('_isVisible', isVisible, {pluginName: \"assessmentResults\"});\n        },\n\n        checkIfComplete: function() {\n            \n            if (!Adapt.assessment) {\n                return false;\n            }\n\n            var assessmentModel = Adapt.assessment.get(this.model.get(\"_assessmentId\"));\n            if (!assessmentModel || assessmentModel.length === 0) return;\n\n            var state = assessmentModel.getState();\n            if (state.isComplete) {\n                this.onAssessmentsComplete(state);\n            } else {\n                this.model.reset('hard', true);\n            }\n        },\n\n        setupModelResetEvent: function() {\n            if (this.model.onAssessmentsReset) return;\n            this.model.onAssessmentsReset = function(state) {\n                if (this.get(\"_assessmentId\") === undefined || \n                    this.get(\"_assessmentId\") != state.id) return;\n\n                this.reset('hard', true);\n            };\n            this.model.listenTo(Adapt, 'assessments:reset', this.model.onAssessmentsReset);\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, 'assessments:complete', this.onAssessmentsComplete);\n            this.listenToOnce(Adapt, 'remove', this.onRemove);\n        },\n\n        removeEventListeners: function() {\n            this.stopListening(Adapt, 'assessments:complete', this.onAssessmentsComplete);\n            this.stopListening(Adapt, 'remove', this.onRemove);\n        },\n\n        onAssessmentsComplete: function(state) {\n            if (this.model.get(\"_assessmentId\") === undefined || \n                this.model.get(\"_assessmentId\") != state.id) return;\n            /*\n            make shortcuts to some of the key properties in the state object so that \n            content developers can just use {{attemptsLeft}} in json instead of {{state.attemptsLeft}}\n            */\n            this.model.set( {\n                _state: state,\n                attempts: state.attempts,\n                attemptsSpent: state.attemptsSpent,\n                attemptsLeft: state.attemptsLeft,\n                score: state.score,\n                scoreAsPercent: state.scoreAsPercent,\n                maxScore: state.maxScore,\n                isPass: state.isPass\n            });\n            \n            var feedbackBand = this.getFeedbackBand();\n            \n            this.setFeedback(feedbackBand);\n            \n            this.addClassesToArticle(feedbackBand);\n\n            this.render();\n            \n            this.show();\n        },\n\n        onAssessmentComplete: function(state) {\n            this.model.set(\"_state\", state);\n            \n            var feedbackBand = this.getFeedbackBand();\n            \n            this.setFeedback(feedbackBand);\n            \n            this.addClassesToArticle(feedbackBand);\n\n            this.render();\n            \n            this.show();\n        },\n\n        onInview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n                \n                if (this._isVisibleTop || this._isVisibleBottom) {\n                    this.setCompletionStatus();\n                    // Sometimes (with mobile and virtual keyboards) inview can be triggered\n                    // but the component is not _visible = true, so it does not get marked\n                    // complete. Delay the unbinding of the inview listener until complete\n                    if (this.model.get('_isComplete')) {\n                        this.$el.off(\"inview\");\n                    }\n                }\n            }\n        },\n\n        onRetry: function() {\n            var state = this.model.get(\"_state\");\n            var assessmentModel = Adapt.assessment.get(state.id);\n\n            this.restoreOriginalTexts();\n\n            assessmentModel.reset();\n        },\n\n        restoreOriginalTexts: function() {\n            this.model.set({\n                \"title\": this.model.get(\"originalTitle\"),\n                \"body\": this.model.get(\"originalBody\"),\n                \"instruction\": this.model.get(\"originalInstruction\")\n            });\n        },\n        \n        show: function() {\n            if(!this.model.get('_isVisible')) {\n                this.model.set('_isVisible', true, {pluginName: \"assessmentResults\"});\n            }\n        },\n\n        setFeedback: function(feedbackBand) {\n            var state = this.model.get(\"_state\");\n            state.feedbackBand = feedbackBand;\n\n            // ensure any handlebars expressions in the .feedback are handled...\n            this.model.set('feedback', Handlebars.compile(feedbackBand.feedback)(this.model.toJSON()));\n\n            this.checkRetryEnabled();\n\n            this.model.set(\"body\", this.model.get(\"_completionBody\"));\n        },\n        \n        /**\n         * If there are classes specified for the feedback band, apply them to the containing article\n         * This allows for custom styling based on the band the user's score falls into\n         */\n        addClassesToArticle: function(feedbackBand) {\n            \n            if(!feedbackBand.hasOwnProperty('_classes')) return;\n            \n            this.$el.parents('.article').addClass(feedbackBand._classes);\n        },\n\n        getFeedbackBand: function() {\n            var state = this.model.get(\"_state\");\n            var scoreProp = state.isPercentageBased ? 'scoreAsPercent' : 'score';\n            var bands = _.sortBy(this.model.get(\"_bands\"), '_score');\n            \n            for (var i = (bands.length - 1); i >= 0; i--) {\n                if (state[scoreProp] >= bands[i]._score) {\n                    return bands[i];\n                }\n            }\n\n            return \"\";\n        },\n\n        checkRetryEnabled: function() {\n            var state = this.model.get(\"_state\");\n\n            var assessmentModel = Adapt.assessment.get(state.id);\n            if (!assessmentModel.canResetInPage()) return false;\n\n            var isRetryEnabled = state.feedbackBand._allowRetry !== false;\n            var isAttemptsLeft = (state.attemptsLeft > 0 || state.attemptsLeft === \"infinite\");\n\n            var showRetry = isRetryEnabled && isAttemptsLeft;\n            this.model.set(\"_isRetryEnabled\", showRetry);\n\n            if (showRetry) {\n                var retryFeedback =  this.model.get(\"_retry\").feedback;\n                this.model.set(\"retryFeedback\", retryFeedback);\n            } else {\n                this.model.set(\"retryFeedback\", \"\");\n            }\n        },\n\n        onRemove: function() {\n            if (this.model.unsetLocking) this.model.unsetLocking(\"_isVisible\");\n\n            this.removeEventListeners();\n        }\n        \n    }, {\n        template: 'assessmentResults'\n    });\n    \n    Adapt.register(\"assessmentResults\", AssessmentResults);\n    \n    return AssessmentResults;\n});\n\n",
    "define('components/adapt-contrib-blank/js/adapt-contrib-blank',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Blank = ComponentView.extend({\n\n\n        preRender: function() {\n            this.$el.addClass(\"no-state\");\n            // Checks to see if the blank should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n            this.$('.component-inner').on('inview', _.bind(this.inview, this));\n        },\n\n        // Used to check if the blank should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-inner').off('inview');\n                    this.setCompletionStatus();\n                }\n\n            }\n        }\n\n    });\n\n    Adapt.register('blank', Blank);\n\n    return Blank;\n\n});\n\n",
    "define('core/js/views/buttonsView',[\n    'core/js/adapt',\n    'core/js/enums/buttonStateEnum'\n], function(Adapt, BUTTON_STATE) {\n\n    //convert BUTTON_STATE to property name\n    var textPropertyName = {\n        \"SUBMIT\": \"submit\",\n        \"CORRECT\": \"correct\",\n        \"INCORRECT\": \"incorrect\",\n        \"SHOW_CORRECT_ANSWER\": \"showCorrectAnswer\",\n        \"HIDE_CORRECT_ANSWER\": \"hideCorrectAnswer\",\n        \"SHOW_FEEDBACK\": \"showFeedback\",\n        \"RESET\": \"reset\"\n    };\n\n    var ButtonsView = Backbone.View.extend({\n\n        initialize: function(options) {\n            this.parent = options.parent;\n\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(this.model, 'change:_buttonState', this.onButtonStateChanged);\n            this.listenTo(this.model, 'change:feedbackMessage', this.onFeedbackMessageChanged);\n            this.listenTo(this.model, 'change:_attemptsLeft', this.onAttemptsChanged);\n            this.render();\n        },\n\n        events: {\n            'click .buttons-action': 'onActionClicked',\n            'click .buttons-feedback': 'onFeedbackClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['buttons'];\n            _.defer(_.bind(function() {\n                this.postRender();\n                Adapt.trigger('buttonsView:postRender', this);\n            }, this));\n            this.$el.html(template(data));\n        },\n\n        postRender: function() {\n            this.refresh();\n        },\n\n        checkResetSubmittedState: function() {\n            var isSubmitted = this.model.get('_isSubmitted');\n\n            if (!isSubmitted) {\n\n                var $icon = this.$('.buttons-marking-icon');\n                $icon.removeClass('icon-cross');\n                $icon.removeClass('icon-tick');\n                $icon.addClass('display-none');\n                this.$el.removeClass(\"submitted\");\n                this.model.set('feedbackMessage', undefined);\n                this.$('.buttons-feedback').a11y_cntrl_enabled(false);\n\n            } else {\n\n                this.$el.addClass(\"submitted\");\n\n            }\n        },\n\n        onActionClicked: function() {\n            var buttonState = this.model.get('_buttonState');\n            this.trigger('buttons:stateUpdate', BUTTON_STATE(buttonState));\n            this.checkResetSubmittedState();\n        },\n\n        onFeedbackClicked: function() {\n            this.trigger('buttons:stateUpdate', BUTTON_STATE.SHOW_FEEDBACK);\n        },\n\n        onFeedbackMessageChanged: function(model, changedAttribute) {\n            if (changedAttribute && this.model.get('_canShowFeedback')) {\n                //enable feedback button\n                this.$('.buttons-feedback').a11y_cntrl_enabled(true);\n            } else {\n                //disable feedback button\n                this.$('.buttons-feedback').a11y_cntrl_enabled(false);\n            }\n        },\n\n        onButtonStateChanged: function(model, changedAttribute) {\n            // Use 'correct' instead of 'complete' to signify button state\n            var buttonState = BUTTON_STATE(changedAttribute);\n            if (changedAttribute === BUTTON_STATE.CORRECT || changedAttribute === BUTTON_STATE.INCORRECT) {\n                // Both 'correct' and 'incorrect' states have no model answer, so disable the submit button\n                this.$('.buttons-action').a11y_cntrl_enabled(false);\n\n                if (!this.model.get(\"_canShowFeedback\")) {\n                    if (!this.$el.is(\".no-state\")) {\n                        //if no feedback, complete correct and has state, force focus to component state\n                        _.defer(_.bind(function() {\n                            $(\".\" + this.model.get(\"_id\") + \" .accessibility-state [tabindex]\").focusNoScroll();\n                        }, this));\n                    }\n                }\n              \n            } else {\n\n                var propertyName = textPropertyName[buttonState.asString];\n                var ariaLabel = this.model.get('_buttons')[\"_\" + propertyName].ariaLabel;\n                var buttonText = this.model.get('_buttons')[\"_\" + propertyName].buttonText;\n\n                // Enable the button, make accessible and update aria labels and text\n                this.$('.buttons-action').a11y_cntrl_enabled(true).html(buttonText).attr('aria-label', ariaLabel);\n\n                // Make model answer button inaccessible (but still enabled) for visual users due to\n                // the inability to represent selected incorrect/correct answers to a screen reader, may need revisiting\n                switch (changedAttribute) {\n                    case BUTTON_STATE.SHOW_CORRECT_ANSWER:\n                    case BUTTON_STATE.HIDE_CORRECT_ANSWER:\n                        this.$('.buttons-action').a11y_cntrl(false);\n                }\n\n            }\n\n            this.updateAttemptsCount();\n        },\n\n        checkFeedbackState: function(){\n            var canShowFeedback = this.model.get('_canShowFeedback');\n\n            this.$('.buttons-action').toggleClass('buttons-action-fullwidth buttons-action-enlarge', !canShowFeedback);\n            this.$('.buttons-feedback').toggleClass('no-feedback', !canShowFeedback);\n            this.$('.buttons-marking-icon').toggleClass('no-feedback', !canShowFeedback);\n        },\n\n        updateAttemptsCount: function(model, changedAttribute) {\n            var isInteractionComplete = this.model.get('_isInteractionComplete');\n            var attemptsLeft = (this.model.get('_attemptsLeft')) ? this.model.get('_attemptsLeft') : this.model.get('_attempts');\n            var isCorrect = this.model.get('_isCorrect');\n            var shouldDisplayAttempts = this.model.get('_shouldDisplayAttempts');\n            var attemptsString;\n\n            this.checkResetSubmittedState();\n\n            if (!isInteractionComplete && attemptsLeft != 0) {\n                attemptsString = attemptsLeft + \" \";\n                if (attemptsLeft > 1) {\n                    attemptsString += this.model.get('_buttons').remainingAttemptsText;\n                } else if (attemptsLeft === 1){\n                    attemptsString += this.model.get('_buttons').remainingAttemptText;\n                }\n\n            } else {\n                this.$('.buttons-display-inner').addClass('visibility-hidden');\n                this.showMarking();\n            }\n\n            if (shouldDisplayAttempts) {\n                this.$('.buttons-display-inner').a11y_text(attemptsString);\n            }\n\n        },\n\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            this.$('.buttons-marking-icon')\n                .removeClass('display-none')\n                .addClass(this.model.get('_isCorrect') ? 'icon-tick' : 'icon-cross');\n        },\n\n        refresh: function() {\n            this.updateAttemptsCount();\n            this.checkResetSubmittedState();\n            this.checkFeedbackState();\n            this.onButtonStateChanged(null, this.model.get('_buttonState'));\n            this.onFeedbackMessageChanged(null, this.model.get('feedbackMessage'));\n        }\n\n    });\n\n    return ButtonsView;\n\n});\n\n",
    "define('core/js/views/questionView',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    'core/js/views/buttonsView',\n    'core/js/models/questionModel',\n    'core/js/enums/buttonStateEnum'\n], function(Adapt, ComponentView, ButtonsView, QuestionModel, BUTTON_STATE) {\n\n    var useQuestionModelOnly = false;\n\n    var QuestionView = ComponentView.extend({\n\n        className: function() {\n            return \"component \"\n            + \"question-component \"\n            + this.model.get('_component')\n            + \"-component \" + this.model.get('_id')\n            + \" \" + this.model.get('_classes')\n            + \" \" + this.setVisibility()\n            + \" component-\" + this.model.get('_layout')\n            + \" nth-child-\" + this.model.get(\"_nthChild\")\n            + (this.model.get('_isComplete') ? ' completed' : '');\n        },\n\n        //////\n        // Setup question types\n        ////\n\n        preRender: function() {\n            // Setup listener for _isEnabled\n            this.listenTo(this.model, 'change:_isEnabled', this.onEnabledChanged);\n\n            this.listenTo(this.model, 'question:refresh', this.refresh);\n\n            // Checks to see if the question should be reset on revisit\n            this.checkIfResetOnRevisit();\n            // This method helps setup default settings on the model\n            this._runModelCompatibleFunction(\"setupDefaultSettings\");\n            // Blank method for setting up questions before rendering\n            this.setupQuestion();\n\n        },\n\n        // Used in the question view to disabled the question when _isEnabled has been set to false\n        onEnabledChanged: function(model, changedAttribute) {\n\n            // If isEnabled == false add disabled class\n            // else remove disabled class\n            if (!changedAttribute) {\n                this.$('.component-widget').addClass('disabled');\n                this.disableQuestion();\n            } else {\n                this.$('.component-widget').removeClass('disabled');\n                this.enableQuestion();\n            }\n\n        },\n\n        // Used by the question to disable the question during submit and complete stages\n        disableQuestion: function() {},\n\n        // Used by the question to enable the question during interactions\n        enableQuestion: function() {},\n\n        // Used to check if the question should reset on revisit\n        checkIfResetOnRevisit: function() {\n\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            // Call blank method for question to handle\n            if (isResetOnRevisit) {\n\n                this.model.reset(isResetOnRevisit, true);\n\n                 // Defer is added to allow the component to render\n                _.defer(_.bind(function() {\n                   this.resetQuestionOnRevisit(isResetOnRevisit);\n                }, this));\n\n            } else {\n\n                // If complete - display users answer\n                // or reset the question if not complete\n                var isInteractionComplete = this.model.get('_isInteractionComplete');\n\n                if (isInteractionComplete) {\n                    this.model.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);\n                    // Defer is added to allow the component to render\n                    _.defer(_.bind(function() {\n                        this.onHideCorrectAnswerClicked();\n                    }, this));\n\n                } else {\n                    this.model.set('_buttonState', BUTTON_STATE.SUBMIT);\n                    // Defer is added to allow the component to render\n                    _.defer(_.bind(function() {\n                        this.onResetClicked();\n                    }, this));\n                }\n\n            }\n\n        },\n\n        // Used by the question to reset the question when revisiting the component\n        resetQuestionOnRevisit: function(type) {},\n\n        // Left blank for question setup - should be used instead of preRender\n        setupQuestion: function() {},\n\n        // Calls default methods to setup after the question is rendered\n        postRender: function() {\n            this.addButtonsView();\n            this.onQuestionRendered();\n        },\n\n        // Used to setup buttonsView and sets up the internal events for the question\n        addButtonsView: function() {\n            this.buttonsView = new ButtonsView({model: this.model, el: this.$('.buttons')});\n\n            this.listenTo(this.buttonsView, 'buttons:stateUpdate', this.onButtonStateUpdate);\n\n        },\n\n        onButtonStateUpdate: function(button_state) {\n\n            switch (button_state) {\n                case BUTTON_STATE.SUBMIT:\n                    this.onSubmitClicked();\n                    break;\n                case BUTTON_STATE.RESET:\n                    this.onResetClicked();\n                    break;\n                case BUTTON_STATE.SHOW_CORRECT_ANSWER:\n                    this.onShowCorrectAnswerClicked();\n                    break;\n                case BUTTON_STATE.HIDE_CORRECT_ANSWER:\n                    this.onHideCorrectAnswerClicked();\n                    break;\n                case BUTTON_STATE.SHOW_FEEDBACK:\n                    this.showFeedback();\n                    break;\n            }\n\n        },\n\n        // Blank method used just like postRender is for presentational components\n        onQuestionRendered: function() {},\n\n        //////\n        // Submit process\n        ////\n\n        // Triggered when the submit button is clicked\n        onSubmitClicked: function() {\n            // canSubmit is setup in questions and should return a boolean\n            // If the question stops the user form submitting - show instruction error\n            // and give a blank method, onCannotSubmit to the question\n            var canSubmit = this._runModelCompatibleFunction(\"canSubmit\");\n\n            if(!canSubmit) {\n                this.showInstructionError();\n                this.onCannotSubmit();\n                return;\n            }\n\n            // Used to update the amount of attempts the question has\n            this._runModelCompatibleFunction(\"updateAttempts\");\n\n            // Used to set attributes on the model after being submitted\n            // Also adds a class of submitted\n            this._runModelCompatibleFunction(\"setQuestionAsSubmitted\");\n\n            // Used to remove instruction error that is set when\n            // the user has interacted in the wrong way\n            this.removeInstructionError();\n\n            // Used to store the users answer for later\n            // This is a blank method given to the question\n            this._runModelCompatibleFunction(\"storeUserAnswer\");\n\n            // Used to set question as correct:true/false\n            // Calls isCorrect which is blank for the question\n            // to fill out and return a boolean\n            this._runModelCompatibleFunction(\"markQuestion\", \"isCorrect\");\n\n            // Used by the question to set the score on the model\n            this._runModelCompatibleFunction(\"setScore\");\n\n            // Used by the question to display markings on the component\n            this.showMarking();\n\n            // Used to check if the question is complete\n            // Triggers setCompletionStatus and adds class to widget\n            this._runModelCompatibleFunction(\"checkQuestionCompletion\");\n\n            this.recordInteraction();\n\n            // Used to setup the feedback by checking against\n            // question isCorrect or isPartlyCorrect\n            this._runModelCompatibleFunction(\"setupFeedback\");\n\n            // Used to update buttonsView based upon question state\n            // Update buttons happens before showFeedback to preserve tabindexes and after setupFeedback to allow buttons to use feedback attribute\n            this._runModelCompatibleFunction(\"updateButtons\");\n\n            // Used to trigger an event so plugins can display feedback\n            this.showFeedback();\n\n            this.onSubmitted();\n        },\n\n        // Adds a validation error class when the canSubmit returns false\n        showInstructionError: function() {\n            this.$(\".component-instruction-inner\").addClass(\"validation-error\");\n            this.$el.a11y_focus();\n        },\n\n        // Blank method for question to fill out when the question cannot be submitted\n        onCannotSubmit: function() {},\n\n        // Blank method for question to fill out when the question was successfully submitted\n        onSubmitted: function() {},\n\n        // Used to set _isEnabled and _isSubmitted on the model\n        // Also adds a 'submitted' class to the widget\n        setQuestionAsSubmitted: function() {\n            this.model.setQuestionAsSubmitted();\n            this.$(\".component-widget\").addClass(\"submitted\");\n        },\n\n        // Removes validation error class when the user canSubmit\n        removeInstructionError: function() {\n            this.$(\".component-instruction-inner\").removeClass(\"validation-error\");\n        },\n\n        // This is important and should give the user feedback on how they answered the question\n        // Normally done through ticks and crosses by adding classes\n        showMarking: function() {},\n\n        // Checks if the question should be set to complete\n        // Calls setCompletionStatus and adds complete classes\n        checkQuestionCompletion: function() {\n\n            var isComplete = this.model.checkQuestionCompletion();\n\n            if (isComplete) {\n                this.$('.component-widget').addClass('complete show-user-answer');\n            }\n\n        },\n\n        recordInteraction:function() {\n            if (this.model.get('_recordInteraction') === true || !this.model.has('_recordInteraction')) {\n                Adapt.trigger('questionView:recordInteraction', this);\n            }\n        },\n\n        // Used to show feedback based upon whether _canShowFeedback is true\n        showFeedback: function() {\n\n            if (this.model.get('_canShowFeedback')) {\n                Adapt.trigger('questionView:showFeedback', this);\n            } else {\n                Adapt.trigger('questionView:disabledFeedback', this);\n            }\n\n        },\n\n        onResetClicked: function() {\n            this.setQuestionAsReset();\n\n            this._runModelCompatibleFunction(\"updateButtons\");\n\n            this._runModelCompatibleFunction(\"resetUserAnswer\");\n\n            this.resetQuestion();\n            if (this.model.get(\"_isReady\")) {\n                //if the model is already rendered, focus on the first tabbable element\n                //onResetClicked is called as part of the checkIfResetOnRevisit function and as a button click\n                _.defer(_.bind(function(){\n                    this.$el.a11y_focus();\n                }, this));\n            }\n        },\n\n        setQuestionAsReset: function() {\n            this.model.setQuestionAsReset();\n            this.$(\".component-widget\").removeClass(\"submitted\");\n\n            // Attempt to get the current page location\n            var currentModel = Adapt.findById(Adapt.location._currentId);\n            if (currentModel && currentModel.get(\"_isReady\")) {\n                //if the page is ready, focus on the first tabbable item\n                //otherwise will try to set focus as page loads and components are rendered\n                this.$el.a11y_focus();\n            }\n        },\n\n        // Used by the question view to reset the look and feel of the component.\n        // This could also include resetting item data\n        // This is triggered when the reset button is clicked so it shouldn't\n        // be a full reset\n        resetQuestion: function() {},\n\n        refresh: function() {\n            this.renderState();\n            \n            this.model.set('_buttonState', this.model.getButtonState());\n\n            if (this.model.get('_canShowMarking') && this.model.get('_isInteractionComplete') && this.model.get('_isSubmitted')) {\n                this.showMarking();\n            }\n\n            if (this.buttonsView) {\n                _.defer(_.bind(this.buttonsView.refresh, this.buttonsView));\n            }\n        },\n\n        onShowCorrectAnswerClicked: function() {\n            this.setQuestionAsShowCorrect();\n\n            this._runModelCompatibleFunction(\"updateButtons\");\n\n            this.showCorrectAnswer();\n        },\n\n        setQuestionAsShowCorrect: function() {\n            this.$(\".component-widget\")\n                .addClass(\"submitted show-correct-answer\")\n                .removeClass(\"show-user-answer\");\n        },\n\n        // Used by the question to display the correct answer to the user\n        showCorrectAnswer: function() {},\n\n        onHideCorrectAnswerClicked: function() {\n            this.setQuestionAsHideCorrect();\n\n            this._runModelCompatibleFunction(\"updateButtons\");\n\n            this.hideCorrectAnswer();\n        },\n\n        setQuestionAsHideCorrect: function() {\n            this.$(\".component-widget\")\n                .addClass(\"submitted show-user-answer\")\n                .removeClass(\"show-correct-answer\");\n        },\n\n        // Used by the question to display the users answer and\n        // hide the correct answer\n        // Should use the values stored in storeUserAnswer\n        hideCorrectAnswer: function() {},\n\n        // Time elapsed between the time the interaction was made available to the learner for response and the time of the first response\n        getLatency:function() {\n            return null;\n        },\n\n        // This function is overridden if useQuestionModeOnly: false. see below.\n        _runModelCompatibleFunction: function(name, lookForViewOnlyFunction) {\n            return this.model[name](); //questionModel Only\n        }\n\n    }, {\n        _isQuestionType: true\n    });\n\n\n    //allows us to turn on and off the questionView style and use the separated questionModel+questionView style only\n    if (useQuestionModelOnly) return QuestionView;\n\n    /*BACKWARDS COMPATIBILITY SECTION\n    * This section below is only for compatibility between the separated questionView+questionModel and the old questionView\n    * Remove this section in when all components use questionModel and there is no need to have model behaviour in the questionView\n    */\n\n    var viewOnlyCompatibleQuestionView = {\n\n        /* All of these functions have been moved to the questionModel.js file.\n         * On the rare occasion that they have not been overridden by the component and\n                that they call the view only questionView version,\n                these functions are included as redirects to the new Question Model.\n                It is very unlikely that these are needed but they are included to ensure compatibility.\n         * If you need to override these in your component you should now make and register a component model.\n         * Please remove them from your question component's view.\n        */\n\n            // Returns an object specific to the question type.\n            getInteractionObject: function() {\n                return this.model.getInteractionObject();\n            },\n\n            // Retturns a string detailing how the user answered the question.\n            getResponse: function() {\n                return this.model.getResponse();\n            },\n\n            // Returns a string describing the type of interaction: \"choice\" and \"matching\" supported (see scorm wrapper)\n            getResponseType: function() {\n                return this.model.getResponseType();\n            },\n            \n            // Calls default methods to setup on questions\n            setupDefaultSettings: function() {\n                return this.model.setupDefaultSettings();\n            },\n\n            // Used to setup either global or local button text\n            setupButtonSettings: function() {\n                return this.model.setupButtonSettings();\n            },\n\n            // Used to setup either global or local question weight/score\n            setupWeightSettings: function() {\n                return this.model.setupWeightSettings();\n            },\n\n            // Use to check if the user is allowed to submit the question\n            // Maybe the user has to select an item?\n            canSubmit: function() {\n                return this.model.canSubmit();\n            },\n\n            // Used to update the amount of attempts the user has left\n            updateAttempts: function() {\n                return this.model.updateAttempts();\n            },\n\n            // This is important for returning or showing the users answer\n            // This should preserve the state of the users answers\n            storeUserAnswer: function() {\n                return this.model.storeUserAnswer();\n            },\n\n            // Used by the question view to reset the stored user answer\n            resetUserAnswer: function() {\n                return this.model.resetUserAnswer();\n            },\n\n            // Sets _isCorrect:true/false based upon isCorrect method below\n            markQuestion: function() {\n\n                if (this._isInViewOnlyCompatibleMode(\"isCorrect\")) {\n\n                    if (this.isCorrect()) {\n                        this.model.set('_isCorrect', true);\n                    } else {\n                        this.model.set('_isCorrect', false);\n                    }\n\n                } else {\n                    return this.model.markQuestion();\n                }\n            },\n\n            // Should return a boolean based upon whether to question is correct or not\n            isCorrect: function() {\n                return this.model.isCorrect();\n            },\n\n            // Used to set the score based upon the _questionWeight\n            setScore: function() {\n                return this.model.setScore();\n            },\n\n            // Updates buttons based upon question state by setting\n            // _buttonState on the model which buttonsView listens to\n            updateButtons: function() {\n                return this.model.updateButtons();\n            },\n\n            // Used to setup the correct, incorrect and partly correct feedback\n            setupFeedback: function() {\n\n                if (this._isInViewOnlyCompatibleMode(\"isPartlyCorrect\")) {\n\n                    // Use view based feedback where necessary\n                    if (this.model.get('_isCorrect')) {\n                        this._runModelCompatibleFunction(\"setupCorrectFeedback\");\n                    } else if (this.isPartlyCorrect()) {\n                        this._runModelCompatibleFunction(\"setupPartlyCorrectFeedback\");\n                    } else {\n                        this._runModelCompatibleFunction(\"setupIncorrectFeedback\");\n                    }\n\n                } else {\n                    // Use model based feedback\n                    this.model.setupFeedback();\n                }\n\n            },\n\n            // Used by the question to determine if the question is incorrect or partly correct\n            // Should return a boolean\n            isPartlyCorrect: function() {\n                return this.model.isPartlyCorrect();\n            },\n\n            setupCorrectFeedback: function() {\n                return this.model.setupCorrectFeedback();\n            },\n\n            setupPartlyCorrectFeedback: function() {\n                return this.model.setupPartlyCorrectFeedback();\n            },\n\n            setupIncorrectFeedback: function() {\n                return this.model.setupIncorrectFeedback();\n            },\n\n\n        //Helper functions for compatibility layer\n        _runModelCompatibleFunction: function(name, lookForViewOnlyFunction) {\n            if (this._isInViewOnlyCompatibleMode(name, lookForViewOnlyFunction)) {\n                return this[name](); //questionView\n            } else {\n                return this.model[name](); //questionModel\n            }\n        },\n\n        _isInViewOnlyCompatibleMode: function(name, lookForViewOnlyFunction) {\n            //return false uses the model function questionModel\n            //return true uses the view only function questionView\n\n            var checkForFunction = (lookForViewOnlyFunction || name);\n\n            //if the function does NOT exist on the view at all, use the model only\n            if (!this.constructor.prototype[checkForFunction]) return false; //questionModel\n\n            //if the function DOES exist on the view and MATCHES the compatibility function above, use the model only\n            if (this.constructor.prototype[checkForFunction] === viewOnlyCompatibleQuestionView[checkForFunction])  {\n                switch (checkForFunction) {\n                    case \"setupFeedback\":\n                    case \"markQuestion\": \n                        return true; //questionView\n                }\n                return false; //questionModel\n            }\n\n            //if the function DOES exist on the view and does NOT match the compatibility function above, use the view function\n            return true; //questionView\n        }\n\n    };\n\n    //return question view class extended with the compatibility layer\n    return QuestionView.extend(viewOnlyCompatibleQuestionView, {\n        _isQuestionType: true\n    });\n\n    /*END OF BACKWARDS COMPATIBILITY SECTION*/\n\n});\n\n",
    "define('components/adapt-contrib-mcq/js/mcqView',[\n    'core/js/views/questionView'\n], function(QuestionView) {\n\n    var McqView = QuestionView.extend({\n\n        events: {\n            'focus .mcq-item input':'onItemFocus',\n            'blur .mcq-item input':'onItemBlur',\n            'change .mcq-item input':'onItemSelected',\n            'keyup .mcq-item input':'onKeyPress'\n        },\n\n        resetQuestionOnRevisit: function() {\n            this.setAllItemsEnabled(true);\n            this.resetQuestion();\n        },\n\n        setupQuestion: function() {\n            this.model.setupRandomisation();\n        },\n\n        disableQuestion: function() {\n            this.setAllItemsEnabled(false);\n        },\n\n        enableQuestion: function() {\n            this.setAllItemsEnabled(true);\n        },\n\n        setAllItemsEnabled: function(isEnabled) {\n            _.each(this.model.get('_items'), function(item, index){\n                var $itemLabel = this.$('label').eq(index);\n                var $itemInput = this.$('input').eq(index);\n\n                if (isEnabled) {\n                    $itemLabel.removeClass('disabled');\n                    $itemInput.prop('disabled', false);\n                } else {\n                    $itemLabel.addClass('disabled');\n                    $itemInput.prop('disabled', true);\n                }\n            }, this);\n        },\n\n        onQuestionRendered: function() {\n            this.setReadyStatus();\n            if (!this.model.get(\"_isSubmitted\")) return;\n            this.showMarking();\n        },\n\n        onKeyPress: function(event) {\n            if (event.which === 13) { //<ENTER> keypress\n                this.onItemSelected(event);\n            }\n        },\n\n        onItemFocus: function(event) {\n            if(this.model.get('_isEnabled') && !this.model.get('_isSubmitted')){\n                $(\"label[for='\"+$(event.currentTarget).attr('id')+\"']\").addClass('highlighted');\n            }\n        },\n        \n        onItemBlur: function(event) {\n            $(\"label[for='\"+$(event.currentTarget).attr('id')+\"']\").removeClass('highlighted');\n        },\n\n        onItemSelected: function(event) {\n            if(this.model.get('_isEnabled') && !this.model.get('_isSubmitted')){\n                var selectedItemObject = this.model.get('_items')[$(event.currentTarget).parent('.component-item').index()];\n                this.toggleItemSelected(selectedItemObject, event);\n            }\n        },\n\n        toggleItemSelected:function(item, clickEvent) {\n            var selectedItems = this.model.get('_selectedItems');\n            var itemIndex = _.indexOf(this.model.get('_items'), item),\n                $itemLabel = this.$('label').eq(itemIndex),\n                $itemInput = this.$('input').eq(itemIndex),\n                selected = !$itemLabel.hasClass('selected');\n            \n                if(selected) {\n                    if(this.model.get('_selectable') === 1){\n                        this.$('label').removeClass('selected');\n                        this.$('input').prop('checked', false);\n                        this.deselectAllItems();\n                        selectedItems[0] = item;\n                    } else if(selectedItems.length < this.model.get('_selectable')) {\n                     selectedItems.push(item);\n                 } else {\n                    clickEvent.preventDefault();\n                    return;\n                }\n                $itemLabel.addClass('selected');\n                $itemLabel.a11y_selected(true);\n            } else {\n                selectedItems.splice(_.indexOf(selectedItems, item), 1);\n                $itemLabel.removeClass('selected');\n                $itemLabel.a11y_selected(false);\n            }\n            $itemInput.prop('checked', selected);\n            item._isSelected = selected;\n            this.model.set('_selectedItems', selectedItems);\n        },\n\n        // Blank method to add functionality for when the user cannot submit\n        // Could be used for a popup or explanation dialog/hint\n        onCannotSubmit: function() {},\n\n        // This is important and should give the user feedback on how they answered the question\n        // Normally done through ticks and crosses by adding classes\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            _.each(this.model.get('_items'), function(item, i) {\n                var $item = this.$('.component-item').eq(i);\n                $item.removeClass('correct incorrect').addClass(item._isCorrect ? 'correct' : 'incorrect');\n            }, this);\n        },\n\n        // Used by the question view to reset the look and feel of the component.\n        resetQuestion: function() {\n            this.deselectAllItems();\n            this.resetItems();\n        },\n\n        deselectAllItems: function() {\n            this.$el.a11y_selected(false);\n            this.model.deselectAllItems();\n        },\n\n        resetItems: function() {\n            this.$('.component-item label').removeClass('selected');\n            this.$('.component-item').removeClass('correct incorrect');\n            this.$('input').prop('checked', false);\n            this.model.resetItems();\n        },\n\n        showCorrectAnswer: function() {\n            _.each(this.model.get('_items'), function(item, index) {\n                this.setOptionSelected(index, item._shouldBeSelected);\n            }, this);\n        },\n\n        setOptionSelected:function(index, selected) {\n            var $itemLabel = this.$('label').eq(index);\n            var $itemInput = this.$('input').eq(index);\n            if (selected) {\n                $itemLabel.addClass('selected');\n                $itemInput.prop('checked', true);\n            } else {\n                $itemLabel.removeClass('selected');\n                $itemInput.prop('checked', false);\n            }\n        },\n\n        hideCorrectAnswer: function() {\n            _.each(this.model.get('_items'), function(item, index) {\n                this.setOptionSelected(index, this.model.get('_userAnswer')[item._index]);\n            }, this);\n        },\n\n        /**\n        * used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\n        * returns the user's answers as a string in the format \"1,5,2\"\n        */\n        getResponse:function() {\n            var selected = _.where(this.model.get('_items'), {'_isSelected':true});\n            var selectedIndexes = _.pluck(selected, '_index');\n            // indexes are 0-based, we need them to be 1-based for cmi.interactions\n            for (var i = 0, count = selectedIndexes.length; i < count; i++) {\n                selectedIndexes[i]++;\n            }\n            return selectedIndexes.join(',');\n        },\n\n        /**\n        * used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\n        */\n        getResponseType:function() {\n            return \"choice\";\n        }\n\n    });\n\n    return McqView;\n\n});\n\n",
    "define('components/adapt-contrib-mcq/js/mcqModel',[\n    'core/js/models/questionModel'\n], function(QuestionModel) {\n    \n    var McqModel = QuestionModel.extend({\n\n        init: function() {\n            QuestionModel.prototype.init.call(this);\n\n            this.set(\"_isRadio\", (this.get(\"_selectable\") == 1) );\n            \n            this.set('_selectedItems', []);\n\n            this.setupQuestionItemIndexes();\n        },\n\n        setupQuestionItemIndexes: function() {\n            var items = this.get(\"_items\");\n            if (items && items.length > 0) {\n                for (var i = 0, l = items.length; i < l; i++) {\n                    if (items[i]._index === undefined) items[i]._index = i;\n                }\n            }\n        },\n\n        restoreUserAnswers: function() {\n            if (!this.get(\"_isSubmitted\")) return;\n\n            var selectedItems = [];\n            var items = this.get(\"_items\");\n            var userAnswer = this.get(\"_userAnswer\");\n            _.each(items, function(item, index) {\n                item._isSelected = userAnswer[item._index];\n                if (item._isSelected) {\n                    selectedItems.push(item);\n                }\n            });\n\n            this.set(\"_selectedItems\", selectedItems);\n\n            this.setQuestionAsSubmitted();\n            this.markQuestion();\n            this.setScore();\n            //this.showMarking();\n            this.setupFeedback();\n        },\n\n        setupRandomisation: function() {\n            if (this.get('_isRandom') && this.get('_isEnabled')) {\n                this.set(\"_items\", _.shuffle(this.get(\"_items\")));\n            }\n        },\n\n        // check if the user is allowed to submit the question\n        canSubmit: function() {\n            var count = 0;\n\n            _.each(this.get('_items'), function(item) {\n                if (item._isSelected) {\n                    count++;\n                }\n            }, this);\n\n            return (count > 0) ? true : false;\n\n        },\n\n        // This is important for returning or showing the users answer\n        // This should preserve the state of the users answers\n        storeUserAnswer: function() {\n            var userAnswer = [];\n\n            var items = this.get('_items').slice(0);\n            items.sort(function(a, b) {\n                return a._index - b._index;\n            });\n\n            _.each(items, function(item, index) {\n                userAnswer.push(item._isSelected);\n            }, this);\n            this.set('_userAnswer', userAnswer);\n        },\n\n        isCorrect: function() {\n\n            var numberOfRequiredAnswers = 0;\n            var numberOfCorrectAnswers = 0;\n            var numberOfIncorrectAnswers = 0;\n\n            _.each(this.get('_items'), function(item, index) {\n\n                var itemSelected = (item._isSelected || false);\n\n                if (item._shouldBeSelected) {\n                    numberOfRequiredAnswers ++;\n\n                    if (itemSelected) {\n                        numberOfCorrectAnswers ++;\n                        \n                        item._isCorrect = true;\n\n                        this.set('_isAtLeastOneCorrectSelection', true);\n                    }\n\n                } else if (!item._shouldBeSelected && itemSelected) {\n                    numberOfIncorrectAnswers ++;\n                }\n\n            }, this);\n\n            this.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n            this.set('_numberOfRequiredAnswers', numberOfRequiredAnswers);\n\n            // Check if correct answers matches correct items and there are no incorrect selections\n            var answeredCorrectly = (numberOfCorrectAnswers === numberOfRequiredAnswers) && (numberOfIncorrectAnswers === 0);\n            return answeredCorrectly;\n        },\n\n        // Sets the score based upon the questionWeight\n        // Can be overwritten if the question needs to set the score in a different way\n        setScore: function() {\n            var questionWeight = this.get(\"_questionWeight\");\n            var answeredCorrectly = this.get('_isCorrect');\n            var score = answeredCorrectly ? questionWeight : 0;\n            this.set('_score', score);\n        },\n\n        setupFeedback: function() {\n\n            if (this.get('_isCorrect')) {\n                this.setupCorrectFeedback();\n            } else if (this.isPartlyCorrect()) {\n                this.setupPartlyCorrectFeedback();\n            } else {\n                // apply individual item feedback\n                if((this.get('_selectable') === 1) && this.get('_selectedItems')[0].feedback) {\n                    this.setupIndividualFeedback(this.get('_selectedItems')[0]);\n                    return;\n                } else {\n                    this.setupIncorrectFeedback();\n                }\n            }\n        },\n\n        setupIndividualFeedback: function(selectedItem) {\n             this.set({\n                 feedbackTitle: this.get('title'),\n                 feedbackMessage: selectedItem.feedback\n             });\n        },\n\n        isPartlyCorrect: function() {\n            return this.get('_isAtLeastOneCorrectSelection');\n        },\n\n        resetUserAnswer: function() {\n            this.set({_userAnswer: []});\n        },\n\n        deselectAllItems: function() {\n            _.each(this.get('_items'), function(item) {\n                item._isSelected = false;\n            }, this);\n        },\n\n        resetItems: function() {\n            this.set({\n                _selectedItems: [],\n                _isAtLeastOneCorrectSelection: false\n            });\n        }\n\n    });\n\n    return McqModel;\n\n});\n\n",
    "define('components/adapt-contrib-mcq/js/adapt-contrib-mcq',[\n    'core/js/adapt',\n    './mcqView',\n    './mcqModel'\n], function(Adapt, McqView, McqModel) {\n\n    return Adapt.register(\"mcq\", {\n        view: McqView,\n        model: McqModel\n    });\n\n});\n\n",
    "define('components/adapt-contrib-gmcq/js/adapt-contrib-gmcq',[\n    'coreJS/adapt',\n    'components/adapt-contrib-mcq/js/adapt-contrib-mcq'\n], function(Adapt, Mcq) {\n\n    var Gmcq = Mcq.view.extend({\n\n        events: {\n            'focus .gmcq-item input': 'onItemFocus',\n            'blur .gmcq-item input': 'onItemBlur',\n            'change .gmcq-item input': 'onItemSelected',\n            'keyup .gmcq-item input': 'onKeyPress'\n        },\n\n        onItemSelected: function(event) {\n\n            var selectedItemObject = this.model.get('_items')[$(event.currentTarget).parent('.gmcq-item').index()];\n\n            if (this.model.get('_isEnabled') && !this.model.get('_isSubmitted')) {\n                this.toggleItemSelected(selectedItemObject, event);\n            }\n\n        },\n\n        setupQuestion: function() {\n            Mcq.view.prototype.setupQuestion.call(this);\n\n            this.listenTo(Adapt, {\n                'device:resize': this.onDeviceResize\n            });\n\n        },\n\n        onQuestionRendered: function() {\n\n            this.setUpColumns();\n\n            this.$('label').imageready(_.bind(function() {\n                this.setReadyStatus();\n            }, this));\n\n        },\n\n        onDeviceResize: function() {\n            this.setUpColumns();\n        },\n\n        setUpColumns: function() {\n            var columns = this.model.get('_columns');\n\n            if (!columns) return;\n\n            if (Adapt.device.screenSize === 'large') {\n                this.$el.addClass('gmcq-column-layout');\n                this.$('.gmcq-item').css('width', (100 / columns) + '%');\n            } else {\n                this.$el.removeClass('gmcq-column-layout');\n                this.$('.gmcq-item').css('width', '');\n            }\n        }\n\n    }, {\n        template: 'gmcq'\n    });\n\n    return Adapt.register(\"gmcq\", {\n        view: Gmcq,\n        model: Mcq.model.extend({})\n    });\n\n});\n\n",
    "define('components/adapt-contrib-graphic/js/adapt-contrib-graphic',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Graphic = ComponentView.extend({\n\n        preRender: function() {\n            this.listenTo(Adapt, 'device:changed', this.resizeImage);\n\n            // Checks to see if the graphic should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.resizeImage(Adapt.device.screenSize, true);\n        },\n\n        // Used to check if the graphic should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-widget').off('inview');\n                    this.setCompletionStatus();\n                }\n\n            }\n        },\n\n        remove: function() {\n          // Remove any 'inview' listener attached.\n          this.$('.component-widget').off('inview');\n\n          ComponentView.prototype.remove.apply(this, arguments);\n        },\n\n        resizeImage: function(width, setupInView) {\n            this.$('.graphic-widget').imageready(_.bind(function() {\n                this.setReadyStatus();\n\n                if (setupInView) {\n                    // Bind 'inview' once the image is ready.\n                    this.$('.component-widget').on('inview', _.bind(this.inview, this));\n                }\n            }, this));\n        }\n    });\n\n    Adapt.register('graphic', Graphic);\n\n    return Graphic;\n\n});\n\n",
    "define('components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var HotGraphic = ComponentView.extend({\n\n        isPopupOpen: false,\n        \n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(this.model, 'change:_isVisible', this.toggleVisibility);\n            this.listenTo(Adapt, 'accessibility:toggle', this.onAccessibilityToggle);\n            \n            this.model.set('_globals', Adapt.course.get('_globals'));\n            \n            _.bindAll(this, 'onKeyUp');\n            \n            this.preRender();\n            \n            if (this.model.get('_canCycleThroughPagination') === undefined) {\n                this.model.set('_canCycleThroughPagination', false);\n            }\n            if (Adapt.device.screenSize == 'large') {\n                this.render();\n            } else {\n                this.reRender();\n            }\n        },\n\n        events: function() {\n            return {\n                'click .hotgraphic-graphic-pin': 'onPinClicked',\n                'click .hotgraphic-popup-done': 'closePopup',\n                'click .hotgraphic-popup-nav .back': 'previousHotGraphic',\n                'click .hotgraphic-popup-nav .next': 'nextHotGraphic'\n            }\n        },\n\n        preRender: function() {\n            this.listenTo(Adapt, 'device:changed', this.reRender, this);\n\n            // Checks to see if the hotgraphic should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.renderState();\n            this.$('.hotgraphic-widget').imageready(_.bind(function() {\n                this.setReadyStatus();\n            }, this));\n\n            this.setupEventListeners();\n        },\n\n        // Used to check if the hotgraphic should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n\n                _.each(this.model.get('_items'), function(item) {\n                    item._isVisited = false;\n                });\n            }\n        },\n\n        reRender: function() {\n            if (Adapt.device.screenSize != 'large') {\n                this.replaceWithNarrative();\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-inner').off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        replaceWithNarrative: function() {\n            if (!Adapt.componentStore.narrative) throw \"Narrative not included in build\";\n            var Narrative = Adapt.componentStore.narrative;\n\n            var model = this.prepareNarrativeModel();\n            var newNarrative = new Narrative({ model: model });\n            var $container = $(\".component-container\", $(\".\" + this.model.get(\"_parentId\")));\n\n            newNarrative.reRender();\n            newNarrative.setupNarrative();\n            $container.append(newNarrative.$el);\n            Adapt.trigger('device:resize');\n            _.defer(_.bind(function () {\n                this.remove();\n            }, this));\n        },\n\n        prepareNarrativeModel: function() {\n            var model = this.model;\n            model.set('_component', 'narrative');\n            model.set('_wasHotgraphic', true);\n            model.set('originalBody', model.get('body'));\n            model.set('originalInstruction', model.get('instruction'));\n            if (model.get('mobileBody')) {\n                model.set('body', model.get('mobileBody'));\n            }\n            if (model.get('mobileInstruction')) {\n                model.set('instruction', model.get('mobileInstruction'));\n            }\n\n            return model;\n        },\n\n        applyNavigationClasses: function (index) {\n            var $nav = this.$('.hotgraphic-popup-nav'),\n                itemCount = this.$('.hotgraphic-item').length;\n\n            $nav.removeClass('first').removeClass('last');\n            this.$('.hotgraphic-popup-done').a11y_cntrl_enabled(true);\n            if(index <= 0 && !this.model.get('_canCycleThroughPagination')) {\n                this.$('.hotgraphic-popup-nav').addClass('first');\n                this.$('.hotgraphic-popup-controls.back').a11y_cntrl_enabled(false);\n                this.$('.hotgraphic-popup-controls.next').a11y_cntrl_enabled(true);\n            } else if (index >= itemCount-1 && !this.model.get('_canCycleThroughPagination')) {\n                this.$('.hotgraphic-popup-nav').addClass('last');\n                this.$('.hotgraphic-popup-controls.back').a11y_cntrl_enabled(true);\n                this.$('.hotgraphic-popup-controls.next').a11y_cntrl_enabled(false);\n            } else {\n                this.$('.hotgraphic-popup-controls.back').a11y_cntrl_enabled(true);\n                this.$('.hotgraphic-popup-controls.next').a11y_cntrl_enabled(true);\n            }\n            var classes = this.model.get(\"_items\")[index]._classes \n                ? this.model.get(\"_items\")[index]._classes\n                : '';  // _classes has not been defined\n      \n            this.$('.hotgraphic-popup').attr('class', 'hotgraphic-popup ' + 'item-' + index + ' ' + classes);\n\n        },\n\n        onPinClicked: function (event) {\n            if(event) event.preventDefault();\n            \n            this.$('.hotgraphic-popup-inner').a11y_on(false);\n            this.$('.hotgraphic-item').hide().removeClass('active');\n            \n            var $currentHotSpot = this.$('.' + $(event.currentTarget).data('id'));\n            $currentHotSpot.show().addClass('active');\n            \n            var currentIndex = this.$('.hotgraphic-item.active').index();\n            this.setVisited(currentIndex);\n            \n            this.openPopup();\n           \n            this.applyNavigationClasses(currentIndex);\n        },\n        \n        openPopup: function() {\n            var currentIndex = this.$('.hotgraphic-item.active').index();\n            this.$('.hotgraphic-popup-count .current').html(currentIndex + 1);\n            this.$('.hotgraphic-popup-count .total').html(this.$('.hotgraphic-item').length);\n            this.$('.hotgraphic-popup').attr('class', 'hotgraphic-popup item-' + currentIndex).show();\n            this.$('.hotgraphic-popup-inner .active').a11y_on(true);\n            \n            this.isPopupOpen = true;\n              \n            Adapt.trigger('popup:opened',  this.$('.hotgraphic-popup-inner'));\n\n            this.$('.hotgraphic-popup-inner .active').a11y_focus();\n            \n            this.setupEscapeKey();\n        },\n\n        closePopup: function(event) {\n            if(event) event.preventDefault();\n            \n            this.$('.hotgraphic-popup').hide();\n            \n            this.isPopupOpen = false;\n            \n            Adapt.trigger('popup:closed',  this.$('.hotgraphic-popup-inner'));\n        },\n\n        previousHotGraphic: function (event) {\n            event.preventDefault();\n            var currentIndex = this.$('.hotgraphic-item.active').index();\n\n            if (currentIndex === 0 && !this.model.get('_canCycleThroughPagination')) {\n                return;\n            } else if (currentIndex === 0 && this.model.get('_canCycleThroughPagination')) {\n                currentIndex = this.model.get('_items').length;\n            }\n\n            this.$('.hotgraphic-item.active').hide().removeClass('active');\n            this.$('.hotgraphic-item').eq(currentIndex-1).show().addClass('active');\n            this.setVisited(currentIndex-1);\n            this.$('.hotgraphic-popup-count .current').html(currentIndex);\n            this.$('.hotgraphic-popup-inner').a11y_on(false);\n\n            this.applyNavigationClasses(currentIndex-1);\n            this.$('.hotgraphic-popup-inner .active').a11y_on(true);\n            this.$('.hotgraphic-popup-inner .active').a11y_focus();\n        },\n\n        nextHotGraphic: function (event) {\n            event.preventDefault();\n            var currentIndex = this.$('.hotgraphic-item.active').index();\n            if (currentIndex === (this.model.get('_items').length-1) && !this.model.get('_canCycleThroughPagination')) {\n                return;\n            } else if (currentIndex === (this.model.get('_items').length-1) && this.model.get('_canCycleThroughPagination')) {\n                currentIndex = -1;\n            }\n            this.$('.hotgraphic-item.active').hide().removeClass('active');\n            this.$('.hotgraphic-item').eq(currentIndex+1).show().addClass('active');\n            this.setVisited(currentIndex+1);\n            this.$('.hotgraphic-popup-count .current').html(currentIndex+2);\n            this.$('.hotgraphic-popup-inner').a11y_on(false);\n\n            this.applyNavigationClasses(currentIndex+1);\n            this.$('.hotgraphic-popup-inner .active').a11y_on(true);\n            this.$('.hotgraphic-popup-inner .active').a11y_focus();\n        },\n\n        setVisited: function(index) {\n            var item = this.model.get('_items')[index];\n            item._isVisited = true;\n\n            var $pin = this.$('.hotgraphic-graphic-pin').eq(index);\n            $pin.addClass('visited');\n            // append the word 'visited.' to the pin's aria-label\n            var visitedLabel = this.model.get('_globals')._accessibility._ariaLabels.visited + \".\";\n            $pin.attr('aria-label', function(index, val) {return val + \" \" + visitedLabel});\n\n            $.a11y_alert(\"visited\");\n\n            this.checkCompletionStatus();\n        },\n\n        getVisitedItems: function() {\n            return _.filter(this.model.get('_items'), function(item) {\n                return item._isVisited;\n            });\n        },\n\n        checkCompletionStatus: function() {\n            if (this.getVisitedItems().length == this.model.get('_items').length) {\n                this.trigger('allItems');\n            }\n        },\n\n        onCompletion: function() {\n            this.setCompletionStatus();\n            if (this.completionEvent && this.completionEvent != 'inview') {\n                this.off(this.completionEvent, this);\n            }\n        },\n\n        setupEventListeners: function() {\n            this.completionEvent = (!this.model.get('_setCompletionOn')) ? 'allItems' : this.model.get('_setCompletionOn');\n            if (this.completionEvent !== 'inview') {\n                this.on(this.completionEvent, _.bind(this.onCompletion, this));\n            } else {\n                this.$('.component-widget').on('inview', _.bind(this.inview, this));\n            }\n        },\n        \n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && this.isPopupOpen) {\n                $(window).on(\"keyup\", this.onKeyUp);\n            } else {\n                $(window).off(\"keyup\", this.onKeyUp);\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            \n            event.preventDefault();\n\n            this.closePopup();\n        }\n\n    });\n\n    Adapt.register('hotgraphic', HotGraphic);\n\n    return HotGraphic;\n\n});\n",
    "define('components/adapt-contrib-matching/js/adapt-contrib-matching',[\n    'core/js/adapt',\n    'core/js/views/questionView',\n    'libraries/select2'\n], function(Adapt, QuestionView) {\n    \n    /*\n     * issue/1543: fix from https://github.com/select2/select2/issues/4063\n     */\n    var dropdownAdapter;\n    jQuery.fn.select2.amd.require([    \n        \"select2/utils\",\n        \"select2/dropdown\",\n        \"select2/dropdown/attachContainer\",\n        \"select2/dropdown/closeOnSelect\"\n    ], function(Utils, DropdownAdapter, AttachContainer, CloseOnSelect) {\n\n        dropdownAdapter = Utils.Decorate(\n            Utils.Decorate(\n                DropdownAdapter,\n                AttachContainer\n            ),\n            CloseOnSelect\n        );\n\n    });\n\n    var Matching = QuestionView.extend({\n\n        disableQuestion: function() {\n            this.$('select').prop(\"disabled\", true).select2();\n        },\n\n        setupSelect2: function() {\n            this.enableQuestion();\n            if (this.model.get('_isEnabled') !== true) {\n                // select2 ignores disabled property applied to <select> in the template \n                this.disableQuestion();\n            }\n        },\n\n        enableQuestion: function() {\n            this.$('select').prop(\"disabled\", false).select2({\n                placeholder: this.model.get('placeholder'),\n                minimumResultsForSearch: Infinity, // hides the search box from the Select2 dropdown\n                dir: Adapt.config.get('_defaultDirection'),\n                dropdownAdapter: dropdownAdapter\n            });\n        },\n\n        resetQuestionOnRevisit: function() {\n            this.resetQuestion();\n        },\n\n        setupQuestion: function() {\n            this.listenToOnce(Adapt, 'preRemove', this.onPreRemove);\n\n            this.setupItemIndexes();\n            \n            this.restoreUserAnswers();\n\n            this.setupRandomisation();\n        },\n\n        onPreRemove: function() {\n            this.$('select').select2('destroy');\n        },\n\n        setupItemIndexes: function() {\n\n            _.each(this.model.get(\"_items\"), function(item, index) {\n                if (item._index === undefined) {\n                    item._index = index;\n                    item._selected = false;\n                }\n                _.each(item._options, function(option, index) {\n                    if (option._index === undefined) {\n                        option._index = index;\n                        option._isSelected = false;\n                    }\n                });\n            });\n\n        },\n\n        restoreUserAnswers: function() {\n            if (!this.model.get(\"_isSubmitted\")) return;\n\n            var userAnswer = this.model.get(\"_userAnswer\");\n\n            _.each(this.model.get(\"_items\"), function(item, index) {\n                _.each(item._options, function(option, index) {\n                    if (option._index == userAnswer[item._index]) {\n                        option._isSelected = true;\n                        item._selected = option;\n                    }\n                });\n            });\n\n            this.setQuestionAsSubmitted();\n            this.markQuestion();\n            this.setScore();\n            this.showMarking();\n            this.setupFeedback();\n        },\n\n        setupRandomisation: function() {\n            if (this.model.get('_isRandom') && this.model.get('_isEnabled')) {\n                _.each(this.model.get('_items'), function(item) {\n                    item._options = _.shuffle(item._options);\n                });\n            }\n        },\n\n        onQuestionRendered: function() {\n            this.setReadyStatus();\n            this.setupSelect2();\n        },\n\n        canSubmit: function() {\n            var canSubmit = true;\n\n            this.$('select').each(function isOptionSelected(index, element) {\n                if(element.selectedIndex < 1) {// the placeholder has an index of 0 in Firefox and -1 in other browsers\n                    canSubmit = false;\n                    return false;\n                }\n            });\n\n            return canSubmit;\n        },\n\n        onCannotSubmit: function() {\n            this.$('select').each(function addErrorClass(index, element) {\n                if(element.selectedIndex < 1) {\n                    var $element = $(element);\n                    var $container = $element.parents('.matching-select-container');\n                    $container.addClass('error');\n                    // ensure the error class gets removed when the user selects a valid option\n                    var evt = \"select2:select.errorclear\";\n                    var $select = $element.parent();\n                    $select.off(evt);// prevent multiple event bindings if the user repeatedly clicks submit without first making a selection\n                    $select.on(evt, function(e) {\n                        if(e.params.data.element.index > 0) {\n                            $container.removeClass('error');\n                            $select.off(evt);\n                        }\n                    });\n                }\n            });\n        },\n\n        storeUserAnswer: function() {\n\n            var userAnswer = new Array(this.model.get('_items').length);\n            var tempUserAnswer = new Array(this.model.get('_items').length);\n\n            _.each(this.model.get('_items'), function(item, index) {\n\n                var $selectedOption = this.$('.matching-select option:selected').eq(index);\n                var optionIndex = $selectedOption.index() - 1;\n\n                item._options[optionIndex]._isSelected = true;\n                item._selected = item._options[optionIndex];\n\n                tempUserAnswer[item._index] = optionIndex;\n                userAnswer[item._index] = item._options[optionIndex]._index;\n            }, this);\n\n            this.model.set('_userAnswer', userAnswer);\n            this.model.set('_tempUserAnswer', tempUserAnswer);\n        },\n\n        isCorrect: function() {\n\n            var numberOfCorrectAnswers = 0;\n\n            _.each(this.model.get('_items'), function(item, index) {\n\n                if (item._selected && item._selected._isCorrect) {\n                    numberOfCorrectAnswers++;\n                    item._isCorrect = true;\n                    this.model.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n                    this.model.set('_isAtLeastOneCorrectSelection', true);\n                } else {\n                    item._isCorrect = false;\n                }\n\n            }, this);\n\n            this.model.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n\n            if (numberOfCorrectAnswers === this.model.get('_items').length) {\n                return true;\n            } else {\n                return false;\n            }\n\n        },\n\n        setScore: function() {\n            var questionWeight = this.model.get(\"_questionWeight\");\n\n            if (this.model.get('_isCorrect')) {\n                this.model.set('_score', questionWeight);\n                return;\n            }\n\n            var numberOfCorrectAnswers = this.model.get('_numberOfCorrectAnswers');\n            var itemLength = this.model.get('_items').length;\n\n            var score = questionWeight * numberOfCorrectAnswers / itemLength;\n\n            this.model.set('_score', score);\n        },\n\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            _.each(this.model.get('_items'), function(item, i) {\n\n                var $item = this.$('.matching-item').eq(i);\n                $item.removeClass('correct incorrect').addClass(item._isCorrect ? 'correct' : 'incorrect');\n            }, this);\n        },\n\n        isPartlyCorrect: function() {\n            return this.model.get('_isAtLeastOneCorrectSelection');\n        },\n\n        resetUserAnswer: function() {\n            this.model.set({_userAnswer: []});\n        },\n\n        resetQuestion: function() {\n            this.$('.matching-select option').prop('selected', false);\n            \n            this.$(\".matching-item\").removeClass(\"correct\").removeClass(\"incorrect\");\n            \n            this.model.set('_isAtLeastOneCorrectSelection', false);\n            \n            var placeholder = this.model.get('placeholder');\n            \n            _.each(this.model.get(\"_items\"), function(item, index) {\n                this.selectValue(index, placeholder);\n                _.each(item._options, function(option, index) {\n                    option._isSelected = false;\n                });\n            }, this);\n        },\n\n        showCorrectAnswer: function() {\n            var items = this.model.get('_items');\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                var correctOption = _.findWhere(item._options, {_isCorrect: true});\n                this.selectValue(i, correctOption.text);\n            }\n        },\n\n        hideCorrectAnswer: function() {\n            var items = this.model.get('_items');\n            for (var i = 0, count = items.length; i < count; i++) {\n                var index = this.model.has('_tempUserAnswer') ? \n                    this.model.get('_tempUserAnswer')[i] :\n                    this.model.get('_userAnswer')[i];\n\n                var item = items[i];\n                var value = item._options[index].text;\n\n                this.selectValue(i, value);\n            }\n        },\n\n        selectValue: function(i, value) {\n            value = $.trim(value);// select2 strips leading/trailing spaces so we need to as well - fixes https://github.com/adaptlearning/adapt_framework/issues/1503\n            this.$('select').eq(i).val(value).trigger('change');\n        },\n\n        /**\n        * Used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\n        * Returns the user's answers as a string in the format \"1.1#2.3#3.2\" assuming user selected option 1 in drop-down 1, option 3 in drop-down 2\n        * and option 2 in drop-down 3. The '#' character will be changed to either ',' or '[,]' by adapt-contrib-spoor, depending on which SCORM version is being used.\n        */\n        getResponse: function() {\n\n            var userAnswer = this.model.get('_userAnswer');\n            var responses = [];\n\n            for(var i = 0, count = userAnswer.length; i < count; i++) {\n                responses.push((i + 1) + \".\" + (userAnswer[i] + 1));// convert from 0-based to 1-based counting\n            }\n            \n            return responses.join('#');\n        },\n\n        /**\n        * Used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\n        */\n        getResponseType: function() {\n            return \"matching\";\n        }\n\n    });\n\n    Adapt.register(\"matching\", Matching);\n\n    return Matching;\n\n});\n\n",
    "define('components/adapt-contrib-media/js/adapt-contrib-media',[\n    'core/js/adapt',\n    'core/js/views/componentView',\n    'libraries/mediaelement-and-player',\n    'libraries/mediaelement-and-player-accessible-captions',\n    'libraries/mediaelement-fullscreen-hook'\n], function(Adapt, ComponentView) {\n\n    var froogaloopAdded = false;\n\n    // The following function is used to to prevent a memory leak in Internet Explorer\n    // See: http://javascript.crockford.com/memory/leak.html\n    function purge(d) {\n        var a = d.attributes, i, l, n;\n        if (a) {\n            for (i = a.length - 1; i >= 0; i -= 1) {\n                n = a[i].name;\n                if (typeof d[n] === 'function') {\n                    d[n] = null;\n                }\n            }\n        }\n        a = d.childNodes;\n        if (a) {\n            l = a.length;\n            for (i = 0; i < l; i += 1) {\n                purge(d.childNodes[i]);\n            }\n        }\n    }\n\n    var Media = ComponentView.extend({\n\n        events: {\n            \"click .media-inline-transcript-button\": \"onToggleInlineTranscript\",\n            \"click .media-external-transcript-button\": \"onExternalTranscriptClicked\"\n        },\n\n        preRender: function() {\n            this.listenTo(Adapt, {\n                'device:resize': this.onScreenSizeChanged,\n                'device:changed': this.onDeviceChanged,\n                'accessibility:toggle': this.onAccessibilityToggle,\n                'media:stop': this.onMediaStop\n            });\n\n            _.bindAll(this, 'onMediaElementPlay', 'onMediaElementPause', 'onMediaElementEnded', 'onMediaElementTimeUpdate', 'onMediaElementSeeking');\n\n            // set initial player state attributes\n            this.model.set({\n                '_isMediaEnded': false,\n                '_isMediaPlaying': false\n            });\n\n            if (this.model.get('_media').source) {\n                // Remove the protocol for streaming service.\n                // This prevents conflicts with HTTP/HTTPS\n                var media = this.model.get('_media');\n\n                media.source = media.source.replace(/^https?\\:/, \"\");\n\n                this.model.set('_media', media); \n            }\n\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setupPlayer();\n        },\n\n        setupPlayer: function() {\n            if (!this.model.get('_playerOptions')) this.model.set('_playerOptions', {});\n\n            var modelOptions = this.model.get('_playerOptions');\n\n            if (modelOptions.pluginPath === undefined) modelOptions.pluginPath = 'assets/';\n            if(modelOptions.features === undefined) {\n                modelOptions.features = ['playpause','progress','current','duration'];\n                if (this.model.get('_useClosedCaptions')) {\n                    modelOptions.features.unshift('tracks');\n                }\n                if (this.model.get(\"_allowFullScreen\") && !$(\"html\").is(\".ie9\")) {\n                    modelOptions.features.push('fullscreen');\n                }\n                if (this.model.get('_showVolumeControl')) {\n                    modelOptions.features.push('volume');\n                }\n            }\n\n            modelOptions.success = _.bind(this.onPlayerReady, this);\n\n            if (this.model.get('_useClosedCaptions')) {\n                modelOptions.startLanguage = this.model.get('_startLanguage') === undefined ? 'en' : this.model.get('_startLanguage');\n            }\n\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive\n                ? true\n                : false;\n\n            if (hasAccessibility) {\n                modelOptions.alwaysShowControls = true;\n                modelOptions.hideVideoControlsOnLoad = false;\n            }\n\n            if (modelOptions.alwaysShowControls === undefined) {\n                modelOptions.alwaysShowControls = false;\n            }\n            if (modelOptions.hideVideoControlsOnLoad === undefined) {\n                modelOptions.hideVideoControlsOnLoad = true;\n            }\n\n            this.addMediaTypeClass();\n\n            this.addThirdPartyFixes(modelOptions, _.bind(function createPlayer() {\n                // create the player\n                this.$('audio, video').mediaelementplayer(modelOptions);\n\n                // We're streaming - set ready now, as success won't be called above\n                try {\n                    if (this.model.get('_media').source) {\n                        this.$('.media-widget').addClass('external-source');\n                    }\n                } catch (e) {\n                    console.log(\"ERROR! No _media property found in components.json for component \" + this.model.get('_id'));\n                } finally {\n                    this.setReadyStatus();\n                }\n            }, this));\n        },\n\n        addMediaTypeClass: function() {\n            var media = this.model.get(\"_media\");\n            if (media && media.type) {\n                var typeClass = media.type.replace(/\\//, \"-\");\n                this.$(\".media-widget\").addClass(typeClass);\n            }\n        },\n\n        addThirdPartyFixes: function(modelOptions, callback) {\n            var media = this.model.get(\"_media\");\n            if (!media) return callback();\n\n            switch (media.type) {\n                case \"video/vimeo\":\n                    modelOptions.alwaysShowControls = false;\n                    modelOptions.hideVideoControlsOnLoad = true;\n                    modelOptions.features = [];\n                    if (froogaloopAdded) return callback();\n                    Modernizr.load({\n                        load: \"assets/froogaloop.js\",\n                        complete: function() {\n                            froogaloopAdded = true;\n                            callback();\n                        }\n                    });\n                    break;\n                default:\n                    callback();\n            }\n        },\n\n        setupEventListeners: function() {\n            this.completionEvent = (!this.model.get('_setCompletionOn')) ? 'play' : this.model.get('_setCompletionOn');\n\n            if (this.completionEvent === 'inview') {\n                this.$('.component-widget').on('inview', _.bind(this.inview, this));\n            }\n\n            // wrapper to check if preventForwardScrubbing is turned on.\n            if ((this.model.get('_preventForwardScrubbing')) && (!this.model.get('_isComplete'))) {\n                $(this.mediaElement).on({\n                    'seeking': this.onMediaElementSeeking,\n                    'timeupdate': this.onMediaElementTimeUpdate\n                });\n            }\n            \n            // handle other completion events in the event Listeners \n            $(this.mediaElement).on({\n            \t'play': this.onMediaElementPlay,\n            \t'pause': this.onMediaElementPause,\n            \t'ended': this.onMediaElementEnded\n            });\n        },\n\n        onMediaElementPlay: function(event) {\n\n            Adapt.trigger(\"media:stop\", this);\n\n            this.model.set({\n                '_isMediaPlaying': true,\n                '_isMediaEnded': false\n            });\n            \n            if (this.completionEvent === 'play') {\n                this.setCompletionStatus();\n            }\n        },\n\n        onMediaElementPause: function(event) {\n            this.model.set('_isMediaPlaying', false);\n        },\n\n        onMediaElementEnded: function(event) {\n            this.model.set('_isMediaEnded', true);\n\n            if (this.completionEvent === 'ended') {\n                this.setCompletionStatus();\n            }\n        },\n        \n        onMediaElementSeeking: function(event) {\n            var maxViewed = this.model.get(\"_maxViewed\");\n            if(!maxViewed) {\n                maxViewed = 0;\n            }\n            if (event.target.currentTime > maxViewed) {\n                event.target.currentTime = maxViewed;\n            }\n        },\n\n        onMediaElementTimeUpdate: function(event) {\n            var maxViewed = this.model.get(\"_maxViewed\");\n            if (!maxViewed) {\n                maxViewed = 0;\n            }\n            if (event.target.currentTime > maxViewed) {\n                this.model.set(\"_maxViewed\", event.target.currentTime);\n            }\n        },\n\n        // Overrides the default play/pause functionality to stop accidental playing on touch devices\n        setupPlayPauseToggle: function() {\n            // bit sneaky, but we don't have a this.mediaElement.player ref on iOS devices\n            var player = this.mediaElement.player;\n\n            if (!player) {\n                console.log(\"Media.setupPlayPauseToggle: OOPS! there's no player reference.\");\n                return;\n            }\n\n            // stop the player dealing with this, we'll do it ourselves\n            player.options.clickToPlayPause = false;\n\n            this.onOverlayClick = _.bind(this.onOverlayClick, this);\n            this.onMediaElementClick = _.bind(this.onMediaElementClick, this);\n\n            // play on 'big button' click\n            this.$('.mejs-overlay-button').on(\"click\", this.onOverlayClick);\n\n            // pause on player click\n            this.$('.mejs-mediaelement').on(\"click\", this.onMediaElementClick);\n        },\n        \n        onMediaStop: function(view) {\n\n            // Make sure this view isn't triggering media:stop\n            if (view && view.cid === this.cid) return;\n\n            var player = this.mediaElement.player;\n            if (!player) return;\n            \n            player.pause();\n        },\n\n        onOverlayClick: function() {\n            var player = this.mediaElement.player;\n            if (!player) return;\n\n            player.play();\n        },\n\n        onMediaElementClick: function(event) {\n            var player = this.mediaElement.player;\n            if (!player) return;\n\n            var isPaused = player.media.paused;\n            if(!isPaused) player.pause();\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-inner').off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        remove: function() {\n            this.$('.mejs-overlay-button').off(\"click\", this.onOverlayClick);\n            this.$('.mejs-mediaelement').off(\"click\", this.onMediaElementClick);\n\n            var modelOptions = this.model.get('_playerOptions');\n            delete modelOptions.success;\n\n            var media = this.model.get(\"_media\");\n            if (media) {\n                switch (media.type) {\n                case \"video/vimeo\":\n                    this.$(\"iframe\")[0].isRemoved = true;\n                }\n            }\n\n            if ($(\"html\").is(\".ie8\")) {\n                var obj = this.$(\"object\")[0];\n                if (obj) {\n                    obj.style.display = \"none\";\n                }\n            }\n            if (this.mediaElement && this.mediaElement.player) {\n                var player_id = this.mediaElement.player.id;\n\n                purge(this.$el[0]);\n                this.mediaElement.player.remove();\n\n                if (mejs.players[player_id]) {\n                    delete mejs.players[player_id];\n                }\n            }\n\n            if (this.mediaElement) {\n                $(this.mediaElement).off({\n                    'play': this.onMediaElementPlay,\n                    'pause': this.onMediaElementPause,\n                    'ended': this.onMediaElementEnded,\n                    'seeking': this.onMediaElementSeeking,\n                    'timeupdate': this.onMediaElementTimeUpdate\n                });\n\n                this.mediaElement.src = \"\";\n                $(this.mediaElement.pluginElement).remove();\n                delete this.mediaElement;\n            }\n\n            ComponentView.prototype.remove.call(this);\n        },\n\n        onDeviceChanged: function() {\n            if (this.model.get('_media').source) {\n                this.$('.mejs-container').width(this.$('.component-widget').width());\n            }\n        },\n\n        onPlayerReady: function (mediaElement, domObject) {\n            this.mediaElement = mediaElement;\n\n            if (!this.mediaElement.player) {\n                this.mediaElement.player =  mejs.players[this.$('.mejs-container').attr('id')];\n            }\n\n            var hasTouch = mejs.MediaFeatures.hasTouch;\n            if (hasTouch) {\n                this.setupPlayPauseToggle();\n            }\n\n            this.addThirdPartyAfterFixes();\n\n            if(this.model.has('_startVolume')) {\n                // Setting the start volume only works with the Flash-based player if you do it here rather than in setupPlayer\n                this.mediaElement.player.setVolume(parseInt(this.model.get('_startVolume'))/100);\n            }\n\n            this.setReadyStatus();\n            this.setupEventListeners();\n        },\n\n        addThirdPartyAfterFixes: function() {\n            var media = this.model.get(\"_media\");\n            switch (media.type) {\n            case \"video/vimeo\":\n                this.$(\".mejs-container\").attr(\"tabindex\", 0);\n            }\n        },\n\n        onScreenSizeChanged: function() {\n            this.$('audio, video').width(this.$('.component-widget').width());\n        },\n\n        onAccessibilityToggle: function() {\n           this.showControls();\n        },\n\n        onToggleInlineTranscript: function(event) {\n            if (event) event.preventDefault();\n            var $transcriptBodyContainer = this.$(\".media-inline-transcript-body-container\");\n            var $button = this.$(\".media-inline-transcript-button\");\n\n            if ($transcriptBodyContainer.hasClass(\"inline-transcript-open\")) {\n                $transcriptBodyContainer.stop(true,true).slideUp(function() {\n                    $(window).resize();\n                });\n                $transcriptBodyContainer.removeClass(\"inline-transcript-open\");\n                $button.html(this.model.get(\"_transcript\").inlineTranscriptButton);\n            } else {\n                $transcriptBodyContainer.stop(true,true).slideDown(function() {\n                    $(window).resize();\n                }).a11y_focus();\n                $transcriptBodyContainer.addClass(\"inline-transcript-open\");\n                $button.html(this.model.get(\"_transcript\").inlineTranscriptCloseButton);\n\n                if (this.model.get('_transcript')._setCompletionOnView !== false) {\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        onExternalTranscriptClicked: function(event) {\n            if (this.model.get('_transcript')._setCompletionOnView !== false) {\n                this.setCompletionStatus();\n            }\n        },\n\n        showControls: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive\n                ? true\n                : false;\n\n            if (hasAccessibility) {\n                if (!this.mediaElement.player) return;\n\n                var player = this.mediaElement.player;\n\n                player.options.alwaysShowControls = true;\n                player.options.hideVideoControlsOnLoad = false;\n                player.enableControls();\n                player.showControls();\n\n                this.$('.mejs-playpause-button button').attr({\n                    \"role\": \"button\"\n                });\n                var screenReaderVideoTagFix = $(\"<div role='region' aria-label='.'>\");\n                this.$('.mejs-playpause-button').prepend(screenReaderVideoTagFix);\n\n                this.$('.mejs-time, .mejs-time-rail').attr({\n                    \"aria-hidden\": \"true\"\n                });\n            }\n        }\n\n    });\n\n    Adapt.register('media', Media);\n\n    return Media;\n\n});\n\n",
    "define('components/adapt-contrib-narrative/js/adapt-contrib-narrative',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Narrative = ComponentView.extend({\n\n        events: {\n            'click .narrative-strapline-title': 'openPopup',\n            'click .narrative-controls': 'onNavigationClicked',\n            'click .narrative-indicators .narrative-progress': 'onProgressClicked'\n        },\n\n        preRender: function() {\n            this.listenTo(Adapt, 'device:changed', this.reRender, this);\n            this.listenTo(Adapt, 'device:resize', this.resizeControl, this);\n            this.listenTo(Adapt, 'notify:closed', this.closeNotify, this);\n            this.setDeviceSize();\n\n            // Checks to see if the narrative should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        setDeviceSize: function() {\n            if (Adapt.device.screenSize === 'large') {\n                this.$el.addClass('desktop').removeClass('mobile');\n                this.model.set('_isDesktop', true);\n            } else {\n                this.$el.addClass('mobile').removeClass('desktop');\n                this.model.set('_isDesktop', false)\n            }\n        },\n\n        postRender: function() {\n            this.renderState();\n            this.$('.narrative-slider').imageready(_.bind(function() {\n                this.setReadyStatus();\n            }, this));\n            this.setupNarrative();\n        },\n\n        // Used to check if the narrative should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n                this.model.set({_stage: 0});\n\n                _.each(this.model.get('_items'), function(item) {\n                    item._isVisited = false;\n                });\n            }\n        },\n\n        setupNarrative: function() {\n            this.setDeviceSize();\n            if(!this.model.has('_items') || !this.model.get('_items').length) return;\n            this.model.set('_marginDir', 'left');\n            if (Adapt.config.get('_defaultDirection') == 'rtl') {\n                this.model.set('_marginDir', 'right');\n            }\n            this.model.set('_itemCount', this.model.get('_items').length);\n\n            this.model.set('_active', true);\n\n            if (this.model.get('_stage')) {\n                this.setStage(this.model.get('_stage'), true);\n            } else {\n                this.setStage(0, true);\n            }\n            this.calculateWidths();\n\n            if (Adapt.device.screenSize !== 'large' && !this.model.get('_wasHotgraphic')) {\n                this.replaceInstructions();\n            }\n            this.setupEventListeners();\n        },\n\n        calculateWidths: function() {\n            var slideWidth = this.$('.narrative-slide-container').width();\n            var slideCount = this.model.get('_itemCount');\n            var marginRight = this.$('.narrative-slider-graphic').css('margin-right');\n            var extraMargin = marginRight === '' ? 0 : parseInt(marginRight);\n            var fullSlideWidth = (slideWidth + extraMargin) * slideCount;\n\n            this.$('.narrative-slider-graphic').width(slideWidth);\n            this.$('.narrative-strapline-header').width(slideWidth);\n            this.$('.narrative-strapline-title').width(slideWidth);\n\n            this.$('.narrative-slider').width(fullSlideWidth);\n            this.$('.narrative-strapline-header-inner').width(fullSlideWidth);\n\n            var stage = this.model.get('_stage');\n            var margin = -(stage * slideWidth);\n\n            this.$('.narrative-slider').css(('margin-' + this.model.get('_marginDir')), margin);\n            this.$('.narrative-strapline-header-inner').css(('margin-' + this.model.get('_marginDir')), margin);\n\n            this.model.set('_finalItemLeft', fullSlideWidth - slideWidth);\n        },\n\n        resizeControl: function() {\n            var wasDesktop = this.model.get('_isDesktop');\n            this.setDeviceSize();\n            if (wasDesktop != this.model.get('_isDesktop')) this.replaceInstructions();\n            this.calculateWidths();\n            this.evaluateNavigation();\n        },\n\n        reRender: function() {\n            if (this.model.get('_wasHotgraphic') && Adapt.device.screenSize == 'large') {\n                this.replaceWithHotgraphic();\n            } else {\n                this.resizeControl();\n            }\n        },\n\n        closeNotify: function() {\n            this.evaluateCompletion()\n        },\n\n        replaceInstructions: function() {\n            if (Adapt.device.screenSize === 'large') {\n                this.$('.narrative-instruction-inner').html(this.model.get('instruction')).a11y_text();\n            } else if (this.model.get('mobileInstruction') && !this.model.get('_wasHotgraphic')) {\n                this.$('.narrative-instruction-inner').html(this.model.get('mobileInstruction')).a11y_text();\n            }\n        },\n\n        replaceWithHotgraphic: function() {\n            if (!Adapt.componentStore.hotgraphic) throw \"Hotgraphic not included in build\";\n            var Hotgraphic = Adapt.componentStore.hotgraphic;\n            \n            var model = this.prepareHotgraphicModel();\n            var newHotgraphic = new Hotgraphic({ model: model });\n            var $container = $(\".component-container\", $(\".\" + this.model.get(\"_parentId\")));\n\n            $container.append(newHotgraphic.$el);\n            this.remove();\n            $.a11y_update();\n            _.defer(function() {\n                Adapt.trigger('device:resize');\n            });\n        },\n\n        prepareHotgraphicModel: function() {\n            var model = this.model;\n            model.set('_component', 'hotgraphic');\n            model.set('body', model.get('originalBody'));\n            model.set('instruction', model.get('originalInstruction'));\n            return model;\n        },\n\n        moveSliderToIndex: function(itemIndex, animate, callback) {\n            var extraMargin = parseInt(this.$('.narrative-slider-graphic').css('margin-right'));\n            var movementSize = this.$('.narrative-slide-container').width() + extraMargin;\n            var marginDir = {};\n            if (animate && !Adapt.config.get('_disableAnimation')) {\n                marginDir['margin-' + this.model.get('_marginDir')] = -(movementSize * itemIndex);\n                this.$('.narrative-slider').velocity(\"stop\", true).velocity(marginDir);\n                this.$('.narrative-strapline-header-inner').velocity(\"stop\", true).velocity(marginDir, {complete:callback});\n            } else {\n                marginDir['margin-' + this.model.get('_marginDir')] = -(movementSize * itemIndex);\n                this.$('.narrative-slider').css(marginDir);\n                this.$('.narrative-strapline-header-inner').css(marginDir);\n                callback();\n            }\n        },\n\n        setStage: function(stage, initial) {\n            this.model.set('_stage', stage);\n            if (this.model.get('_isDesktop')) {\n                // Set the visited attribute for large screen devices\n                var currentItem = this.getCurrentItem(stage);\n                currentItem._isVisited = true;\n            }\n\n            this.$('.narrative-progress:visible').removeClass('selected').eq(stage).addClass('selected');\n            this.$('.narrative-slider-graphic').children('.controls').a11y_cntrl_enabled(false);\n            this.$('.narrative-slider-graphic').eq(stage).children('.controls').a11y_cntrl_enabled(true);\n            this.$('.narrative-content-item').addClass('narrative-hidden').a11y_on(false).eq(stage).removeClass('narrative-hidden').a11y_on(true);\n            this.$('.narrative-strapline-title').a11y_cntrl_enabled(false).eq(stage).a11y_cntrl_enabled(true);\n\n            this.evaluateNavigation();\n            this.evaluateCompletion();\n\n            this.moveSliderToIndex(stage, !initial, _.bind(function() {\n                if (this.model.get('_isDesktop')) {\n                    if (!initial) this.$('.narrative-content-item').eq(stage).a11y_focus();\n                } else {\n                    if (!initial) this.$('.narrative-strapline-title').a11y_focus();\n                }\n            }, this));\n        },\n\n        constrainStage: function(stage) {\n            if (stage > this.model.get('_items').length - 1) {\n                stage = this.model.get('_items').length - 1;\n            } else if (stage < 0) {\n                stage = 0;\n            }\n            return stage;\n        },\n\n        constrainXPosition: function(previousLeft, newLeft, deltaX) {\n            if (newLeft > 0 && deltaX > 0) {\n                newLeft = previousLeft + (deltaX / (newLeft * 0.1));\n            }\n            var finalItemLeft = this.model.get('_finalItemLeft');\n            if (newLeft < -finalItemLeft && deltaX < 0) {\n                var distance = Math.abs(newLeft + finalItemLeft);\n                newLeft = previousLeft + (deltaX / (distance * 0.1));\n            }\n            return newLeft;\n        },\n\n        evaluateNavigation: function() {\n            var currentStage = this.model.get('_stage');\n            var itemCount = this.model.get('_itemCount');\n            if (currentStage == 0) {\n                this.$('.narrative-controls').addClass('narrative-hidden');\n\n                if (itemCount > 1) {\n                    this.$('.narrative-control-right').removeClass('narrative-hidden');\n                }\n            } else {\n                this.$('.narrative-control-left').removeClass('narrative-hidden');\n\n                if (currentStage == itemCount - 1) {\n                    this.$('.narrative-control-right').addClass('narrative-hidden');\n                } else {\n                    this.$('.narrative-control-right').removeClass('narrative-hidden');\n                }\n            }\n\n        },\n\n        getNearestItemIndex: function() {\n            var currentPosition = parseInt(this.$('.narrative-slider').css('margin-left'));\n            var graphicWidth = this.$('.narrative-slider-graphic').width();\n            var absolutePosition = currentPosition / graphicWidth;\n            var stage = this.model.get('_stage');\n            var relativePosition = stage - Math.abs(absolutePosition);\n\n            if (relativePosition < -0.3) {\n                stage++;\n            } else if (relativePosition > 0.3) {\n                stage--;\n            }\n\n            return this.constrainStage(stage);\n        },\n\n        getCurrentItem: function(index) {\n            return this.model.get('_items')[index];\n        },\n\n        getVisitedItems: function() {\n            return _.filter(this.model.get('_items'), function(item) {\n                return item._isVisited;\n            });\n        },\n\n        evaluateCompletion: function() {\n            if (this.getVisitedItems().length === this.model.get('_items').length) {\n                this.trigger('allItems');\n            } \n        },\n\n        moveElement: function($element, deltaX) {\n            var previousLeft = parseInt($element.css('margin-left'));\n            var newLeft = previousLeft + deltaX;\n\n            newLeft = this.constrainXPosition(previousLeft, newLeft, deltaX);\n            $element.css(('margin-' + this.model.get('_marginDir')), newLeft + 'px');\n        },\n\n        openPopup: function(event) {\n            event.preventDefault();\n            var currentItem = this.getCurrentItem(this.model.get('_stage'));\n            var popupObject = {\n                title: currentItem.title,\n                body: currentItem.body\n            };\n\n            // Set the visited attribute for small and medium screen devices\n            currentItem._isVisited = true;\n\n            Adapt.trigger('notify:popup', popupObject);\n        },\n\n        onNavigationClicked: function(event) {\n\n            if (!this.model.get('_active')) return;\n\n            var stage = this.model.get('_stage');\n            var numberOfItems = this.model.get('_itemCount');\n\n            if ($(event.currentTarget).hasClass('narrative-control-right')) {\n                stage++;\n            } else if ($(event.currentTarget).hasClass('narrative-control-left')) {\n                stage--;\n            }\n            stage = (stage + numberOfItems) % numberOfItems;\n            this.setStage(stage);\n        },\n        \n        onProgressClicked: function(event) {\n            event.preventDefault();\n            var clickedIndex = $(event.target).index();\n            this.setStage(clickedIndex);\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-inner').off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        onCompletion: function() {\n            this.setCompletionStatus();\n            if (this.completionEvent && this.completionEvent != 'inview') {\n                this.off(this.completionEvent, this);\n            }\n        },\n\n        setupEventListeners: function() {\n            this.completionEvent = (!this.model.get('_setCompletionOn')) ? 'allItems' : this.model.get('_setCompletionOn');\n            if (this.completionEvent !== 'inview' && this.model.get('_items').length > 1) {\n                this.on(this.completionEvent, _.bind(this.onCompletion, this));\n            } else {\n                this.$('.component-widget').on('inview', _.bind(this.inview, this));\n            }\n        }\n\n    });\n\n    Adapt.register('narrative', Narrative);\n\n    return Narrative;\n\n});\n\n",
    "define('components/adapt-contrib-slider/js/adapt-contrib-slider',[\n    'core/js/views/questionView',\n    'core/js/adapt',\n    'libraries/rangeslider'\n], function(QuestionView, Adapt, Rangeslider) {\n\n    var Slider = QuestionView.extend({\n\n        tempValue: true,\n\n        events: {\n            'click .slider-scale-number': 'onNumberSelected',\n            'focus input[type=\"range\"]': 'onHandleFocus',\n            'blur input[type=\"range\"]': 'onHandleBlur'\n        },\n\n        // Used by the question to reset the question when revisiting the component\n        resetQuestionOnRevisit: function() {\n            this.setAllItemsEnabled();\n            this.deselectAllItems();\n            this.resetQuestion();\n        },\n\n        // Used by question to setup itself just before rendering\n        setupQuestion: function() {\n            if(!this.model.get('_items')) {\n                this.setupModelItems();\n            }\n\n            this.restoreUserAnswers();\n            if (this.model.get('_isSubmitted')) return;\n\n            this.selectItem(0, true);\n        },\n\n        setupRangeslider: function () {\n            this.$sliderScaleMarker = this.$('.slider-scale-marker');\n            this.$slider = this.$('input[type=\"range\"]');\n            if(this.model.has('_scaleStep')) {\n                this.$slider.attr({\"step\": this.model.get('_scaleStep')});\n            }\n\n            this.$slider.rangeslider({\n                polyfill: false,\n                onSlide: _.bind(this.handleSlide, this)\n            });\n            this.oldValue = 0;\n\n            if (this._deferEnable) {\n                this.setAllItemsEnabled();\n            }\n        },\n\n        handleSlide: function (position, value) {\n            if (this.oldValue === value) {\n               return;\n            }\n            var itemIndex = this.getIndexFromValue(value);\n            var pixels = this.mapIndexToPixels(itemIndex);\n            this.selectItem(itemIndex, false);\n            this.animateToPosition(pixels);\n            this.oldValue = value;\n            this.tempValue = true;\n        },\n\n        /**\n         * Returns the number of decimal places in a specified number\n         */\n        getDecimalPlaces: function(num) {\n            return (num.toString().split('.')[1] || []).length;\n        },\n\n        setupModelItems: function() {\n            var items = [];\n            var answer = this.model.get('_correctAnswer');\n            var range = this.model.get('_correctRange');\n            var start = this.model.get('_scaleStart');\n            var end = this.model.get('_scaleEnd');\n            var step = this.model.get('_scaleStep') || 1;\n\n            var dp = this.getDecimalPlaces(step);\n\n            for (var i = start; i <= end; i += step) {\n                if (dp !== 0) {\n                    // Ensure that steps with decimal places are handled correctly.\n                    i = parseFloat(i.toFixed(dp));\n                }\n\n                // Format number\n                if (answer) {\n                    items.push({value: i, selected: false, correct: (i == answer)});\n                } else {\n                    items.push({value: i, selected: false, correct: (i >= range._bottom && i <= range._top)});\n                }\n            }\n\n            this.model.set('_items', items);\n            this.model.set('_marginDir', (Adapt.config.get('_defaultDirection') === 'rtl' ? 'right' : 'left'));\n        },\n\n        restoreUserAnswers: function() {\n            if (!this.model.get('_isSubmitted')) {\n                this.model.set({\n                    _selectedItem: {},\n                    _userAnswer: undefined\n                });\n                return;\n            }\n\n            var items = this.model.get('_items');\n            var userAnswer = this.model.get('_userAnswer');\n            for (var i = 0, l = items.length; i < l; i++) {\n                var item = items[i];\n                if (item.value == userAnswer) {\n                    this.model.set('_selectedItem', item);\n                    this.selectItem(this.getIndexFromValue(item.value), true);\n                    break;\n                }\n            }\n\n            this.setQuestionAsSubmitted();\n            this.markQuestion();\n            this.setScore();\n            this.showMarking();\n            this.setupFeedback();\n        },\n\n        // Used by question to disable the question during submit and complete stages\n        disableQuestion: function() {\n            this.setAllItemsEnabled();\n        },\n\n        // Used by question to enable the question during interactions\n        enableQuestion: function() {\n            this.setAllItemsEnabled();\n        },\n\n        setAllItemsEnabled: function() {\n            var isEnabled = this.model.get('_isEnabled');\n\n            if (this.$slider) {\n                if (isEnabled) {\n                    this.$('.slider-widget').removeClass('disabled');\n                    this.$slider.prop('disabled', false);\n                    this.$slider.rangeslider('update', true);\n\n                } else {\n                    this.$('.slider-widget').addClass('disabled');\n                    this.$slider.prop('disabled', true);\n                    this.$slider.rangeslider('update', true);\n                }\n            } else {\n                this._deferEnable = true; // slider is not yet ready\n            }\n        },\n\n        // Used by question to setup itself just after rendering\n        onQuestionRendered: function() {\n            this.setupRangeslider();\n            this.setScalePositions();\n            this.onScreenSizeChanged();\n            this.showScaleMarker(true);\n            this.listenTo(Adapt, 'device:resize', this.onScreenSizeChanged);\n            this.setAltText(this.model.get('_scaleStart'));\n            this.setReadyStatus();\n        },\n\n        // this should make the slider handle, slider marker and slider bar to animate to give position\n        animateToPosition: function(newPosition) {\n            if (!this.$sliderScaleMarker) return;\n\n                this.$sliderScaleMarker\n                  .velocity('stop')\n                  .velocity({\n                    left: newPosition\n                  }, {\n                    duration: 200,\n                    easing: \"linear\",\n                    mobileHA: false\n                  });\n        },\n\n        // this shoud give the index of item using given slider value\n        getIndexFromValue: function(itemValue) {\n            var scaleStart = this.model.get('_scaleStart'),\n                scaleEnd = this.model.get('_scaleEnd');\n            return Math.round(this.mapValue(itemValue, scaleStart, scaleEnd, 0, this.model.get('_items').length - 1));\n        },\n\n        // this should set given value to slider handle\n        setAltText: function(value) {\n            this.$('.slider-handle').attr('aria-valuenow', value);\n        },\n\n        mapIndexToPixels: function(value, $widthObject) {\n            var numberOfItems = this.model.get('_items').length,\n                width = $widthObject ? $widthObject.width() : this.$('.slider-scaler').width();\n\n            return Math.round(this.mapValue(value, 0, numberOfItems - 1, 0, width));\n        },\n\n        mapPixelsToIndex: function(value) {\n            var numberOfItems = this.model.get('_items').length,\n                width = this.$('.slider-sliderange').width();\n\n            return Math.round(this.mapValue(value, 0, width, 0, numberOfItems - 1));\n        },\n\n        normalise: function(value, low, high) {\n            var range = high - low;\n            return (value - low) / range;\n        },\n\n        mapValue: function(value, inputLow, inputHigh, outputLow, outputHigh) {\n            var normal = this.normalise(value, inputLow, inputHigh);\n            return normal * (outputHigh - outputLow) + outputLow;\n        },\n\n        onHandleFocus: function(event) {\n            event.preventDefault();\n            this.$slider.on('keydown', _.bind(this.onKeyDown, this));\n        },\n\n        onHandleBlur: function(event) {\n            event.preventDefault();\n            this.$slider.off('keydown');\n        },\n\n        onKeyDown: function(event) {\n            if(event.which == 9) return; // tab key\n            event.preventDefault();\n\n            var newItemIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);\n\n            switch (event.which) {\n                case 40: // ↓ down\n                case 37: // ← left\n                    newItemIndex = Math.max(newItemIndex - 1, 0);\n                    break;\n                case 38: // ↑ up\n                case 39: // → right\n                    newItemIndex = Math.min(newItemIndex + 1, this.model.get('_items').length - 1);\n                    break;\n            }\n\n            this.selectItem(newItemIndex);\n            if(typeof newItemIndex == 'number') this.showScaleMarker(true);\n            this.animateToPosition(this.mapIndexToPixels(newItemIndex));\n            this.setSliderValue(this.getValueFromIndex(newItemIndex));\n            this.setAltText(this.getValueFromIndex(newItemIndex));\n        },\n\n        onNumberSelected: function(event) {\n            event.preventDefault();\n            this.tempValue = false;\n\n            if (this.model.get('_isInteractionComplete')) {\n              return;\n            }\n\n            // when component is not reset, selecting a number should be prevented\n            if (this.$slider.prop('disabled')) {\n              return;\n            }\n\n            var itemValue = parseFloat($(event.currentTarget).attr('data-id'));\n            var index = this.getIndexFromValue(itemValue);\n            this.selectItem(index);\n            this.animateToPosition(this.mapIndexToPixels(index));\n            this.setAltText(itemValue);\n            this.setSliderValue(itemValue);\n        },\n\n        getValueFromIndex: function(index) {\n          return this.model.get('_items')[index].value;\n        },\n\n        resetControlStyles: function() {\n            this.$('.slider-handle').empty();\n            this.showScaleMarker(false);\n            this.$('.slider-bar').animate({width:'0px'});\n            this.setSliderValue(this.model.get('_items')[0].value);\n        },\n\n        /**\n        * allow the user to submit immediately; the slider handle may already be in the position they want to choose\n        */\n        canSubmit: function() {\n            return true;\n        },\n\n        // Blank method for question to fill out when the question cannot be submitted\n        onCannotSubmit: function() {},\n\n        //This preserves the state of the users answers for returning or showing the users answer\n        storeUserAnswer: function() {\n            this.model.set('_userAnswer', this.model.get('_selectedItem').value);\n        },\n\n        isCorrect: function() {\n            var numberOfCorrectAnswers = 0;\n\n            _.each(this.model.get('_items'), function(item, index) {\n                if(item.selected && item.correct)  {\n                    this.model.set('_isAtLeastOneCorrectSelection', true);\n                    numberOfCorrectAnswers++;\n                }\n            }, this);\n\n            this.model.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n\n            return this.model.get('_isAtLeastOneCorrectSelection') ? true : false;\n        },\n\n        // Used to set the score based upon the _questionWeight\n        setScore: function() {\n            var numberOfCorrectAnswers = this.model.get('_numberOfCorrectAnswers');\n            var questionWeight = this.model.get('_questionWeight');\n            var score = questionWeight * numberOfCorrectAnswers;\n            this.model.set('_score', score);\n        },\n\n        setSliderValue: function (value) {\n          if (this.$slider) {\n            this.$slider.val(value).change();\n          }\n        },\n\n        // This is important and should give the user feedback on how they answered the question\n        // Normally done through ticks and crosses by adding classes\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            this.$('.slider-widget').removeClass('correct incorrect')\n                .addClass(this.model.get('_selectedItem').correct ? 'correct' : 'incorrect');\n        },\n\n        isPartlyCorrect: function() {\n            return this.model.get('_isAtLeastOneCorrectSelection');\n        },\n\n        // Used by the question view to reset the stored user answer\n        resetUserAnswer: function() {\n            this.model.set({\n                _isAtLeastOneCorrectSelection: false,\n                _selectedItem: {},\n                _userAnswer: undefined\n            });\n        },\n\n        // Used by the question view to reset the look and feel of the component.\n        // This could also include resetting item data\n        resetQuestion: function() {\n            this.selectItem(0, true);\n            this.animateToPosition(0);\n            this.resetControlStyles();\n            this.showScaleMarker(true);\n            this.setAltText(this.model.get('_scaleStart'));\n        },\n\n        setScalePositions: function() {\n            var numberOfItems = this.model.get('_items').length;\n            _.each(this.model.get('_items'), function(item, index) {\n                var normalisedPosition = this.normalise(index, 0, numberOfItems -1);\n                this.$('.slider-scale-number').eq(index).data('normalisedPosition', normalisedPosition);\n            }, this);\n        },\n\n        showScale: function () {\n            var $markers = this.$('.slider-markers').empty();\n            if (this.model.get('_showScale') === false) {\n                $markers.eq(0).css({display: 'none'});\n                this.$('.slider-scale-numbers').eq(0).css(\n                    this.model.get('_showScaleIndicator') ? {visibility: 'hidden'} : {display: 'none'}\n                );\n            } else {\n                var $scaler = this.$('.slider-scaler');\n                for (var i = 0, count = this.model.get('_items').length; i < count; i++) {\n                    $markers.append(\"<div class='slider-line component-item-color'>\");\n                    $markers.find('.slider-line').eq(i).css({left: this.mapIndexToPixels(i, $scaler) + 'px'});\n                }\n                var scaleWidth = $scaler.width();\n                var $numbers = this.$('.slider-scale-number');\n                for (var j = 0, len = this.model.get('_items').length; j < len; j++) {\n                    var $number = $numbers.eq(j);\n                    var newLeft = Math.round($number.data('normalisedPosition') * scaleWidth);\n                    $number.css({left: newLeft});\n                }\n            }\n        },\n\n        //Labels are enabled in slider.hbs. Here we manage their containing div.\n        showLabels: function () {\n            if(!this.model.get('labelStart') && !this.model.get('labelEnd')) {\n                this.$('.slider-scale-labels').eq(0).css({display: 'none'});\n            }\n        },\n\n        remapSliderBar: function() {\n            var $scaler = this.$('.slider-scaler');\n            var currentIndex = this.getIndexFromValue(this.model.get('_selectedItem').value);\n            var left = this.mapIndexToPixels(currentIndex, $scaler);\n            this.$('.slider-handle').css({left: left + 'px'});\n            this.$('.slider-scale-marker').css({left: left + 'px'});\n            this.$('.slider-bar').width(left);\n        },\n\n        onScreenSizeChanged: function() {\n            this.showScale();\n            this.showLabels();\n            this.remapSliderBar();\n            if (this.$('.slider-widget').hasClass('show-user-answer')) {\n                this.hideCorrectAnswer();\n            } else if (this.$('.slider-widget').hasClass('show-correct-answer')) {\n                this.showCorrectAnswer();\n            }\n        },\n\n        showCorrectAnswer: function() {\n            var answers = [];\n\n            if(this.model.has('_correctAnswer')) {\n                var correctAnswer = this.model.get('_correctAnswer');\n            }\n\n            if (this.model.has('_correctRange')) {\n                var bottom = this.model.get('_correctRange')._bottom;\n                var top = this.model.get('_correctRange')._top;\n                var step = (this.model.has('_scaleStep') ? this.model.get('_scaleStep') : 1);\n            }\n\n            this.showScaleMarker(false);\n\n            //are we dealing with a single correct answer or a range?\n            if (correctAnswer) {\n                answers.push(correctAnswer);\n            } else if (bottom !== undefined && top !== undefined) {\n                var answer = this.model.get('_correctRange')._bottom;\n                var topOfRange = this.model.get('_correctRange')._top;\n                while(answer <= topOfRange) {\n                    answers.push(answer);\n                    answer += step;\n                }\n            } else {\n                console.log(\"adapt-contrib-slider::WARNING: no correct answer or correct range set in JSON\");\n            }\n\n            var middleAnswer = answers[Math.floor(answers.length / 2)];\n            this.animateToPosition(this.mapIndexToPixels(this.getIndexFromValue(middleAnswer)));\n\n            this.showModelAnswers(answers);\n\n            this.setSliderValue(middleAnswer);\n        },\n\n        showModelAnswers: function(correctAnswerArray) {\n            var $parentDiv = this.$('.slider-modelranges');\n            _.each(correctAnswerArray, function(correctAnswer, index) {\n                $parentDiv.append($(\"<div class='slider-model-answer component-item-color component-item-text-color'>\"));\n\n                var $element = $(this.$('.slider-modelranges .slider-model-answer')[index]),\n                    startingLeft = this.mapIndexToPixels(this.getIndexFromValue(this.model.get('_selectedItem').value));\n\n                if(this.model.get('_showNumber')) $element.html(correctAnswer);\n\n                $element.css({left:startingLeft}).fadeIn(0, _.bind(function() {\n                    $element.animate({left: this.mapIndexToPixels(this.getIndexFromValue(correctAnswer))});\n                }, this));\n            }, this);\n        },\n\n        // Used by the question to display the users answer and\n        // hide the correct answer\n        // Should use the values stored in storeUserAnswer\n        hideCorrectAnswer: function() {\n            var userAnswerIndex = this.getIndexFromValue(this.model.get('_userAnswer'));\n            this.$('.slider-modelranges').empty();\n\n            this.showScaleMarker(true);\n            this.selectItem(userAnswerIndex, true);\n            this.animateToPosition(this.mapIndexToPixels(userAnswerIndex));\n            this.setSliderValue(this.model.get('_userAnswer'));\n        },\n\n        // according to given item index this should make the item as selected\n        selectItem: function(itemIndex, noFocus) {\n            this.$el.a11y_selected(false);\n            _.each(this.model.get('_items'), function(item, index) {\n                item.selected = (index == itemIndex);\n                if(item.selected) {\n                    this.model.set('_selectedItem', item);\n                    this.$('.slider-scale-number[data-id=\"'+item.value+'\"]').a11y_selected(true, noFocus);\n                }\n            }, this);\n            this.showNumber(true);\n        },\n\n        // this should reset the selected state of each item\n        deselectAllItems: function() {\n            _.each(this.model.get('_items'), function(item) {\n                item.selected = false;\n            }, this);\n        },\n\n        // this makes the marker visible or hidden\n        showScaleMarker: function(show) {\n            var $scaleMarker = this.$('.slider-scale-marker');\n            if (this.model.get('_showScaleIndicator')) {\n                this.showNumber(show);\n                if(show) {\n                    $scaleMarker.addClass('display-block');\n                } else {\n                    $scaleMarker.removeClass('display-block');\n                }\n            }\n        },\n\n        // this should add the current slider value to the marker\n        showNumber: function(show) {\n            var $scaleMarker = this.$('.slider-scale-marker');\n            if(this.model.get('_showNumber')) {\n                if(show) {\n                    $scaleMarker.html(this.model.get('_selectedItem').value);\n                } else {\n                    $scaleMarker.html = \"\";\n                }\n            }\n        },\n\n        /**\n        * Used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\n        */\n        getResponse:function() {\n            return this.model.get('_userAnswer').toString();\n        },\n\n        /**\n        * Used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\n        */\n        getResponseType:function() {\n            return \"numeric\";\n        }\n\n    });\n\n    Adapt.register('slider', Slider);\n\n    return Slider;\n});\n\n",
    "define('components/adapt-contrib-text/js/adapt-contrib-text',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Text = ComponentView.extend({\n\n        preRender: function() {\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n\n            this.setupInview();\n        },\n\n        setupInview: function() {\n            var selector = this.getInviewElementSelector();\n\n            if (!selector) {\n                this.setCompletionStatus();\n            } else {\n                this.model.set('inviewElementSelector', selector);\n                this.$(selector).on('inview', _.bind(this.inview, this));\n            }\n        },\n\n        /**\n         * determines which element should be used for inview logic - body, instruction or title - and returns the selector for that element\n         */\n        getInviewElementSelector: function() {\n            if(this.model.get('body')) return '.component-body';\n\n            if(this.model.get('instruction')) return '.component-instruction';\n            \n            if(this.model.get('displayTitle')) return '.component-title';\n\n            return null;\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$(this.model.get('inviewElementSelector')).off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        remove: function() {\n            if(this.model.has('inviewElementSelector')) {\n                this.$(this.model.get('inviewElementSelector')).off('inview');\n            }\n            \n            ComponentView.prototype.remove.call(this);\n        }\n    },\n    {\n        template: 'text'\n    });\n\n    Adapt.register('text', Text);\n\n    return Text;\n});\n\n",
    "define('components/adapt-contrib-textInput/js/adapt-contrib-textInput',['require','coreViews/questionView','coreJS/adapt'],function(require) {\n    var QuestionView = require('coreViews/questionView');\n    var Adapt = require('coreJS/adapt');\n\n    var genericAnswerIndexOffset = 65536;\n\n    var TextInput = QuestionView.extend({\n        events: {\n            \"focus input\":\"clearValidationError\"\n        },\n\n        resetQuestionOnRevisit: function() {\n            this.setAllItemsEnabled(false);\n            this.resetQuestion();\n        },\n\n        setupQuestion: function() {\n            this.model.set( '_genericAnswerIndexOffset', genericAnswerIndexOffset );\n            this.setupItemIndexes();\n            this.restoreUserAnswer();\n\n            this.setupRandomisation();\n        },\n\n        setupRandomisation: function() {\n            if (this.model.get('_isRandom') && this.model.get('_isEnabled')) {\n                this.model.set(\"_items\", _.shuffle(this.model.get(\"_items\")));\n            }\n        },\n\n        setupItemIndexes: function() {\n            \n            _.each(this.model.get('_items'), function(item, index) {\n\n                if (item._index === undefined) item._index = index;\n                if (item._answerIndex === undefined) item._answerIndex = -1;\n\n            });\n\n        },\n\n        restoreUserAnswer: function() {\n            if (!this.model.get(\"_isSubmitted\")) return;\n\n            var userAnswer = this.model.get(\"_userAnswer\");\n            var genericAnswers = this.model.get(\"_answers\");\n            _.each(this.model.get(\"_items\"), function(item) {\n                var answerIndex = userAnswer[item._index];\n                if (answerIndex >= genericAnswerIndexOffset) {\n                    item.userAnswer = genericAnswers[answerIndex - genericAnswerIndexOffset];\n                    item._answerIndex = answerIndex;\n                } else if (answerIndex > -1) {\n                    item.userAnswer = item._answers[answerIndex];\n                    item._answerIndex = answerIndex;\n                } else {\n                    if (item.userAnswer === undefined) item.userAnswer = \"******\";\n                    item._answerIndex = -1;\n                }\n                if (item.userAnswer instanceof Array) item.userAnswer = item.userAnswer[0];\n            });\n\n            this.setQuestionAsSubmitted();\n            this.markQuestion();\n            this.setScore();\n            this.showMarking();\n            this.setupFeedback();\n        },  \n\n        disableQuestion: function() {\n            this.setAllItemsEnabled(false);\n        },\n\n        enableQuestion: function() {\n            this.setAllItemsEnabled(true);\n        },\n\n        setAllItemsEnabled: function(isEnabled) {\n            _.each(this.model.get('_items'), function(item, index) {\n                var $itemInput = this.$('input').eq(index);\n\n                if (isEnabled) {\n                    $itemInput.prop('disabled', false);\n                } else {\n                    $itemInput.prop('disabled', true);\n                }\n            }, this);\n        },\n\n        onQuestionRendered: function() {\n            this.setReadyStatus();\n        },\n\n        clearValidationError: function() {\n            this.$(\".textinput-item-textbox\").removeClass(\"textinput-validation-error\");\n        },\n\n        // Use to check if the user is allowed to submit the question\n        canSubmit: function() {\n            var canSubmit = true;\n            this.$(\".textinput-item-textbox\").each(function() {\n                if ($(this).val() == \"\") {\n                    canSubmit = false;\n                }\n            });\n            return canSubmit;\n        },\n\n        // Blank method for question to fill out when the question cannot be submitted\n        onCannotSubmit: function() {\n            this.showValidationError();\n        },\n\n        showValidationError: function() {\n            this.$(\".textinput-item-textbox\").addClass(\"textinput-validation-error\");\n        },\n\n        //This preserve the state of the users answers for returning or showing the users answer\n        storeUserAnswer: function() {\n            var items = this.model.get('_items');\n            _.each(items, function(item, index) {\n                item.userAnswer = this.$('.textinput-item-textbox').eq(index).val();\n            }, this);\n\n            this.isCorrect();\n\n            var userAnswer = new Array( items.length );\n            _.each(items, function(item, index) {\n                userAnswer[ item._index ] = item._answerIndex;\n            });\n            this.model.set(\"_userAnswer\", userAnswer);\n        },\n\n        isCorrect: function() {\n            if(this.model.get('_answers')) this.markGenericAnswers();\n            else this.markSpecificAnswers();\n            // do we have any _isCorrect == false?\n            return !_.contains(_.pluck(this.model.get(\"_items\"),\"_isCorrect\"), false);\n        },\n\n        // Allows the learner to give answers into any input, ignoring the order.\n        // (this excludes any inputs which have their own specific answers).\n        markGenericAnswers: function() {\n            var numberOfCorrectAnswers = 0;\n            var correctAnswers = this.model.get('_answers').slice();\n            var usedAnswerIndexes = [];\n            _.each(this.model.get('_items'), function(item, itemIndex) {\n                _.each(correctAnswers, function(answerGroup, answerIndex) {\n                    if(this.checkAnswerIsCorrect(answerGroup, item.userAnswer)) {\n                        if (_.indexOf(usedAnswerIndexes, answerIndex) > -1) return;\n                        usedAnswerIndexes.push(answerIndex);\n                        item._isCorrect = true;\n                        item._answerIndex = answerIndex + genericAnswerIndexOffset;\n                        numberOfCorrectAnswers++;\n                        this.model.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n                        this.model.set('_isAtLeastOneCorrectSelection', true);\n                    }\n                }, this);\n                if(!item._isCorrect) item._isCorrect = false;\n            }, this);\n        },\n\n        // Marks any items which have answers specific to it\n        // (i.e. item has a _answers array)\n        markSpecificAnswers: function() {\n            var numberOfCorrectAnswers = 0;\n            var numberOfSpecificAnswers = 0;\n            _.each(this.model.get('_items'), function(item, index) {\n                if(!item._answers) return;\n                var userAnswer = item.userAnswer || \"\"; \n                if (this.checkAnswerIsCorrect(item[\"_answers\"], userAnswer)) {\n                    numberOfCorrectAnswers++;\n                    item._isCorrect = true;\n                    item._answerIndex = _.indexOf(item[\"_answers\"], this.cleanupUserAnswer(userAnswer));\n                    this.model.set('_numberOfCorrectAnswers', numberOfCorrectAnswers);\n                    this.model.set('_isAtLeastOneCorrectSelection', true);\n                } else {\n                    item._isCorrect = false;\n                    item._answerIndex = -1;\n                }\n                numberOfSpecificAnswers++;\n            }, this);\n        },\n\n        checkAnswerIsCorrect: function(possibleAnswers, userAnswer) {\n            var uAnswer = this.cleanupUserAnswer(userAnswer);\n            var matched = _.filter(possibleAnswers, function(cAnswer){\n                return this.cleanupUserAnswer(cAnswer) == uAnswer;\n            }, this);\n            \n            var answerIsCorrect = matched && matched.length > 0;\n            if (answerIsCorrect) this.model.set('_hasAtLeastOneCorrectSelection', true);\n            return answerIsCorrect;\n        },\n\n        cleanupUserAnswer: function(userAnswer) {\n            if (this.model.get('_allowsAnyCase')) {\n                userAnswer = userAnswer.toLowerCase();\n            }\n            if (this.model.get('_allowsPunctuation')) {\n                userAnswer = userAnswer.replace(/[\\.,-\\/#!$£%\\^&\\*;:{}=\\-_`~()]/g, \"\");\n                //remove any orphan double spaces and replace with single space (B & Q)->(B  Q)->(B Q)\n                userAnswer = userAnswer.replace(/(  +)+/g, \" \");\n            }\n            // removes whitespace from beginning/end (leave any in the middle)\n            return $.trim(userAnswer);\n        },\n\n        // Used to set the score based upon the _questionWeight\n        setScore: function() {\n            var numberOfCorrectAnswers = this.model.get('_numberOfCorrectAnswers');\n            var questionWeight = this.model.get(\"_questionWeight\");\n            var itemLength = this.model.get('_items').length;\n\n            var score = questionWeight * numberOfCorrectAnswers / itemLength;\n\n            this.model.set('_score', score);\n        },\n\n        // This is important and should give the user feedback on how they answered the question\n        // Normally done through ticks and crosses by adding classes\n        showMarking: function() {\n            if (!this.model.get('_canShowMarking')) return;\n\n            _.each(this.model.get('_items'), function(item, i) {\n                var $item = this.$('.textinput-item').eq(i);\n                $item.removeClass('correct incorrect').addClass(item._isCorrect ? 'correct' : 'incorrect');\n            }, this);\n        },\n\n        isPartlyCorrect: function() {\n            return this.model.get('_isAtLeastOneCorrectSelection');\n        },\n\n        resetUserAnswer: function() {\n            _.each(this.model.get('_items'), function(item) {\n                item[\"_isCorrect\"] = false;\n                item[\"userAnswer\"] = \"\";\n            }, this);\n        },\n\n        // Used by the question view to reset the look and feel of the component.\n        resetQuestion: function() {\n            this.$('.textinput-item-textbox').prop('disabled', !this.model.get('_isEnabled')).val('');\n\n            this.model.set({\n                _isAtLeastOneCorrectSelection: false,\n                _isCorrect: undefined\n            });\n        },\n\n        showCorrectAnswer: function() {\n            \n            if(this.model.get('_answers'))  {\n                \n                var correctAnswers = this.model.get('_answers');\n                _.each(this.model.get('_items'), function(item, index) {\n                    this.$(\".textinput-item-textbox\").eq(index).val(correctAnswers[index][0]);\n                }, this);\n                \n            } else {\n                _.each(this.model.get('_items'), function(item, index) {\n                    this.$(\".textinput-item-textbox\").eq(index).val(item._answers[0]);\n                }, this);\n            }\n            \n        },\n\n        hideCorrectAnswer: function() {\n            _.each(this.model.get('_items'), function(item, index) {\n                this.$(\".textinput-item-textbox\").eq(index).val(item.userAnswer);\n            }, this);\n        },\n\n        /**\n        * used by adapt-contrib-spoor to get the user's answers in the format required by the cmi.interactions.n.student_response data field\n        * returns the user's answers as a string in the format \"answer1[,]answer2[,]answer3\"\n        * the use of [,] as an answer delimiter is from the SCORM 2004 specification for the fill-in interaction type\n        */\n        getResponse: function() {\n            return _.pluck(this.model.get('_items'), 'userAnswer').join('[,]');\n        },\n\n        /**\n        * used by adapt-contrib-spoor to get the type of this question in the format required by the cmi.interactions.n.type data field\n        */\n        getResponseType: function() {\n            return \"fill-in\";\n        }\n    });\n\n    Adapt.register(\"textinput\", TextInput);\n\n    return TextInput;\n});\n\n",
    "define('extensions/adapt-contrib-assessment/js/adapt-assessmentArticleView',[\n    'core/js/adapt',\n    'core/js/views/articleView'\n], function(Adapt, AdaptArticleView) {\n\n    var AssessmentView = {\n\n        postRender: function() {\n            AdaptArticleView.prototype.postRender.call(this);\n            if (this.model.isAssessmentEnabled()) {\n                this._setupEventListeners();\n\n                var config = this.model.getConfig();\n                if (config && config._questions && config._questions._canShowMarking === false) {\n                    this.$el.addClass('no-marking');\n                }\n            }\n            this.$el.addClass('assessment');\n        },\n\n        _setupEventListeners: function() {\n            this.listenTo(Adapt, \"assessments:complete\", this._onAssessmentComplete);\n            this.listenTo(Adapt, \"assessments:reset\", this._onAssessmentReset);\n            this.listenTo(Adapt, \"remove\", this._onRemove);\n        },\n\n        _removeEventListeners: function() {\n            this.stopListening(Adapt, \"assessments:complete\", this._onAssessmentComplete);\n            this.stopListening(Adapt, \"assessments:reset\", this._onAssessmentReset);\n        },\n\n        _onAssessmentComplete: function(state, model) {\n            if (state.id != this.model.get(\"_assessment\")._id) return;\n\n            console.log(\"assessment complete\", state, model);\n        },\n\n        _onAssessmentReset: function(state, model) {\n            if (state.id != this.model.get(\"_assessment\")._id) return;\n\n            console.log(\"assessment reset\", state, model);\n\n        },\n\n        _onRemove: function() {\n            this._removeEventListeners();\n        }\n\n    };\n\n    return AssessmentView;\n\n});\n\n",
    "define('extensions/adapt-contrib-assessment/js/adapt-assessmentQuestionBank',['require'],function(require) {\n    \n    var QuestionBank = function(quizBankid, articleId, numQuestionBlocks, uniqueQuestions) {\n\n        this._id = quizBankid;\n        this._articleId = articleId;\n        this._numQuestionBlocks = numQuestionBlocks;\n        this._uniqueQuestions = uniqueQuestions;\n        this.questionBlocks = [];\n        this.unUsedQuestionBlocks = undefined;\n        this.usedQuestionBlocks = [];\n\n    };\n\n    QuestionBank.prototype = {\n\n        getID: function() {\n            return this._id;\n        },\n\n        addBlock: function(block) {\n            this.questionBlocks.push(block);\n        },\n\n        getRandomQuestionBlocks: function() {\n            this.checkResetUnunsedBlocks();\n\n            var questionBlocks = [];\n            var usedQuestionBlocks = this.usedQuestionBlocks.slice(0);\n\n            for (var i = 0; i < this._numQuestionBlocks; i++) {\n                var question = this.getRandomQuestion();\n                if (question !== undefined) {\n                    questionBlocks.push(question);\n                } else {\n                    if (usedQuestionBlocks.length === 0) break;\n                    var index = Math.floor(Math.random() * (usedQuestionBlocks.length-1));\n                    question = usedQuestionBlocks.splice(index,1)[0];\n                    questionBlocks.push(question);\n                }\n            }\n                \n            return questionBlocks;\n        },\n\n        checkResetUnunsedBlocks: function() {\n            if (this.unUsedQuestionBlocks !== undefined && this._uniqueQuestions) return;\n            \n            this.unUsedQuestionBlocks = this.questionBlocks.slice(0);\n        },\n\n        getRandomQuestion: function() {\n            if (this.unUsedQuestionBlocks !== undefined && this.unUsedQuestionBlocks.length < 1) {\n               console.warn(\"assessment:\"+this._articleId+\" No more unique questions for _assessment._quizBankID \" + this._id);\n               return undefined;\n            }\n\n            var index = Math.round(Math.random() * (this.unUsedQuestionBlocks.length-1));\n            var questionBlock = this.unUsedQuestionBlocks[index];\n            this.usedQuestionBlocks.push(questionBlock);\n\n            this.unUsedQuestionBlocks.splice(index, 1);\n\n            return questionBlock;\n        }\n        \n    };\n\n    return QuestionBank;\n\n});\n",
    "define('extensions/adapt-contrib-assessment/js/adapt-assessmentArticleModel',[\n    'core/js/adapt',\n    './adapt-assessmentQuestionBank'\n], function(Adapt, QuestionBank) {\n\n\n    var givenIdCount = 0;\n    var assessmentConfigDefaults = {\n        \"_isEnabled\":true,\n        \"_questions\": {\n            \"_resetType\": \"soft\",\n            \"_canShowFeedback\": false,\n            \"_canShowMarking\": false,\n            \"_canShowModelAnswer\": false\n        },\n        \"_suppressMarking\": false,\n        \"_isPercentageBased\" : true,\n        \"_scoreToPass\" : 100,\n        \"_includeInTotalScore\": true,\n        \"_assessmentWeight\": 1,\n        \"_isResetOnRevisit\": true,\n        \"_reloadPageOnReset\": true,\n        \"_attempts\": \"infinite\"\n    };\n\n    var AssessmentModel = {\n\n    //Private functions\n\n        _postInitialize: function() {\n            if (!this.isAssessmentEnabled()) return;\n\n            var assessmentConfig = this.getConfig();\n\n            _.extend(this, {\n                '_currentQuestionComponents': null,\n                \"_originalChildModels\": null,\n                \"_questionBanks\": null,\n                \"_forceResetOnRevisit\": false\n            });\n\n            var attemptsLeft;\n            switch (assessmentConfig._attempts) {\n                case \"infinite\": case 0: case undefined: case -1: case null:\n                     attemptsLeft = \"infinite\";\n                    break;\n                default:\n                    attemptsLeft = assessmentConfig._attempts;\n                    break;\n            }\n\n            this.set({\n                '_currentQuestionComponentIds': [],\n                '_assessmentCompleteInSession': false,\n                '_attemptInProgress': false,\n                \"_isAssessmentComplete\": false,\n                '_numberOfQuestionsAnswered': 0,\n                '_lastAttemptScoreAsPercent': 0,\n                \"_attempts\": attemptsLeft,\n                \"_attemptsLeft\": attemptsLeft,\n                \"_attemptsSpent\": 0\n            });\n\n            this.listenToOnce(Adapt, \"app:dataReady\", this._onDataReady);\n            this.listenTo(Adapt, \"remove\", this._onRemove);\n\n        },\n\n        init: function() {\n            //save original children\n            this._originalChildModels = this.getChildren().models;\n            //collect all question components\n            this._currentQuestionComponents = _.filter(this.findDescendantModels(\"components\"), function(comp) {\n                return comp.get('_isQuestionType') === true;\n            });\n            this.set(\"_currentQuestionComponentIds\", _.map(this._currentQuestionComponents, function(comp) {\n                return comp.get(\"_id\");\n            }));\n\n            this._setAssessmentOwnershipOnChildrenModels();\n\n        },\n\n        _setAssessmentOwnershipOnChildrenModels: function() {\n            //mark all children components as belonging to an assessment\n            for (var i = 0, l = this._originalChildModels.length; i < l; i++) {\n                var blockModel = this._originalChildModels[i];\n                blockModel.set({\n                    _isPartOfAssessment: true\n                });\n                //make sure components are set to _isPartOfAssessment for plp checking\n                blockModel.setOnChildren({\n                    _isPartOfAssessment: true\n                });\n            }\n        },\n\n\n        _onDataReady: function() {\n            //register assessment\n            Adapt.assessment.register(this);\n        },\n\n        _setupAssessmentData: function(force, callback) {\n            var assessmentConfig = this.getConfig();\n            var state = this.getState();\n            var shouldResetAssessment = (!this.get(\"_attemptInProgress\") && !state.isPass) || force === true;\n\n            var quizModels;\n            if (shouldResetAssessment) {\n                this.set(\"_numberOfQuestionsAnswered\", 0);\n                this.set(\"_isAssessmentComplete\", false);\n                this.set(\"_assessmentCompleteInSession\", false);\n                this.set(\"_score\", 0);\n                this.getChildren().models = this._originalChildModels;\n                if(assessmentConfig._banks &&\n                        assessmentConfig._banks._isEnabled &&\n                        assessmentConfig._banks._split.length > 1) {\n\n                    quizModels = this._setupBankedAssessment();\n                } else if(assessmentConfig._randomisation &&\n                        assessmentConfig._randomisation._isEnabled) {\n\n                    quizModels = this._setupRandomisedAssessment();\n                }\n            }\n\n            if (!quizModels) {\n                // leave the order as before, completed or not\n                quizModels = this.getChildren().models;\n            } else if ( quizModels.length === 0 ) {\n                quizModels = this.getChildren().models;\n                console.warn(\"assessment: Not enough unique questions to create a fresh assessment, using last selection\");\n            }\n\n            this.getChildren().models = quizModels;\n\n            this._currentQuestionComponents = _.filter(this.findDescendantModels('components'), function(comp) {\n                return comp.get('_isQuestionType') === true;\n            });\n            this.set(\"_currentQuestionComponentIds\", _.map(this._currentQuestionComponents, function(comp) {\n                return comp.get(\"_id\");\n            }));\n\n            var shouldResetQuestions = (assessmentConfig._isResetOnRevisit !== false && !state.isPass) || force === true;\n\n            if (shouldResetAssessment || shouldResetQuestions) {\n                this._resetQuestions(_.bind(function() {\n                    this.set(\"_attemptInProgress\", true);\n                    Adapt.trigger('assessments:reset', this.getState(), this);\n\n                    finalise.apply(this);\n                }, this));\n            } else {\n                finalise.apply(this);\n            }\n\n            function finalise() {\n                if (!state.isComplete) {\n                    this.set(\"_attemptInProgress\", true);\n                }\n                \n                this._overrideQuestionComponentSettings();\n                this._setupQuestionListeners();\n                this._checkNumberOfQuestionsAnswered();\n                this._updateQuestionsState();\n\n                Adapt.assessment.saveState();\n\n                if (typeof callback == 'function') callback.apply(this);\n            }\n        },\n\n        _setupBankedAssessment: function() {\n            var assessmentConfig = this.getConfig();\n\n            this._setupBanks();\n\n            //get random questions from banks\n            var questionModels = [];\n            for (var bankId in this._questionBanks) {\n                if(this._questionBanks.hasOwnProperty(bankId)) { // skip over properties that were added to Array.prototype by the ES5-shim for IE8\n                    var questionBank = this._questionBanks[bankId];\n                    var questions = questionBank.getRandomQuestionBlocks();\n                    questionModels = questionModels.concat(questions);\n                }\n            }\n\n            //if overall question order should be randomized\n            if (assessmentConfig._banks._randomisation) {\n                questionModels = _.shuffle(questionModels);\n            }\n\n            return questionModels;\n        },\n\n        _setupBanks: function() {\n            var assessmentConfig = this.getConfig();\n            var banks = assessmentConfig._banks._split.split(\",\");\n            var bankId;\n\n            this._questionBanks = [];\n\n            //build fresh banks\n            for (var i = 0, l = banks.length; i < l; i++) {\n                var bank = banks[i];\n                bankId = (i+1);\n                var questionBank = new QuestionBank(bankId, \n                                                this.get(\"_id\"), \n                                                bank,\n                                                true);\n\n                this._questionBanks[bankId] = questionBank;\n            }\n\n            //add blocks to banks\n            var children = this.getChildren().models;\n            for (var j = 0, count = children.length; j < count; j++) {\n                var blockModel = children[j];\n                var blockAssessmentConfig = blockModel.get('_assessment');\n                bankId = blockAssessmentConfig._quizBankID;\n                this._questionBanks[bankId].addBlock(blockModel);\n            }\n\n        },\n\n        _setupRandomisedAssessment: function() {\n            var assessmentConfig = this.getConfig();\n\n            var randomisationModel = assessmentConfig._randomisation;\n            var blockModels = this.getChildren().models;\n\n            var questionModels = _.shuffle(blockModels);\n\n            if (randomisationModel._blockCount > 0) {\n                questionModels = questionModels.slice(0, randomisationModel._blockCount);\n            }\n            \n            return questionModels;\n        },\n\n        _overrideQuestionComponentSettings: function() {\n            var newSettings = this._getMarkingSettings();\n\n            // Add any additional setting overrides here\n            var questionConfig = this.getConfig()._questions;\n            if (questionConfig.hasOwnProperty('_canShowFeedback')) {\n                newSettings._canShowFeedback = questionConfig._canShowFeedback;\n            }\n\n            if (!_.isEmpty(newSettings)) {\n                for (var i = 0, l = this._currentQuestionComponents.length; i < l; i++) {\n                    this._currentQuestionComponents[i].set(newSettings, { pluginName: \"_assessment\" });\n                }\n            }\n        },\n\n        _setupQuestionListeners: function() {\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                if (question.get(\"_isInteractionComplete\")) continue;\n                this.listenTo(question, 'change:_isInteractionComplete', this._onQuestionCompleted);\n            }\n        },\n\n        _checkNumberOfQuestionsAnswered: function() {\n            var questionComponents = this._currentQuestionComponents;\n            var numberOfQuestionsAnswered = 0;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                if (question.get(\"_isInteractionComplete\")) {\n                    numberOfQuestionsAnswered++;\n                }\n            }\n            this.set(\"_numberOfQuestionsAnswered\", numberOfQuestionsAnswered);\n        },\n\n        _removeQuestionListeners: function() {\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                this.stopListening(question, 'change:_isInteractionComplete', this._onQuestionCompleted);\n            }\n        },\n\n        _onQuestionCompleted: function(questionModel, value) {\n            if (value === false) return;\n            if(!questionModel.get('_isInteractionComplete')) return;\n\n            var numberOfQuestionsAnswered = this.get(\"_numberOfQuestionsAnswered\");\n            numberOfQuestionsAnswered++;\n            this.set(\"_numberOfQuestionsAnswered\", numberOfQuestionsAnswered);\n\n            this._updateQuestionsState();\n            Adapt.assessment.saveState();\n\n            this._checkAssessmentComplete();\n        },\n\n        _checkAssessmentComplete: function() {\n            var numberOfQuestionsAnswered = this.get(\"_numberOfQuestionsAnswered\");\n\n            var allQuestionsAnswered = numberOfQuestionsAnswered >= this._currentQuestionComponents.length;\n            if (!allQuestionsAnswered) return;\n\n            this._onAssessmentComplete();\n        },\n\n        _onAssessmentComplete: function() {\n            var assessmentConfig = this.getConfig();\n\n            this.set(\"_attemptInProgress\", false);\n            this._spendAttempt();\n\n            var scoreAsPercent = this._getScoreAsPercent();\n            var score = this._getScore();\n            var maxScore = this._getMaxScore();\n\n            this.set({\n                '_scoreAsPercent': scoreAsPercent,\n                '_score': score,\n                '_maxScore': maxScore,\n                '_lastAttemptScoreAsPercent': scoreAsPercent,\n                '_assessmentCompleteInSession': true,\n                '_isAssessmentComplete': true\n            });\n\n            this._updateQuestionsState();\n\n            this._checkIsPass();\n\n            this._removeQuestionListeners();\n\n            if (this._isMarkingSuppressionEnabled() && !this._isAttemptsLeft()) {\n                _.defer(_.bind(function() {\n                    this._overrideMarkingSettings();\n                    this._refreshQuestions();\n                }, this));\n            }\n\n            Adapt.trigger('assessments:complete', this.getState(), this);\n        },\n\n        _updateQuestionsState: function() {\n            var questions = [];\n\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var questionComponent = questionComponents[i];\n\n                var questionModel = {\n                    _id: questionComponent.get(\"_id\"),\n                    _isCorrect: questionComponent.get(\"_isCorrect\") === undefined ? null : questionComponent.get(\"_isCorrect\")\n                };\n\n                //build array of questions\n                questions.push(questionModel);\n\n            }\n\n            this.set({\n                '_questions': questions\n            });\n        },\n\n        _checkIsPass: function() {\n            var assessmentConfig = this.getConfig();\n\n            var isPercentageBased = assessmentConfig._isPercentageBased;\n            var scoreToPass = assessmentConfig._scoreToPass;\n\n            var scoreAsPercent = this.get(\"_scoreAsPercent\");\n            var score = this.get(\"_score\");\n\n            var isPass = false;\n            if (score && scoreAsPercent) {\n                if (isPercentageBased) {\n                    isPass = (scoreAsPercent >= scoreToPass) ? true : false;\n                } else {\n                    isPass = (score >= scoreToPass) ? true : false;\n                }\n            }\n\n            this.set(\"_isPass\", isPass);\n        },\n        \n        _getMarkingSettings: function() {\n            var markingSettings = {};\n\n            if (this._shouldSuppressMarking()) {\n                markingSettings = {\n                    _canShowMarking: false,\n                    _canShowModelAnswer: false\n                };\n            } else {\n                var questionConfig = this.getConfig()._questions;\n\n                if (questionConfig.hasOwnProperty('_canShowModelAnswer')) {\n                    markingSettings._canShowModelAnswer = questionConfig._canShowModelAnswer;\n                }\n\n                if (questionConfig.hasOwnProperty('_canShowMarking')) {\n                    markingSettings._canShowMarking = questionConfig._canShowMarking;\n                }\n            }\n\n            return markingSettings;\n        },\n\n        _overrideMarkingSettings: function() {\n            var newMarkingSettings = this._getMarkingSettings();\n            for (var i = 0, l = this._currentQuestionComponents.length; i < l; i++) {\n                this._currentQuestionComponents[i].set(newMarkingSettings, {\n                    pluginName: \"_assessment\"\n                });\n            }\n        },\n\n        _refreshQuestions: function() {\n            for (var a = 0, b = this._currentQuestionComponents.length; a < b; a++) {\n                var question = this._currentQuestionComponents[a];\n                question.refresh();\n            }\n        },\n\n        _shouldSuppressMarking: function() {\n            return this._isMarkingSuppressionEnabled() && this._isAttemptsLeft();\n        },\n\n        _isMarkingSuppressionEnabled: function() {\n            var assessmentConfig = this.getConfig();\n            return assessmentConfig._suppressMarking;\n        },\n\n        _isAttemptsLeft: function() {\n            if (this.get('_isAssessmentComplete') && this.get('_isPass')) return false;\n\n            if (this.get('_attemptsLeft') === 0) return false;\n\n            return true;\n        },\n\n        _spendAttempt: function() {\n            if (!this._isAttemptsLeft()) return false;\n\n            var attemptsSpent = this.get(\"_attemptsSpent\");\n            attemptsSpent++;\n            this.set(\"_attemptsSpent\", attemptsSpent);\n\n            if (this.get('_attempts') == \"infinite\") return true;\n\n            var attemptsLeft = this.get('_attemptsLeft');\n            attemptsLeft--;\n            this.set('_attemptsLeft', attemptsLeft);\n\n            return true;\n        },\n\n        _getScore: function() {\n            var score = 0;\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                if (question.get('_isCorrect') &&\n                    question.get('_questionWeight')) {\n                    score += question.get('_questionWeight');\n                }\n            }\n            return score;\n        },\n\n        _getMaxScore: function() {\n            var maxScore = 0;\n            var questionComponents = this._currentQuestionComponents;\n            for (var i = 0, l = questionComponents.length; i < l; i++) {\n                var question = questionComponents[i];\n                if (question.get('_questionWeight')) {\n                    maxScore += question.get('_questionWeight');\n                }\n            }\n            return maxScore;\n        },\n\n        _getScoreAsPercent: function() {\n            if (this._getMaxScore() === 0) return 0;\n            return Math.round((this._getScore() / this._getMaxScore()) * 100);\n        },\n\n        _getLastAttemptScoreAsPercent: function() {\n            return this.get('_lastAttemptScoreAsPercent');\n        },\n\n        _checkReloadPage: function() {\n            if (!this.canResetInPage()) return false;\n\n            var parentId = this.getParent().get(\"_id\");\n            var currentLocation = Adapt.location._currentId;\n\n            //check if on assessment page and should rerender page\n            if (currentLocation != parentId) return false;\n            if (!this.get(\"_isReady\")) return false;\n\n            return true;\n        },\n\n        _reloadPage: function() {\n            this._forceResetOnRevisit = true;\n\n            _.delay(function() {\n                Backbone.history.navigate(\"#/id/\"+Adapt.location._currentId, { replace:true, trigger: true });\n            }, 250);\n        },\n\n        _resetQuestions: function(callback) {\n            var assessmentConfig = this.getConfig();\n            var syncIterations = 1; // number of synchronous iterations to perform\n            var i = 0, qs = this._currentQuestionComponents, len = qs.length;\n\n            function step() {\n                for (var j=0, count=Math.min(syncIterations, len-i); j < count; i++, j++) {\n                    var question = qs[i];\n                    question.reset(assessmentConfig._questions._resetType, true);\n                }\n\n                i == len ? callback() : setTimeout(step);\n            }\n\n            step();\n        },\n\n        _onRemove: function() {\n            this._removeQuestionListeners();\n        },\n\n        _setCompletionStatus: function() {\n            this.set({\n                \"_isComplete\": true,\n                \"_isInteractionComplete\": true\n            });\n        },\n\n        _checkIfQuestionsWereRestored: function() {\n            if (this.get(\"_assessmentCompleteInSession\")) return;\n            if (!this.get(\"_isAssessmentComplete\")) return;\n\n            //fix for courses that do not remember the user selections\n            //force assessment to reset if user revisits an assessment page in a new session which is completed\n            var wereQuestionsRestored = true;\n\n            var questions = this.get(\"_questions\");\n            for (var i = 0, l = questions.length; i < l; i++) {\n                var question = questions[i];\n                var questionModel = Adapt.findById(question._id);\n                if (!questionModel.get(\"_isSubmitted\")) {\n                    wereQuestionsRestored = false;\n                    break;\n                }\n            }\n\n            if (!wereQuestionsRestored) {\n                this.set(\"_assessmentCompleteInSession\", true);\n                return true;\n            }\n\n            return false;\n        },\n\n\n    //Public Functions\n\n        isAssessmentEnabled: function() {\n            if (this.get(\"_assessment\") &&\n                this.get(\"_assessment\")._isEnabled) return true;\n            return false;\n        },\n\n        canResetInPage: function() {\n            var assessmentConfig = this.getConfig();\n            if (assessmentConfig._reloadPageOnReset === false) return false;\n            return true;\n        },\n\n        reset: function(force, callback) {\n            \n            if (this._isResetInProgress) {\n                // prevent multiple resets from executing. \n                // keep callbacks in queue for when current reset is finished\n                this.once(\"reset\", function() {\n                    this._isResetInProgress = false;\n                    if (typeof callback == 'function') {\n                        callback(true);\n                    }\n                });\n                return;\n            }\n            \n            var assessmentConfig = this.getConfig();\n\n            //check if forcing reset via page revisit or force parameter\n            force = this._forceResetOnRevisit || force === true;\n            this._forceResetOnRevisit = false;\n\n            var isPageReload = this._checkReloadPage();\n\n            //stop resetting if not complete or not allowed\n            if (this.get(\"_assessmentCompleteInSession\") && \n                    !assessmentConfig._isResetOnRevisit && \n                    !isPageReload && \n                    !force) {\n                if (typeof callback == 'function') {\n                    callback(false);\n                }\n                return false;\n            }\n            \n            //check if new session and questions not restored\n            var wereQuestionsRestored = this._checkIfQuestionsWereRestored();\n            force = force || wereQuestionsRestored;\n            // the assessment is going to be reset so we must reset attempts\n            // otherwise assessment may not be set up properly in next session\n            if (wereQuestionsRestored && !this._isAttemptsLeft()) {\n                this.set({'_attemptsLeft':this.get('_attempts')});\n                this.set({'_attemptsSpent':0});\n            }\n\n            //stop resetting if no attempts left\n            if (!this._isAttemptsLeft() && !force) {\n                if (typeof callback == 'function') callback(false);\n                return false;\n            }\n\n            if (!isPageReload) {\n                // only perform this section when not attempting to reload the page\n                // wait for reset to trigger\n                this.once(\"reset\", function() {\n                    this._isResetInProgress = false;\n                    if (typeof callback == 'function') {\n                        callback(true);\n                    }\n                });\n                this._isResetInProgress = true;\n                // perform asynchronous reset\n                this._setupAssessmentData(force, function() {\n                    this.trigger(\"reset\");\n                });\n            } else {\n                this._reloadPage();\n                if (typeof callback == 'function') {\n                    callback(true);\n                }\n            }\n\n            return true;\n        },\n\n        getSaveState: function() {\n            var state = this.getState();\n            var indexByIdQuestions = [];\n            var cfg = this.getConfig();\n            var banksActive = cfg._banks && cfg._banks._isEnabled && cfg._banks._split.length > 1;\n            var randomisationActive = cfg._randomisation && cfg._randomisation._isEnabled;\n\n            if (!banksActive && !randomisationActive) {\n                // include presentation component IDs in save state so that blocks without questions aren't removed\n                _.each(this.findDescendantModels(\"components\"), function(component) {\n                    var componentModel = {\n                        _id: component.get(\"_id\"),\n                        _isCorrect: component.get(\"_isCorrect\") === undefined ? null : component.get(\"_isCorrect\")\n                    };\n\n                    indexByIdQuestions.push(componentModel);\n                    \n                });\n\n                indexByIdQuestions = _.indexBy(indexByIdQuestions, \"_id\");\n            } else {\n                indexByIdQuestions = _.indexBy(state.questions, \"_id\");\n            }\n\n            for (var id in indexByIdQuestions) {\n                if(indexByIdQuestions.hasOwnProperty(id)) {\n                    indexByIdQuestions[id] = indexByIdQuestions[id]._isCorrect;\n                }\n            }\n\n            var saveState = [\n                state.isComplete ? 1:0,\n                state.attemptsSpent,\n                state.maxScore,\n                state.score,\n                state.attemptInProgress ? 1:0,\n                indexByIdQuestions\n            ];\n\n            return saveState;\n        },\n\n        setRestoreState: function(restoreState) {\n            var id;\n            var isComplete = restoreState[0] == 1 ? true : false;\n            var attempts = this.get(\"_attempts\");\n            var attemptsSpent = restoreState[1];\n            var maxScore = restoreState[2];\n            var score = restoreState[3];\n            var attemptInProgress = restoreState[4] == 1 ? true : false;\n            var scoreAsPercent;\n\n            var indexByIdQuestions = restoreState[5];\n\n            var blockIds = {};\n            for (id in indexByIdQuestions) {\n                if(indexByIdQuestions.hasOwnProperty(id)) {\n                    var blockId = Adapt.findById(id).get(\"_parentId\");\n                    blockIds[blockId] = Adapt.findById(blockId);\n                }\n            }\n            var restoredChildrenModels = _.values(blockIds);\n\n            if (indexByIdQuestions) this.getChildren().models = restoredChildrenModels;\n\n\n            this.set(\"_isAssessmentComplete\", isComplete);\n            this.set(\"_assessmentCompleteInSession\", false);\n            this.set(\"_attemptsSpent\", attemptsSpent );\n            this.set(\"_attemptInProgress\", attemptInProgress);\n\n            this.set('_attemptsLeft', (attempts === \"infinite\" ? attempts : attempts - attemptsSpent));\n\n            this.set(\"_maxScore\", maxScore || this._getMaxScore());\n            this.set(\"_score\", score || 0);\n\n            if (score) {\n                scoreAsPercent = Math.round( score / maxScore  * 100);\n            } else {\n                scoreAsPercent = 0;\n            }\n\n            this.set(\"_scoreAsPercent\", scoreAsPercent);\n            this.set(\"_lastAttemptScoreAsPercent\", scoreAsPercent);\n\n            var questions = [];\n            for (id in indexByIdQuestions) {\n                if(indexByIdQuestions.hasOwnProperty(id) && Adapt.findById(id).get(\"_isQuestionType\")) {\n                    questions.push({\n                        _id: id,\n                        _isCorrect: indexByIdQuestions[id]\n                    });\n                }\n            }\n\n            this.set(\"_questions\", questions);\n\n            this._checkIsPass();\n        },\n\n        getState: function() {\n            //return the current state of the assessment\n            //create snapshot of values so as not to create memory leaks\n            var assessmentConfig = this.getConfig();\n\n            var state = {\n                id: assessmentConfig._id,\n                type: \"article-assessment\",\n                pageId: this.getParent().get(\"_id\"),\n                articleId: this.get(\"_id\"),\n                isEnabled: assessmentConfig._isEnabled,\n                isComplete: this.get(\"_isAssessmentComplete\"),\n                isPercentageBased: assessmentConfig._isPercentageBased,\n                scoreToPass: assessmentConfig._scoreToPass,\n                score: this.get(\"_score\"),\n                scoreAsPercent: this.get(\"_scoreAsPercent\"),\n                maxScore: this.get(\"_maxScore\"),\n                isPass: this.get(\"_isPass\"),\n                includeInTotalScore: assessmentConfig._includeInTotalScore,\n                assessmentWeight: assessmentConfig._assessmentWeight,\n                attempts: this.get(\"_attempts\"),\n                attemptsSpent: this.get(\"_attemptsSpent\"),\n                attemptsLeft: this.get(\"_attemptsLeft\"),\n                attemptInProgress: this.get(\"_attemptInProgress\"),\n                lastAttemptScoreAsPercent: this.get('_lastAttemptScoreAsPercent'),\n                questions: this.get(\"_questions\"),\n                questionModels: new Backbone.Collection(this._currentQuestionComponents)\n            };\n\n            return state;\n        },\n\n        getConfig: function() {\n            var assessmentConfig = this.get(\"_assessment\");\n\n            if (!assessmentConfig) {\n                assessmentConfig = $.extend(true, {}, assessmentConfigDefaults);\n            } else {\n                assessmentConfig = $.extend(true, {}, assessmentConfigDefaults, assessmentConfig);\n            }\n\n            if (assessmentConfig._id === undefined) {\n                assessmentConfig._id = \"givenId\"+(givenIdCount++);\n            }\n\n            this.set(\"_assessment\", assessmentConfig);\n\n            return assessmentConfig;\n        }\n\n    };\n\n    return AssessmentModel;\n});\n\n",
    "define('extensions/adapt-contrib-assessment/js/assessment',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    /*\n        Here we setup a registry for all assessments\n    */\n\n    var assessmentsConfigDefaults = {\n        \"_postTotalScoreToLms\": true,\n        \"_isPercentageBased\": true,\n        \"_scoreToPass\": 100,\n        \"_isDefaultsLoaded\": true\n    };\n\n    Adapt.assessment = _.extend({\n\n    //Private functions\n\n        _assessments: _.extend([], {\n            _byPageId: {},\n            _byAssessmentId: {}\n        }),\n\n        initialize: function() {\n            this.listenTo(Adapt, \"assessments:complete\", this._onAssessmentsComplete);\n            this.listenTo(Adapt, \"router:location\", this._checkResetAssessmentsOnRevisit);\n            this.listenTo(Adapt, \"app:dataReady\", this._onDataReady);\n        },\n\n        _onAssessmentsComplete: function(state) {\n            var assessmentId = state.id;\n\n            state.isComplete = true;\n\n            if (assessmentId === undefined) return;\n\n            if (!this._getStateByAssessmentId(assessmentId)) {\n                Adapt.log.warn(\"assessments: state was not registered when assessment was created\");\n            }\n\n            this.saveState();\n\n            this._setPageProgress();\n\n            this._checkAssessmentsComplete();\n\n            //need to add spoor assessment state saving\n\n        },\n\n        _restoreModelState: function(assessmentModel) {\n\n            if (!this._saveStateModel) {\n                this._saveStateModel = Adapt.offlineStorage.get(\"assessment\");\n            }\n            if (this._saveStateModel) {\n                var state = assessmentModel.getState();\n                if (this._saveStateModel[state.id]) {\n                    assessmentModel.setRestoreState(this._saveStateModel[state.id]);\n                }\n            }\n\n        },\n\n        _checkResetAssessmentsOnRevisit: function(toObject) {\n            /* \n                Here we hijack router:location to reorganise the assessment blocks \n                this must happen before trickle listens to block completion\n            */\n            if (toObject._contentType !== \"page\") return;\n\n            //initialize assessment on page visit before pageView:preRender (and trickle)\n            var pageAssessmentModels = this._getAssessmentByPageId(toObject._currentId);\n            if (pageAssessmentModels === undefined) return;\n\n            /*\n                Here we further hijack the router to ensure the asynchronous assessment\n                reset completes before routing completes\n            */\n\n            Adapt.trigger('plugin:beginWait');\n\n            for (var i = 0, l = pageAssessmentModels.length; i < l; i++) {\n                var pageAssessmentModel = pageAssessmentModels[i];\n                pageAssessmentModel.reset(false, function() {\n                    // N.B. this callback is asynchronous so [i] may have been incremented\n                    if (i >= l - 1) Adapt.trigger('plugin:endWait');\n                });\n            }\n\n            this._setPageProgress();\n        },\n\n        _onDataReady: function() {\n            this._assessments = _.extend([], {\n                _byPageId: {},\n                _byAssessmentId: {}\n            });\n        },\n\n        _checkAssessmentsComplete: function() {\n            var allAssessmentsComplete = true;\n            var assessmentToPostBack = 0;\n            var states = this._getStatesByAssessmentId();\n\n            var assessmentStates = [];\n\n            for (var id in states) {\n                var state = states[id];\n                if (!state.includeInTotalScore) continue;\n                if (!state.isComplete) {\n                    allAssessmentsComplete = false;\n                    break;\n                }\n                assessmentToPostBack++;\n                assessmentStates.push(state);\n            }\n\n            if (!allAssessmentsComplete || assessmentToPostBack === 0) return false;\n\n            if (assessmentToPostBack === 1) {\n                this._setupSingleAssessmentConfiguration(assessmentStates[0]);\n            }\n\n            this._postScoreToLms();\n\n            return true;\n        },\n\n        _setupSingleAssessmentConfiguration: function(assessmentState) {\n            var assessmentsConfig = Adapt.course.get(\"_assessment\");\n            $.extend(true, assessmentsConfig, {\n                \"_postTotalScoreToLms\": assessmentState.includeInTotalScore,\n                \"_isPercentageBased\": assessmentState.isPercentageBased,\n                \"_scoreToPass\": assessmentState.scoreToPass\n            });\n            Adapt.course.set(\"_assessment\", assessmentsConfig);\n        },\n        \n        _postScoreToLms: function() {\n            var assessmentsConfig = this.getConfig();\n            if (assessmentsConfig._postTotalScoreToLms === false) return;\n            \n            var completionState = this.getState();\n            //post completion to spoor\n            _.defer(function() {\n                Adapt.trigger(\"assessment:complete\", completionState);\n            });\n        },\n\n        _getAssessmentByPageId: function(pageId) {\n            return this._assessments._byPageId[pageId];\n        },\n\n        _getStateByAssessmentId: function(assessmentId) {\n            if (assessmentId === undefined) {\n                return null;\n            }\n                \n            return this._assessments._byAssessmentId[assessmentId].getState();\n        },\n\n        _getStatesByAssessmentId: function() {\n            var states = {};\n            for (var i = 0, l = this._assessments.length; i < l; i++) {\n                var assessmentModel = this._assessments[i];\n                var state = assessmentModel.getState();\n                states[state.id] = state;\n            }\n            return states;\n        },\n\n        _setPageProgress: function() {\n            //set _subProgressTotal and _subProgressComplete on pages that have assessment progress indicator requirements\n            \n            for (var k in this._assessments._byPageId) {\n\n                var assessments = this._assessments._byPageId[k];\n\n                var assessmentsTotal = assessments.length;\n                var assessmentsPassed = 0;\n\n                for (var i = 0, l = assessments.length; i < l; i++) {\n                    var assessmentState = assessments[i].getState();\n\n                    if (assessmentState.includeInTotalScore && !assessmentState.isPass) continue;\n\n                    if (assessmentState.isComplete) {\n                        assessmentsPassed++; \n                    }\n                }\n\n                try {\n                    var pageModel = Adapt.findById(k);\n                    pageModel.set(\"_subProgressTotal\", assessmentsTotal);\n                    pageModel.set(\"_subProgressComplete\", assessmentsPassed);\n                } catch(e) {\n\n                }\n\n            }\n        },\n\n        _addToAssessmentIdMap: function(id, model) {\n            if (id === undefined) {\n                Adapt.log.warn(\"An assessment has been registered with an undefined value for '_id'\");\n                return;\n            }\n\n            if (id === '') {\n                Adapt.log.warn(\"An assessment has been registered with an empty value for '_id'\");\n            }\n\n            if (!this._assessments._byAssessmentId[id]) {\n                this._assessments._byAssessmentId[id] = model;\n            } else {\n                Adapt.log.warn(\"An assessment with an _id of '\" + id + \"' already exists!\");\n            }\n        },\n\n    //Public functions\n\n        register: function(assessmentModel) {\n            var state = assessmentModel.getState();\n            var assessmentId = state.id;\n            var pageId = state.pageId;\n\n            if (this._assessments._byPageId[pageId] === undefined) {\n                this._assessments._byPageId[pageId] = [];\n            }\n\n            this._assessments._byPageId[pageId].push(assessmentModel);\n\n            this._addToAssessmentIdMap(assessmentId, assessmentModel);\n\n            this._assessments.push(assessmentModel);\n\n            this._restoreModelState(assessmentModel);\n\n            Adapt.trigger(\"assessments:register\", state, assessmentModel);\n\n            this._setPageProgress();\n        },\n\n        get: function(id) {\n            if (id === undefined) {\n                return this._assessments.slice(0);\n            } else {\n                return this._assessments._byAssessmentId[id];\n            }\n        },\n\n        saveState: function() {\n\n            this._saveStateModel = {};\n            for (var i = 0, assessmentModel; assessmentModel = this._assessments[i++];) {\n                var state = assessmentModel.getState();\n                this._saveStateModel[state.id] = assessmentModel.getSaveState();\n            }\n\n            Adapt.offlineStorage.set(\"assessment\", this._saveStateModel);\n        },\n\n        getConfig: function () {\n            var assessmentsConfig = Adapt.course.get(\"_assessment\");\n\n            if (assessmentsConfig && assessmentsConfig._isDefaultsLoaded) {\n                return assessmentsConfig;\n            }\n\n            if (assessmentsConfig === undefined) {\n                assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults);\n            } else {\n                assessmentsConfig = $.extend(true, {}, assessmentsConfigDefaults, assessmentsConfig);\n            }\n\n            Adapt.course.set(\"_assessment\", assessmentsConfig);\n\n            return assessmentsConfig;\n        },\n        \n        getState: function() {\n            var assessmentsConfig = this.getConfig();\n\n            var score = 0;\n            var maxScore = 0;\n            var isPass = false;\n            var totalAssessments = 0;\n\n            var states = this._getStatesByAssessmentId();\n\n            var assessmentsComplete = 0;\n\n            for (var id in states) {\n                var state = states[id];\n                if (!state.includeInTotalScore) continue;\n                if (state.isComplete) assessmentsComplete++;\n                totalAssessments++;\n                maxScore += state.maxScore / state.assessmentWeight;\n                score += state.score / state.assessmentWeight;\n            }\n\n            var isComplete = assessmentsComplete == totalAssessments;\n            \n            var scoreAsPercent = Math.round((score / maxScore) * 100);\n\n            if ((assessmentsConfig._scoreToPass || 100) && isComplete) {\n                if (assessmentsConfig._isPercentageBased !== false) {\n                    if (scoreAsPercent >= assessmentsConfig._scoreToPass) isPass = true;\n                } else {\n                    if (score >= assessmentsConfig._scoreToPass) isPass = true;\n                }\n            }\n\n            return {\n                isComplete: isComplete,\n                isPercentageBased: assessmentsConfig._isPercentageBased,\n                isPass: isPass,\n                scoreAsPercent: scoreAsPercent,\n                maxScore: maxScore,\n                score: score,\n                assessmentsComplete: assessmentsComplete,\n                assessments: totalAssessments\n            };\n        }\n\n    }, Backbone.Events);\n\n    Adapt.assessment.initialize();\n\n});\n\n",
    "define('extensions/adapt-contrib-assessment/js/adapt-assessmentArticleExtension',[\n    'core/js/adapt',\n    'core/js/views/articleView',\n    'core/js/models/articleModel',\n    './adapt-assessmentArticleView',\n    './adapt-assessmentArticleModel',\n    './assessment'\n], function(Adapt, ArticleView, ArticleModel, AdaptAssessmentArticleView, AdaptAssessmentArticleModel) {\n\n    /*  \n        Here we are extending the articleView and articleModel in Adapt.\n        This is to accomodate the assessment functionality on the article.\n        The advantage of this method is that the assessment behaviour can utilize all of the predefined article behaviour in both the view and the model.\n    */  \n\n    //Extends core/js/views/articleView.js\n    var ArticleViewInitialize = ArticleView.prototype.initialize;\n    ArticleView.prototype.initialize = function(options) {\n        if (this.model.get(\"_assessment\") && this.model.get(\"_assessment\")._isEnabled === true) {\n            //extend the articleView with new functionality\n            _.extend(this, AdaptAssessmentArticleView);\n        }\n        //initialize the article in the normal manner\n        return ArticleViewInitialize.apply(this, arguments);\n    };\n\n    //Extends core/js/models/articleModel.js\n    var ArticleModelInitialize = ArticleModel.prototype.initialize;\n    ArticleModel.prototype.initialize = function(options) {\n        if (this.get(\"_assessment\") && this.get(\"_assessment\")._isEnabled === true) {\n            //extend the articleModel with new functionality\n            _.extend(this, AdaptAssessmentArticleModel);\n\n            //initialize the article in the normal manner\n            var returnValue = ArticleModelInitialize.apply(this, arguments);\n\n            //initialize assessment article\n            this._postInitialize();\n\n            return returnValue;\n        }\n\n        //initialize the article in the normal manner if no assessment\n        return ArticleModelInitialize.apply(this, arguments);\n    };\n\n});\n\n",
    "define('extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var Bookmarking = Backbone.Controller.extend({\n\n        bookmarkLevel: null,\n        watchViewIds: null,\n        watchViews: [],\n        restoredLocationID: null,\n        currentLocationID: null,\n\n        initialize: function () {\n            this.listenToOnce(Adapt, \"router:location\", this.onAdaptInitialize);\n        },\n\n        onAdaptInitialize: function() {\n            if (!this.checkIsEnabled()) return;\n            this.setupEventListeners();\n            this.checkRestoreLocation();\n        },\n\n        checkIsEnabled: function() {\n            var courseBookmarkModel = Adapt.course.get('_bookmarking');\n            if (!courseBookmarkModel || !courseBookmarkModel._isEnabled) return false;\n            if (!Adapt.offlineStorage) return false;\n            return true;\n        },\n\n        setupEventListeners: function() {\n            this._onScroll = _.debounce(_.bind(this.checkLocation, this), 1000);\n            this.listenTo(Adapt, 'menuView:ready', this.setupMenu);\n            this.listenTo(Adapt, 'pageView:preRender', this.setupPage);\n        },\n\n        checkRestoreLocation: function() {\n            this.restoredLocationID = Adapt.offlineStorage.get(\"location\");\n\n            if (!this.restoredLocationID || this.restoredLocationID === \"undefined\") return;\n\n            this.listenToOnce(Adapt, \"pageView:ready menuView:ready\", this.restoreLocation);\n        },\n\n        restoreLocation: function() {\n            _.defer(_.bind(function() {\n                this.stopListening(Adapt, \"pageView:ready menuView:ready\", this.restoreLocation);\n\n                if (this.restoredLocationID == Adapt.location._currentId) return;\n\n                try {\n                    var model = Adapt.findById(this.restoredLocationID);\n                } catch (error) {\n                    return;\n                }\n                \n                if (!model) return;\n\n                var locationOnscreen = $(\".\" + this.restoredLocationID).onscreen();\n                var isLocationOnscreen = locationOnscreen && (locationOnscreen.percentInview > 0);\n                var isLocationFullyInview = locationOnscreen && (locationOnscreen.percentInview === 100);\n                if (isLocationOnscreen && isLocationFullyInview) return;\n\n                if(Adapt.course.get('_bookmarking')._showPrompt === false) {\n                    this.navigateToPrevious();\n                } else {\n                    this.showPrompt();\n                }\n            }, this));\n        },\n\n        showPrompt: function() {\n            var courseBookmarkModel = Adapt.course.get('_bookmarking');\n            if (!courseBookmarkModel._buttons) {\n                courseBookmarkModel._buttons = {\n                    yes: \"Yes\",\n                    no: \"No\"\n                };\n            }\n            if (!courseBookmarkModel._buttons.yes) courseBookmarkModel._buttons.yes = \"Yes\";\n            if (!courseBookmarkModel._buttons.no) courseBookmarkModel._buttons.no = \"No\";\n\n\n            this.listenToOnce(Adapt, \"bookmarking:continue\", this.navigateToPrevious);\n            this.listenToOnce(Adapt, \"bookmarking:cancel\", this.navigateCancel);\n\n            var promptObject = {\n                title: courseBookmarkModel.title,\n                body: courseBookmarkModel.body,\n                _prompts:[\n                    {\n                        promptText: courseBookmarkModel._buttons.yes,\n                        _callbackEvent: \"bookmarking:continue\"\n                    },\n                    {\n                        promptText: courseBookmarkModel._buttons.no,\n                        _callbackEvent: \"bookmarking:cancel\"\n                    }\n                ],\n                _showIcon: true\n            };\n\n            if (Adapt.config.get(\"_accessibility\") && Adapt.config.get(\"_accessibility\")._isActive) {\n                $(\".loading\").show();\n                $(\"#a11y-focuser\").focus();\n                $(\"body\").attr(\"aria-hidden\", true);\n                _.delay(function() {\n                    $(\".loading\").hide();\n                    $(\"body\").removeAttr(\"aria-hidden\");\n                    Adapt.trigger('notify:prompt', promptObject);\n                }, 3000);\n            } else {\n                Adapt.trigger('notify:prompt', promptObject);\n            }\n        },\n\n        navigateToPrevious: function() {\n            _.defer(_.bind(function() {\n                var isSinglePage = Adapt.contentObjects.models.length == 1; \n                Backbone.history.navigate('#/id/' + this.restoredLocationID, {trigger: true, replace: isSinglePage});\n            }, this));\n            \n            this.stopListening(Adapt, \"bookmarking:cancel\");\n        },\n\n        navigateCancel: function() {\n            this.stopListening(Adapt, \"bookmarking:continue\");\n        },\n\n        resetLocationID: function () {\n            this.setLocationID('');\n        },\n\n        setupMenu: function(menuView) {\n            var menuModel = menuView.model;\n            //set location as menu id unless menu is course, then reset location\n            if (menuModel.get(\"_parentId\")) return this.setLocationID(menuModel.get(\"_id\"));\n            else this.resetLocationID();\n        },\n        \n        setupPage: function (pageView) {\n            var hasPageBookmarkObject = pageView.model.has('_bookmarking');\n            var bookmarkModel = (hasPageBookmarkObject) ? pageView.model.get('_bookmarking') : Adapt.course.get('_bookmarking');\n            this.bookmarkLevel = bookmarkModel._level;\n\n            if (!bookmarkModel._isEnabled) {\n                this.resetLocationID();\n                return;\n            } else {\n                //set location as page id\n                this.setLocationID(pageView.model.get('_id'));\n\n                this.watchViewIds = _.map(pageView.model.findDescendantModels(this.bookmarkLevel+\"s\"), function(desc) {\n                    return desc.get(\"_id\");\n                });\n                this.listenTo(Adapt, this.bookmarkLevel + \"View:postRender\", this.captureViews);\n                this.listenToOnce(Adapt, \"remove\", this.releaseViews);\n                $(window).on(\"scroll\", this._onScroll);\n            }\n        },\n\n        captureViews: function (view) {\n            this.watchViews.push(view);\n        },\n\n        setLocationID: function (id) {\n            if (!Adapt.offlineStorage) return;\n            if (this.currentLocationID == id) return;\n            Adapt.offlineStorage.set(\"location\", id);\n            this.currentLocationID = id;\n        },\n\n        releaseViews: function () {\n            this.watchViews.length = 0;\n            this.watchViewIds.length = 0;\n            this.stopListening(Adapt, 'remove', this.releaseViews);\n            this.stopListening(Adapt, this.bookmarkLevel + 'View:postRender', this.captureViews);\n            $(window).off(\"scroll\", this._onScroll);\n        },\n\n        checkLocation: function() {\n            var highestOnscreen = 0;\n            var highestOnscreenLocation = \"\";\n\n            var locationObjects = [];\n            for (var i = 0, l = this.watchViews.length; i < l; i++) {\n                var view = this.watchViews[i];\n\n                var isViewAPageChild = (_.indexOf(this.watchViewIds, view.model.get(\"_id\")) > -1 );\n\n                if ( !isViewAPageChild ) continue;\n\n                var element = $(\".\" + view.model.get(\"_id\"));\n                var measurements = element.onscreen();\n                \n                if (!measurements.onscreen) continue;\n                if (measurements.percentInview > highestOnscreen) {\n                    highestOnscreen = measurements.percentInview;\n                    highestOnscreenLocation = view.model.get(\"_id\");\n                }\n            }\n\n            //set location as most inview component\n            if (highestOnscreenLocation) this.setLocationID(highestOnscreenLocation);\n        }\n\n    });\n\n    return new Bookmarking();\n\n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/accessibilityView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AccessibilityView = Backbone.View.extend({\n\n        el: '#accessibility-toggle',\n\n        events: {\n            'click' : 'toggleAccessibility'\n        },\n\n        initialize: function() {\n            this.setupHelpers();\n\n            this.setupUsageInstructions();\n\n            if(Adapt.offlineStorage.ready) {\n                this.onOfflineStorageReady();\n            } else {\n                Adapt.once('offlineStorage:ready', _.bind(this.onOfflineStorageReady, this));\n            }\n        },\n\n        onOfflineStorageReady: function() {\n            Adapt.config.get(\"_accessibility\")._isActive = Adapt.offlineStorage.get('a11y') || false;\n\n            this.configureAccessibility();\n\n            this.render();\n        },\n\n        render: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n\n            if (!hasAccessibility) {\n                return;\n            } else {\n                var isActive = Adapt.config.get('_accessibility')._isActive;\n                var offLabel = this.model.get(\"_accessibility\") && this.model.get(\"_accessibility\").accessibilityToggleTextOff;\n                var onLabel = this.model.get(\"_accessibility\") && this.model.get(\"_accessibility\").accessibilityToggleTextOn;\n\n                var toggleText = isActive ? offLabel : onLabel;\n\n                this.$el.html(toggleText).attr('aria-label', $.a11y_normalize(toggleText));\n\n                if (isActive) {\n                    $(\"html\").addClass('accessibility');\n                    $(\"#accessibility-instructions\").a11y_focus();\n                } else {\n                    $(\"html\").removeClass('accessibility');\n                }\n            }\n        },\n\n        toggleAccessibility: function(event) {\n            if(event) event.preventDefault();\n\n            var hasAccessibility = Adapt.config.get('_accessibility')._isActive;\n\n            var toggleAccessibility = (hasAccessibility) ? false : true;\n\n            Adapt.config.get('_accessibility')._isActive = toggleAccessibility;\n\n            this.configureAccessibility();\n\n            this.setupUsageInstructions();\n\n            this.render();\n\n            this.trigger('accessibility:toggle');\n        },\n\n        setupHelpers: function() {\n            var config = Adapt.config.get(\"_accessibility\");\n\n            Handlebars.registerHelper('a11y_text', function(text) {\n                //ALLOW ENABLE/DISABLE OF a11y_text HELPER\n                if (config && config._isTextProcessorEnabled === false) {\n                    return text;\n                } else {\n                    return $.a11y_text(text);\n                }\n            });\n        },\n\n        configureAccessibility: function() {\n\n            var isActive = Adapt.config.get('_accessibility')._isActive;\n\n            if (!Modernizr.touch && (Adapt.offlineStorage.get('a11y') !== isActive)) {\n                Adapt.offlineStorage.set(\"a11y\", isActive);\n            }\n\n            if (isActive) {\n\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: true,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: true,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: true,\n                    isAlertsEnabled: true\n                });\n            } else {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: false,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: false,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: false,\n                    isAlertsEnabled: false\n                });\n            }\n\n            $.a11y.ready();\n        },\n\n        setupUsageInstructions: function() {\n            if (!this.model.get(\"_accessibility\") || !this.model.get(\"_accessibility\")._accessibilityInstructions) {\n                $(\"#accessibility-instructions\").remove();\n                return;\n            }\n\n            var instructionsList =  this.model.get(\"_accessibility\")._accessibilityInstructions;\n\n            var usageInstructions;\n            if (instructionsList[Adapt.device.browser]) {\n                usageInstructions = instructionsList[Adapt.device.browser];\n            } else if (Modernizr.touch) {\n                usageInstructions = instructionsList.touch || \"\";\n            } else {\n                usageInstructions = instructionsList.notouch || \"\";\n            }\n\n           $(\"#accessibility-instructions\").html( usageInstructions );\n        }\n\n    });\n\n    return AccessibilityView;\n\n});\n",
    "define('extensions/adapt-contrib-languagePicker/js/languagePickerView',[\n    'core/js/adapt',\n    './accessibilityView'\n], function(Adapt, accessibilityView) {\n    \n    var LanguagePickerView = Backbone.View.extend({\n        \n        events: {\n            'click .languagepicker-languages button': 'onLanguageClick'\n        },\n        \n        className: 'languagepicker',\n        \n        initialize: function () {\n            this.initializeAccessibility();\n            $(\"html\").addClass(\"in-languagepicker\");\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n        \n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n            this.$el.addClass(data._classes);\n\n            document.title = this.model.get('title') || \"\";\n            \n            _.defer(_.bind(function () {\n                this.postRender();\n            }, this));\n        },\n        \n        postRender: function () {\n            $('.loading').hide();\n        },\n        \n        onLanguageClick: function (event) {\n            this.destroyAccessibility();\n            this.model.setLanguage($(event.target).val());\n        },\n\n        initializeAccessibility: function() {\n            this.accessibilityView = new accessibilityView({\n                model:this.model\n            });\n            \n            // we need to re-render if accessibility gets switched on\n            this.listenTo(this.accessibilityView, 'accessibility:toggle', this.render);\n        },\n\n        destroyAccessibility: function() {\n            this.accessibilityView.remove();\n        },\n\n        remove: function() {\n            $(\"html\").removeClass(\"in-languagepicker\");\n\n            Backbone.View.prototype.remove.apply(this, arguments);\n        }\n        \n    }, {\n        template: 'languagePickerView'\n    });\n\n    return LanguagePickerView;\n\n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView',[\n    'core/js/adapt',\n    'backbone'\n], function(Adapt, Backbone) {\n    \n    var LanguagePickerDrawerView = Backbone.View.extend({\n        \n        events: {\n            'click button': 'onButtonClick'\n        },\n        \n        initialize: function () {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(Adapt, 'languagepicker:changelanguage:yes', this.onDoChangeLanguage);\n            this.listenTo(Adapt, 'languagepicker:changelanguage:no', this.onDontChangeLanguage);\n            this.render();\n        },\n        \n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n        },\n        \n        onButtonClick: function (event) {\n            var newLanguage = $(event.target).attr('data-language');\n            this.model.set('newLanguage', newLanguage);\n            var data = this.model.getLanguageDetails(newLanguage);\n            \n            var promptObject = {\n                _classes: \"dir-ltr\",\n                title: data.warningTitle,\n                body: data.warningMessage,\n                _prompts:[\n                    {\n                        promptText: data._buttons.yes,\n                        _callbackEvent: \"languagepicker:changelanguage:yes\"\n                    },\n                    {\n                        promptText: data._buttons.no,\n                        _callbackEvent: \"languagepicker:changelanguage:no\"\n                    }\n                ],\n                _showIcon: true\n            };\n\n            if (data._direction === 'rtl') {\n                promptObject._classes = \"dir-rtl\";\n            }\n            \n            //keep active element incase the user cancels - usually navigation bar icon\n            this.$finishFocus = $.a11y.state.focusStack.pop();\n            //move drawer close focus to #focuser\n            $.a11y.state.focusStack.push($(\"#focuser\"));\n\n            Adapt.once('drawer:closed', function() {\n                //wait for drawer to fully close\n                _.delay(function(){\n                    //show yes/no popup\n                    Adapt.once('popup:opened', function() {\n                        //move popup close focus to #focuser\n                        $.a11y.state.focusStack.pop();\n                        $.a11y.state.focusStack.push($(\"#focuser\"));\n                    });\n\n                    Adapt.trigger('notify:prompt', promptObject);\n                }, 250);\n            });\n\n            Adapt.trigger('drawer:closeDrawer');\n        },\n        \n        onDoChangeLanguage: function () {\n            // set default languge\n            var newLanguage = this.model.get('newLanguage');\n            this.model.setLanguage(newLanguage);\n            this.remove();\n        },\n        \n        onDontChangeLanguage: function () {\n            this.remove();\n\n            //wait for notify to close fully\n            _.delay(_.bind(function(){\n                //focus on navigation bar icon\n                this.$finishFocus.a11y_focus();\n            }, this), 500);\n\n        }\n        \n    }, {\n        template: 'languagePickerDrawerView'\n    });\n\n    return LanguagePickerDrawerView;\n\n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/languagePickerNavView',[\n    'core/js/adapt',\n    'backbone',\n    './languagePickerDrawerView'\n], function(Adapt, Backbone, LanguagePickerDrawerView) {\n    \n    var LanguagePickerNavView = Backbone.View.extend({\n        \n        tagName: 'button',\n        \n        className: function () {\n            var classNames = 'languagepicker-icon base icon';\n            var customClass = this.model.get('_languagePickerIconClass') || 'icon-language-2';\n\n            return classNames + ' ' + customClass;\n        },\n        \n        events: {\n            'click': 'onClick'\n        },\n        \n        initialize: function () {\n            this.listenTo(Adapt, 'remove', this.remove);\n        },\n        \n        onClick: function (event) {\n            Adapt.drawer.triggerCustomView(new LanguagePickerDrawerView({model: this.model}).$el, false);\n        }\n        \n    });\n\n    return LanguagePickerNavView;\n\n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/languagePickerModel',[\n        'core/js/adapt',\n        'backbone'\n], function (Adapt, Backbone) {\n    \n    var LanguagePickerModel = Backbone.Model.extend({\n        \n        defaults: {\n            \"_isEnabled\": false,\n            \"displayTitle\": \"\",\n            \"body\": \"\",\n            \"_languages\": []\n        },\n        \n        initialize: function () {\n            this.listenTo(Adapt.config, 'change:_activeLanguage', this.onConfigChange);\n        },\n\n        getLanguageDetails: function (language) {\n            var _languages = this.get('_languages');\n            return _.find(_languages, function (item) {\n                return (item._language == language);\n            });\n        },\n\n        setLanguage: function (language) {\n            Adapt.config.set({\n                '_activeLanguage': language,\n                '_defaultDirection': this.getLanguageDetails(language)._direction\n            });\n        },\n        \n        onConfigChange: function (model, value, options) {\n            this.markLanguageAsSelected(value);\n        },\n        \n        markLanguageAsSelected: function(language) {\n            var languages = this.get('_languages');\n\n            for (var i = 0; i < languages.length; i++) {\n                if (languages[i]._language === language) {\n                    languages[i]._isSelected = true;\n                } else {\n                    languages[i]._isSelected = false;\n                }\n            }\n\n            this.set('_languages', languages);\n        }\n        \n    });\n    \n    return LanguagePickerModel;\n    \n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/adapt-languagePicker',[\n    'core/js/adapt',\n    'backbone',\n    './languagePickerView',\n    './languagePickerNavView',\n    './languagePickerModel'\n], function(Adapt, Backbone, LanguagePickerView, LanguagePickerNavView, LanguagePickerModel) {\n\n    var languagePickerModel;\n\n    Adapt.once('configModel:dataLoaded', onConfigLoaded);\n\n    /**\n     * Once the Adapt config has loaded, check to see if the language picker is enabled. If it is:\n     * - stop the rest of the .json from loading\n     * - set up the language picker model\n     * - register for events to allow us to display the language picker icon in the navbar on pages and menus\n     * - wait for offline storage to be ready so that we can check to see if there's a stored language choice or not\n     */\n    function onConfigLoaded() {\n        if (!Adapt.config.has('_languagePicker')) return;\n        if (!Adapt.config.get('_languagePicker')._isEnabled) return;\n    \n        Adapt.config.set(\"_canLoadData\", false);\n\n        languagePickerModel = new LanguagePickerModel(Adapt.config.get('_languagePicker'));\n        \n        Adapt.on('router:page', setupNavigationView);\n        Adapt.on('router:menu', setupNavigationView);\n            \n        if(Adapt.offlineStorage.ready) {// on the offchance that it may already be ready...\n            onOfflineStorageReady();\n        } else {\n            Adapt.once('offlineStorage:ready', onOfflineStorageReady);\n        }\n    }\n\n    /**\n     * Once offline storage is ready, check to see if a language was previously selected by the user\n     * If it was, load it. If it wasn't, show the language picker\n     */\n    function onOfflineStorageReady() {\n        var storedLanguage = Adapt.offlineStorage.get(\"lang\");\n\n        if (storedLanguage) {\n            languagePickerModel.setLanguage(storedLanguage);\n        } else if (languagePickerModel.get('_showOnCourseLoad') === false) {\n            languagePickerModel.setLanguage(Adapt.config.get('_defaultLanguage'));\n        } else {\n            showLanguagePickerView();\n        }\n    }\n\n    function showLanguagePickerView () {\n        var languagePickerView = new LanguagePickerView({\n            model: languagePickerModel\n        });\n        \n        languagePickerView.$el.appendTo('#wrapper');\n    }\n    \n    function setupNavigationView () {\n        /* \n         * On the framework this isn't an issue, but courses built in the authoring tool before the ARIA label \n         * was added will break unless the extension is removed then added again.\n         */\n        var courseGlobals = Adapt.course.get('_globals')._extensions;\n        var navigationBarLabel = '';\n        if (courseGlobals._languagePicker) {\n            navigationBarLabel = courseGlobals._languagePicker.navigationBarLabel;\n        }\n\n        var languagePickerNavView = new LanguagePickerNavView({\n            model: languagePickerModel,\n            attributes:  {\n                \"aria-label\": navigationBarLabel\n            }\n        });\n        \n        languagePickerNavView.$el.appendTo('.navigation-inner');\n    }\n    \n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/completionCalculations',[\n    'coreJS/adapt'\n], function(Adapt) {\n    \n    // Calculate completion of a contentObject\n    function calculateCompletion(contentObjectModel) {\n\n        var viewType = contentObjectModel.get('_type'),\n            nonAssessmentComponentsTotal = 0,\n            nonAssessmentComponentsCompleted = 0,\n            assessmentComponentsTotal = 0,\n            assessmentComponentsCompleted = 0,\n            subProgressCompleted = 0,\n            subProgressTotal = 0,\n            isComplete = contentObjectModel.get(\"_isComplete\") ? 1 : 0;\n\n        // If it's a page\n        if (viewType == 'page') {\n            var children = _.filter(contentObjectModel.findDescendantModels('components'), function(comp) {\n                return comp.get('_isAvailable') === true && comp.get('_isOptional') === false;\n            });\n\n            var availableChildren = filterAvailableChildren(children);\n            var components = getPageLevelProgressEnabledModels(availableChildren);\n\n            var nonAssessmentComponents = getNonAssessmentComponents(components);\n\n            nonAssessmentComponentsTotal = nonAssessmentComponents.length | 0,\n            nonAssessmentComponentsCompleted = getComponentsCompleted(nonAssessmentComponents).length;\n\n            var assessmentComponents = getAssessmentComponents(components);\n\n            assessmentComponentsTotal = assessmentComponents.length | 0,\n            assessmentComponentsCompleted = getComponentsInteractionCompleted(assessmentComponents).length;\n\n            subProgressCompleted = contentObjectModel.get(\"_subProgressComplete\") || 0;\n            subProgressTotal = contentObjectModel.get(\"_subProgressTotal\") || 0;\n\n            var pageCompletion = {\n                \"subProgressCompleted\": subProgressCompleted,\n                \"subProgressTotal\": subProgressTotal,\n                \"nonAssessmentCompleted\": nonAssessmentComponentsCompleted,\n                \"nonAssessmentTotal\": nonAssessmentComponentsTotal,\n                \"assessmentCompleted\": assessmentComponentsCompleted,\n                \"assessmentTotal\": assessmentComponentsTotal\n            };\n\n            if (contentObjectModel.get(\"_pageLevelProgress\") && contentObjectModel.get(\"_pageLevelProgress\")._showPageCompletion !== false \n                && Adapt.course.get(\"_pageLevelProgress\") && Adapt.course.get(\"_pageLevelProgress\")._showPageCompletion !== false) {\n                //optionally add one point extra for page completion to eliminate incomplete pages and full progress bars\n                // if _showPageCompletion is true then the progress bar should also consider it so add 1 to nonAssessmentTotal\n                pageCompletion.nonAssessmentCompleted += isComplete;\n                pageCompletion.nonAssessmentTotal += 1;\n            }\n\n            return pageCompletion;\n        }\n        // If it's a sub-menu\n        else if (viewType == 'menu') {\n\n            _.each(contentObjectModel.get('_children').models, function(contentObject) {\n                var completionObject = calculateCompletion(contentObject);\n                subProgressCompleted += contentObjectModel.subProgressCompleted || 0;\n                subProgressTotal += contentObjectModel.subProgressTotal || 0;\n                nonAssessmentComponentsTotal += completionObject.nonAssessmentTotal;\n                nonAssessmentComponentsCompleted += completionObject.nonAssessmentCompleted;\n                assessmentComponentsTotal += completionObject.assessmentTotal;\n                assessmentComponentsCompleted += completionObject.assessmentCompleted;\n            });\n\n            return {\n                \"subProgressCompleted\": subProgressCompleted,\n                \"subProgressTotal\" : subProgressTotal,\n                \"nonAssessmentCompleted\": nonAssessmentComponentsCompleted,\n                \"nonAssessmentTotal\": nonAssessmentComponentsTotal,\n                \"assessmentCompleted\": assessmentComponentsCompleted,\n                \"assessmentTotal\": assessmentComponentsTotal,\n            };\n        }\n    }\n\n    function getNonAssessmentComponents(models) {\n        return _.filter(models, function(model) {\n            return !model.get('_isPartOfAssessment');\n        });\n    }\n\n    function getAssessmentComponents(models) {\n        return _.filter(models, function(model) {\n            return model.get('_isPartOfAssessment');\n        });\n    }\n\n    function getComponentsCompleted(models) {\n        return _.filter(models, function(item) {\n            return item.get('_isComplete');\n        });\n    }\n\n    function getComponentsInteractionCompleted(models) {\n        return _.filter(models, function(item) {\n            return item.get('_isComplete');\n        });\n    }\n\n    //Get only those models who were enabled for pageLevelProgress\n    function getPageLevelProgressEnabledModels(models) {\n        return _.filter(models, function(model) {\n            if (model.get('_pageLevelProgress')) {\n                return model.get('_pageLevelProgress')._isEnabled;\n            }\n        });\n    }\n\n    function unavailableInHierarchy(parents) {\n        if (parents.length > 0) {\n            var parentsAvailable = _.map(parents, function(parent) {\n                return parent.get('_isAvailable');\n            });\n            return _.indexOf(parentsAvailable, false) > -1;\n        } else {\n            return;\n        }\n    }\n\n    function filterAvailableChildren(children) {\n        var availableChildren = [];\n\n        for(var child = 0; child < children.length; child++) {\n            var parents = children[child].getAncestorModels();\n            if (!unavailableInHierarchy(parents)) {\n                availableChildren.push(children[child]);\n            }\n        }\n\n        return availableChildren;\n    }\n\n    return {\n    \tcalculateCompletion: calculateCompletion,\n    \tgetPageLevelProgressEnabledModels: getPageLevelProgressEnabledModels,\n        filterAvailableChildren: filterAvailableChildren\n    };\n\n})\n;\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView',['require','coreJS/adapt','backbone'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n\n    var PageLevelProgressMenuView = Backbone.View.extend({\n\n        className: 'page-level-progress-menu-item',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n\n            this.ariaText = '';\n            if (Adapt.course.get('_globals')._extensions && Adapt.course.get('_globals')._extensions._pageLevelProgress && Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar) {\n                this.ariaText = Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar + ' ';\n            }\n\n            this.render();\n\n            _.defer(_.bind(function() {\n                this.updateProgressBar();\n            }, this));\n        },\n\n        events: {\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            _.extend(data, {\n                _globals: Adapt.course.get('_globals')\n            });\n            var template = Handlebars.templates['pageLevelProgressMenu'];\n\n            this.$el.html(template(data));\n            return this;\n        },\n\n        updateProgressBar: function() {\n            if (this.model.get('completedChildrenAsPercentage')) {\n                var percentageOfCompleteComponents = this.model.get('completedChildrenAsPercentage');\n            } else {\n                var percentageOfCompleteComponents = 0;\n            }\n\n            // Add percentage of completed components as an aria label attribute\n            this.$('.page-level-progress-menu-item-indicator-bar .aria-label').html(this.ariaText + Math.floor(percentageOfCompleteComponents) + '%');\n\n        },\n\n    });\n\n    return PageLevelProgressMenuView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView',['require','coreJS/adapt','backbone'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n\n    var PageLevelProgressView = Backbone.View.extend({\n\n        className: 'page-level-progress',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .page-level-progress-item button': 'scrollToPageElement'\n        },\n\n        scrollToPageElement: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            var currentComponentSelector = '.' + $(event.currentTarget).attr('data-page-level-progress-id');\n            var $currentComponent = $(currentComponentSelector);\n            Adapt.once('drawer:closed', function() {\n                Adapt.scrollTo($currentComponent, { duration:400 });\n            });\n            Adapt.trigger('drawer:closeDrawer');\n        },\n\n        render: function() {\n            var components = this.collection.toJSON();\n            var data = {\n                components: components,\n                _globals: Adapt.course.get('_globals')\n            };\n            var template = Handlebars.templates['pageLevelProgress'];\n            this.$el.html(template(data));\n            this.$el.a11y_aria_label(true);\n            return this;\n        }\n\n    });\n\n    return PageLevelProgressView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView',['require','coreJS/adapt','backbone','./completionCalculations','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n    var completionCalculations = require('./completionCalculations');\n\n    var PageLevelProgressView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView');\n\n    var PageLevelProgressNavigationView = Backbone.View.extend({\n\n        tagName: 'button',\n\n        className: 'base page-level-progress-navigation',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(Adapt, 'router:location', this.updateProgressBar);\n            this.listenTo(Adapt, 'pageLevelProgress:update', this.refreshProgressBar);\n            this.listenTo(this.collection, 'change:_isComplete', this.updateProgressBar);\n            this.listenTo(this.model, 'change:_isComplete', this.updateProgressBar);\n            this.$el.attr('role', 'button');\n            this.ariaText = '';\n            \n            if (Adapt.course.has('_globals') && Adapt.course.get('_globals')._extensions && Adapt.course.get('_globals')._extensions._pageLevelProgress && Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar) {\n                this.ariaText = Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar +  ' ';\n            }\n            \n            this.render();\n            \n            _.defer(_.bind(function() {\n                this.updateProgressBar();\n            }, this));\n        },\n\n        events: {\n            'click': 'onProgressClicked'\n        },\n\n        render: function() {\n            var components = this.collection.toJSON();\n            var data = {\n                components: components,\n                _globals: Adapt.course.get('_globals')\n            };            \n\n            var template = Handlebars.templates['pageLevelProgressNavigation'];\n            $('.navigation-drawer-toggle-button').after(this.$el.html(template(data)));\n            return this;\n        },\n        \n        refreshProgressBar: function() {\n            var currentPageComponents = _.filter(this.model.findDescendantModels('components'), function(comp) {\n                return comp.get('_isAvailable') === true;\n            });\n            var availableChildren = completionCalculations.filterAvailableChildren(currentPageComponents);\n            var enabledProgressComponents = completionCalculations.getPageLevelProgressEnabledModels(availableChildren);\n            \n            this.collection.reset(enabledProgressComponents);\n            this.updateProgressBar();\n        },\n\n        updateProgressBar: function() {\n            var completionObject = completionCalculations.calculateCompletion(this.model);\n            \n            //take all assessment, nonassessment and subprogress into percentage\n            //this allows the user to see if assessments have been passed, if assessment components can be retaken, and all other component's completion\n            \n            var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;\n            var total  = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;\n\n            var percentageComplete = Math.floor((completed / total)*100);\n\n\n            this.$('.page-level-progress-navigation-bar').css('width', percentageComplete + '%');\n\n            // Add percentage of completed components as an aria label attribute\n            this.$el.attr('aria-label', this.ariaText +  percentageComplete + '%');\n\n            // Set percentage of completed components to model attribute to update progress on MenuView\n            this.model.set('completedChildrenAsPercentage', percentageComplete);\n        },\n\n        onProgressClicked: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            Adapt.drawer.triggerCustomView(new PageLevelProgressView({collection: this.collection}).$el, false);\n        }\n\n    });\n\n    return PageLevelProgressNavigationView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress',['require','coreJS/adapt','backbone','./completionCalculations','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n    var completionCalculations = require('./completionCalculations');\n\n    var PageLevelProgressMenuView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView');\n    var PageLevelProgressNavigationView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView');\n\n    function setupPageLevelProgress(pageModel, enabledProgressComponents) {\n        new PageLevelProgressNavigationView({model: pageModel, collection: new Backbone.Collection(enabledProgressComponents)});\n    }\n\n    // This should add/update progress on menuView\n    Adapt.on('menuView:postRender', function(view) {\n        if (view.model.get('_id') == Adapt.location._currentId) return;\n\n        var coursePLPConfig = Adapt.course.get('_pageLevelProgress');\n\n        // do not proceed if pageLevelProgress is not enabled in course.json\n        if (!coursePLPConfig || !coursePLPConfig._isEnabled) {\n            return;\n        }\n\n        var pageLevelProgress = view.model.get('_pageLevelProgress');\n        var viewType = view.model.get('_type');\n\n        // Progress bar should not render for course viewType\n        if (viewType == 'course') return;\n\n        if (pageLevelProgress && pageLevelProgress._isEnabled) {\n            var completionObject = completionCalculations.calculateCompletion(view.model);\n\n            //take all non-assessment components and subprogress info into the percentage\n            //this allows the user to see if the assessments are passed (subprogress) and all other components are complete\n            \n            var completed = completionObject.nonAssessmentCompleted + completionObject.subProgressCompleted;\n            var total = completionObject.nonAssessmentTotal + completionObject.subProgressTotal;\n\n            var percentageComplete = Math.floor((completed / total) * 100);\n            \n            view.model.set('completedChildrenAsPercentage', percentageComplete);\n            view.$el.find('.menu-item-inner').append(new PageLevelProgressMenuView({model: view.model}).$el);\n        }\n    });\n\n    // This should add/update progress on page navigation bar\n    Adapt.on('router:page', function(pageModel) {\n        var coursePLPConfig = Adapt.course.get('_pageLevelProgress');\n        var pagePLPConfig = pageModel.get('_pageLevelProgress');\n\n        // do not proceed if pageLevelProgress is not enabled in course.json or for the content object\n        if (!coursePLPConfig || !coursePLPConfig._isEnabled || !pagePLPConfig || !pagePLPConfig._isEnabled) {\n            return;\n        }\n\n        var currentPageComponents = _.filter(pageModel.findDescendantModels('components'), function(comp) {\n            return comp.get('_isAvailable') === true;\n        });\n        var availableComponents = completionCalculations.filterAvailableChildren(currentPageComponents);\n        var enabledProgressComponents = completionCalculations.getPageLevelProgressEnabledModels(availableComponents);\n\n        if (enabledProgressComponents.length > 0) {\n            setupPageLevelProgress(pageModel, enabledProgressComponents);\n        }\n    });\n\n});\n\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var ResourcesView = Backbone.View.extend({\n\n        className: \"resources\",\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .resources-filter button': 'onFilterClicked',\n            'click .resources-item-container button': 'onResourceClicked'\n        },\n\n        render: function() {\n            var collectionData = this.collection.toJSON();\n            var modelData = this.model.toJSON();\n            var template = Handlebars.templates[\"resources\"];\n            this.$el.html(template({model: modelData, resources:collectionData, _globals: Adapt.course.get('_globals')}));\n            _.defer(_.bind(this.postRender, this));\n            return this;\n        },\n\n        postRender: function() {\n            this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);\n        },\n\n        onFilterClicked: function(event) {\n            event.preventDefault();\n            var $currentTarget = $(event.currentTarget);\n            this.$('.resources-filter button').removeClass('selected');\n            var filter = $currentTarget.addClass('selected').attr('data-filter');\n            var items = [];\n\n            if (filter === 'all') {\n                items = this.$('.resources-item').removeClass('display-none');\n            } else {\n                this.$('.resources-item').removeClass('display-none').not(\".\" + filter).addClass('display-none');\n                items = this.$('.resources-item.' + filter);\n            }\n\n            if (items.length === 0) return;\n            $(items[0]).a11y_focus();\n        },\n\n        onResourceClicked: function(event) {\n            var data = $(event.currentTarget).data();\n\n            if (!data.forceDownload || Adapt.device.OS === 'ios') {\n                window.top.open(data.href);\n                return;\n            }\n\n            var dummyLink = document.createElement('a');\n            // Internet Explorer has no support for the 'download' attribute\n            if (Adapt.device.browser === \"internet explorer\") {\n                dummyLink.target = \"_blank\";\n            } else {\n                dummyLink.download = data.filename;\n            }\n            dummyLink.href = data.href;\n\n            document.body.appendChild(dummyLink);\n            dummyLink.click();\n            document.body.removeChild(dummyLink);\n            delete dummyLink;\n        }\n    });\n\n    return ResourcesView;\n});\n\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers',['require','handlebars'],function(require) {\n\n\tvar Handlebars = require('handlebars');\n\n\tHandlebars.registerHelper('if_collection_contains', function(collection, attribute, value, block) {\n\t\tvar makeBlockVisible = false;\n\n\t\t_.each(collection, function(resource) {\n\t\t\tif (resource[attribute] === value) {\n\t\t\t\tmakeBlockVisible = true;\n\t\t\t}\n\t\t});\n\t\tif(makeBlockVisible) {\n            return block.fn(this);\n        } else {\n            return block.inverse();\n        }\n    });\n\n    Handlebars.registerHelper('if_collection_contains_only_one_item', function(collection, attribute, block) {\n\t\tvar attributeCount = [];\n\n\t\t_.each(collection, function(resource) {\n\t\t\tvar resourceAttribute = resource[attribute];\n\t\t\tif (_.indexOf(attributeCount, resourceAttribute) === -1) {\n\t\t\t\tattributeCount.push(resourceAttribute);\n\t\t\t}\n\t\t});\n\n\t\tif (attributeCount.length <= 1) {\n\t\t\treturn block.fn(this);\n\t\t} else {\n\t\t\treturn block.inverse(this);\n\t\t}\n\n    });\n\n    Handlebars.registerHelper('return_column_layout_from_collection_length', function(collection, attribute) {\n\t\tvar attributeCount = [];\n\n\t\t_.each(collection, function(resource) {\n\t\t\tvar resourceAttribute = resource[attribute];\n\t\t\tif (_.indexOf(attributeCount, resourceAttribute) === -1) {\n\t\t\t\tattributeCount.push(resourceAttribute);\n\t\t\t}\n\t\t});\n\n\t\treturn (attributeCount.length + 1);\n\n    });\n\n})\n\t;\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resources',[\n    'backbone',\n    'core/js/adapt',\n    './adapt-contrib-resourcesView',\n    './adapt-contrib-resourcesHelpers'\n], function(Backbone, Adapt, ResourcesView, ResourcesHelpers) {\n\n    function setupResources(resourcesData) {\n\n        var resourcesModel = new Backbone.Model(resourcesData);\n        var resourcesCollection = new Backbone.Collection(resourcesModel.get('_resourcesItems'));\n\n        Adapt.on('resources:showResources', function() {\n            Adapt.drawer.triggerCustomView(new ResourcesView({\n                model: resourcesModel,\n                collection: resourcesCollection\n            }).$el);\n        });\n\n    }\n\n    function initResources() {\n\n        var courseResources = Adapt.course.get('_resources');\n\n        // do not proceed until resource set on course.json\n        if (!courseResources || courseResources._isEnabled === false) return;\n\n        var drawerObject = {\n            title: courseResources.title,\n            description: courseResources.description,\n            className: 'resources-drawer',\n            drawerOrder: courseResources._drawerOrder || 0\n        };\n\n        Adapt.drawer.addItem(drawerObject, 'resources:showResources');\n\n        setupResources(courseResources);\n\n    }\n\n    Adapt.on('adapt:start', initResources);\n\n});\n\n",
    "/*global console*/\n\n/* ===========================================================\n\npipwerks SCORM Wrapper for JavaScript\nv1.1.20160322\n\nCreated by Philip Hutchison, January 2008-2016\nhttps://github.com/pipwerks/scorm-api-wrapper\n\nCopyright (c) Philip Hutchison\nMIT-style license: http://pipwerks.mit-license.org/\n\nThis wrapper works with both SCORM 1.2 and SCORM 2004.\n\nInspired by APIWrapper.js, created by the ADL and\nConcurrent Technologies Corporation, distributed by\nthe ADL (http://www.adlnet.gov/scorm).\n\nSCORM.API.find() and SCORM.API.get() functions based\non ADL code, modified by Mike Rustici\n(http://www.scorm.com/resources/apifinder/SCORMAPIFinder.htm),\nfurther modified by Philip Hutchison\n\n=============================================================== */\n\n\nvar pipwerks = {};                                  //pipwerks 'namespace' helps ensure no conflicts with possible other \"SCORM\" variables\npipwerks.UTILS = {};                                //For holding UTILS functions\npipwerks.debug = { isActive: true };                //Enable (true) or disable (false) for debug mode\n\npipwerks.SCORM = {                                  //Define the SCORM object\n    version:    null,                               //Store SCORM version.\n    handleCompletionStatus: true,                   //Whether or not the wrapper should automatically handle the initial completion status\n    handleExitMode: true,                           //Whether or not the wrapper should automatically handle the exit mode\n    API:        { handle: null,\n                  isFound: false },                 //Create API child object\n    connection: { isActive: false },                //Create connection child object\n    data:       { completionStatus: null,\n                  exitStatus: null },               //Create data child object\n    debug:      {}                                  //Create debug child object\n};\n\n\n\n/* --------------------------------------------------------------------------------\n   pipwerks.SCORM.isAvailable\n   A simple function to allow Flash ExternalInterface to confirm\n   presence of JS wrapper before attempting any LMS communication.\n\n   Parameters: none\n   Returns:    Boolean (true)\n----------------------------------------------------------------------------------- */\n\npipwerks.SCORM.isAvailable = function(){\n    return true;\n};\n\n\n\n// ------------------------------------------------------------------------- //\n// --- SCORM.API functions ------------------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.API.find(window)\n   Looks for an object named API in parent and opener windows\n\n   Parameters: window (the browser window object).\n   Returns:    Object if API is found, null if no API found\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.API.find = function(win){\n\n    var API = null,\n        findAttempts = 0,\n        findAttemptLimit = 500,\n        traceMsgPrefix = \"SCORM.API.find\",\n        trace = pipwerks.UTILS.trace,\n        scorm = pipwerks.SCORM;\n\n    while ((!win.API && !win.API_1484_11) &&\n           (win.parent) &&\n           (win.parent != win) &&\n           (findAttempts <= findAttemptLimit)){\n\n                findAttempts++;\n                win = win.parent;\n\n    }\n\n    //If SCORM version is specified by user, look for specific API\n    if(scorm.version){\n\n        switch(scorm.version){\n\n            case \"2004\" :\n\n                if(win.API_1484_11){\n\n                    API = win.API_1484_11;\n\n                } else {\n\n                    trace(traceMsgPrefix +\": SCORM version 2004 was specified by user, but API_1484_11 cannot be found.\");\n\n                }\n\n                break;\n\n            case \"1.2\" :\n\n                if(win.API){\n\n                    API = win.API;\n\n                } else {\n\n                    trace(traceMsgPrefix +\": SCORM version 1.2 was specified by user, but API cannot be found.\");\n\n                }\n\n                break;\n\n        }\n\n    } else {                             //If SCORM version not specified by user, look for APIs\n\n        if(win.API_1484_11) {            //SCORM 2004-specific API.\n\n            scorm.version = \"2004\";      //Set version\n            API = win.API_1484_11;\n\n        } else if(win.API){              //SCORM 1.2-specific API\n\n            scorm.version = \"1.2\";       //Set version\n            API = win.API;\n\n        }\n\n    }\n\n    if(API){\n\n        trace(traceMsgPrefix +\": API found. Version: \" +scorm.version);\n        trace(\"API: \" +API);\n\n    } else {\n\n        trace(traceMsgPrefix +\": Error finding API. \\nFind attempts: \" +findAttempts +\". \\nFind attempt limit: \" +findAttemptLimit);\n\n    }\n\n    return API;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.API.get()\n   Looks for an object named API, first in the current window's frame\n   hierarchy and then, if necessary, in the current window's opener window\n   hierarchy (if there is an opener window).\n\n   Parameters:  None.\n   Returns:     Object if API found, null if no API found\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.API.get = function(){\n\n    var API = null,\n        win = window,\n        scorm = pipwerks.SCORM,\n        find = scorm.API.find,\n        trace = pipwerks.UTILS.trace;\n\n    API = find(win);\n\n    if(!API && win.parent && win.parent != win){\n        API = find(win.parent);\n    }\n\n    if(!API && win.top && win.top.opener){\n        API = find(win.top.opener);\n    }\n\n    //Special handling for Plateau\n    //Thanks to Joseph Venditti for the patch\n    if(!API && win.top && win.top.opener && win.top.opener.document) {\n        API = find(win.top.opener.document);\n    }\n\n    if(API){\n        scorm.API.isFound = true;\n    } else {\n        trace(\"API.get failed: Can't find the API!\");\n    }\n\n    return API;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.API.getHandle()\n   Returns the handle to API object if it was previously set\n\n   Parameters:  None.\n   Returns:     Object (the pipwerks.SCORM.API.handle variable).\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.API.getHandle = function() {\n\n    var API = pipwerks.SCORM.API;\n\n    if(!API.handle && !API.isFound){\n\n        API.handle = API.get();\n\n    }\n\n    return API.handle;\n\n};\n\n\n\n// ------------------------------------------------------------------------- //\n// --- pipwerks.SCORM.connection functions --------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.connection.initialize()\n   Tells the LMS to initiate the communication session.\n\n   Parameters:  None\n   Returns:     Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.connection.initialize = function(){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        completionStatus = scorm.data.completionStatus,\n        trace = pipwerks.UTILS.trace,\n        makeBoolean = pipwerks.UTILS.StringToBoolean,\n        debug = scorm.debug,\n        traceMsgPrefix = \"SCORM.connection.initialize \";\n\n    trace(\"connection.initialize called.\");\n\n    if(!scorm.connection.isActive){\n\n        var API = scorm.API.getHandle(),\n            errorCode = 0;\n\n        if(API){\n\n            switch(scorm.version){\n                case \"1.2\" : success = makeBoolean(API.LMSInitialize(\"\")); break;\n                case \"2004\": success = makeBoolean(API.Initialize(\"\")); break;\n            }\n\n            if(success){\n\n                //Double-check that connection is active and working before returning 'true' boolean\n                errorCode = debug.getCode();\n\n                if(errorCode !== null && errorCode === 0){\n\n                    scorm.connection.isActive = true;\n\n                    if(scorm.handleCompletionStatus){\n\n                        //Automatically set new launches to incomplete\n                        completionStatus = scorm.status(\"get\");\n\n                        if(completionStatus){\n\n                            switch(completionStatus){\n\n                                //Both SCORM 1.2 and 2004\n                                case \"not attempted\": scorm.status(\"set\", \"incomplete\"); break;\n\n                                //SCORM 2004 only\n                                case \"unknown\" : scorm.status(\"set\", \"incomplete\"); break;\n\n                                //Additional options, presented here in case you'd like to use them\n                                //case \"completed\"  : break;\n                                //case \"incomplete\" : break;\n                                //case \"passed\"     : break;    //SCORM 1.2 only\n                                //case \"failed\"     : break;    //SCORM 1.2 only\n                                //case \"browsed\"    : break;    //SCORM 1.2 only\n\n                            }\n\n                            //Commit changes\n                            scorm.save();\n\n                        }\n\n                    }\n\n                } else {\n\n                    success = false;\n                    trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\" \\nError info: \" +debug.getInfo(errorCode));\n\n                }\n\n            } else {\n\n                errorCode = debug.getCode();\n\n                if(errorCode !== null && errorCode !== 0){\n\n                    trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\" \\nError info: \" +debug.getInfo(errorCode));\n\n                } else {\n\n                    trace(traceMsgPrefix +\"failed: No response from server.\");\n\n                }\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\"failed: API is null.\");\n\n        }\n\n    } else {\n\n          trace(traceMsgPrefix +\"aborted: Connection already active.\");\n\n     }\n\n     return success;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.connection.terminate()\n   Tells the LMS to terminate the communication session\n\n   Parameters:  None\n   Returns:     Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.connection.terminate = function(){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        exitStatus = scorm.data.exitStatus,\n        completionStatus = scorm.data.completionStatus,\n        trace = pipwerks.UTILS.trace,\n        makeBoolean = pipwerks.UTILS.StringToBoolean,\n        debug = scorm.debug,\n        traceMsgPrefix = \"SCORM.connection.terminate \";\n\n\n    if(scorm.connection.isActive){\n\n        var API = scorm.API.getHandle(),\n            errorCode = 0;\n\n        if(API){\n\n             if(scorm.handleExitMode && !exitStatus){\n\n                if(completionStatus !== \"completed\" && completionStatus !== \"passed\"){\n\n                    switch(scorm.version){\n                        case \"1.2\" : success = scorm.set(\"cmi.core.exit\", \"suspend\"); break;\n                        case \"2004\": success = scorm.set(\"cmi.exit\", \"suspend\"); break;\n                    }\n\n                } else {\n\n                    switch(scorm.version){\n                        case \"1.2\" : success = scorm.set(\"cmi.core.exit\", \"logout\"); break;\n                        case \"2004\": success = scorm.set(\"cmi.exit\", \"normal\"); break;\n                    }\n\n                }\n\n            }\n\n            //Ensure we persist the data\n            success = scorm.save();\n\n            if(success){\n\n                switch(scorm.version){\n                    case \"1.2\" : success = makeBoolean(API.LMSFinish(\"\")); break;\n                    case \"2004\": success = makeBoolean(API.Terminate(\"\")); break;\n                }\n\n                if(success){\n\n                    scorm.connection.isActive = false;\n\n                } else {\n\n                    errorCode = debug.getCode();\n                    trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\" \\nError info: \" +debug.getInfo(errorCode));\n\n                }\n\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\"failed: API is null.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\"aborted: Connection already terminated.\");\n\n    }\n\n    return success;\n\n};\n\n\n\n// ------------------------------------------------------------------------- //\n// --- pipwerks.SCORM.data functions --------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.data.get(parameter)\n   Requests information from the LMS.\n\n   Parameter: parameter (string, name of the SCORM data model element)\n   Returns:   string (the value of the specified data model element)\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.data.get = function(parameter){\n\n    var value = null,\n        scorm = pipwerks.SCORM,\n        trace = pipwerks.UTILS.trace,\n        debug = scorm.debug,\n        traceMsgPrefix = \"SCORM.data.get('\" +parameter +\"') \";\n\n    if(scorm.connection.isActive){\n\n        var API = scorm.API.getHandle(),\n            errorCode = 0;\n\n          if(API){\n\n            switch(scorm.version){\n                case \"1.2\" : value = API.LMSGetValue(parameter); break;\n                case \"2004\": value = API.GetValue(parameter); break;\n            }\n\n            errorCode = debug.getCode();\n\n            //GetValue returns an empty string on errors\n            //If value is an empty string, check errorCode to make sure there are no errors\n            if(value !== \"\" || errorCode === 0){\n\n                //GetValue is successful.\n                //If parameter is lesson_status/completion_status or exit status, let's\n                //grab the value and cache it so we can check it during connection.terminate()\n                switch(parameter){\n\n                    case \"cmi.core.lesson_status\":\n                    case \"cmi.completion_status\" : scorm.data.completionStatus = value; break;\n\n                    case \"cmi.core.exit\":\n                    case \"cmi.exit\"     : scorm.data.exitStatus = value; break;\n\n                }\n\n            } else {\n\n                trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\"\\nError info: \" +debug.getInfo(errorCode));\n\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\"failed: API is null.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\"failed: API connection is inactive.\");\n\n    }\n\n    trace(traceMsgPrefix +\" value: \" +value);\n\n    return String(value);\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.data.set()\n   Tells the LMS to assign the value to the named data model element.\n   Also stores the SCO's completion status in a variable named\n   pipwerks.SCORM.data.completionStatus. This variable is checked whenever\n   pipwerks.SCORM.connection.terminate() is invoked.\n\n   Parameters: parameter (string). The data model element\n               value (string). The value for the data model element\n   Returns:    Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.data.set = function(parameter, value){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        trace = pipwerks.UTILS.trace,\n        makeBoolean = pipwerks.UTILS.StringToBoolean,\n        debug = scorm.debug,\n        traceMsgPrefix = \"SCORM.data.set('\" +parameter +\"') \";\n\n\n    if(scorm.connection.isActive){\n\n        var API = scorm.API.getHandle(),\n            errorCode = 0;\n\n        if(API){\n\n            switch(scorm.version){\n                case \"1.2\" : success = makeBoolean(API.LMSSetValue(parameter, value)); break;\n                case \"2004\": success = makeBoolean(API.SetValue(parameter, value)); break;\n            }\n\n            if(success){\n\n                if(parameter === \"cmi.core.lesson_status\" || parameter === \"cmi.completion_status\"){\n\n                    scorm.data.completionStatus = value;\n\n                }\n\n            } else {\n\n                errorCode = debug.getCode();\n\n                trace(traceMsgPrefix +\"failed. \\nError code: \" +errorCode +\". \\nError info: \" +debug.getInfo(errorCode));\n\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\"failed: API is null.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\"failed: API connection is inactive.\");\n\n    }\n\n\ttrace(traceMsgPrefix +\" value: \" +value);\n\n    return success;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.data.save()\n   Instructs the LMS to persist all data to this point in the session\n\n   Parameters: None\n   Returns:    Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.data.save = function(){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        trace = pipwerks.UTILS.trace,\n        makeBoolean = pipwerks.UTILS.StringToBoolean,\n        traceMsgPrefix = \"SCORM.data.save failed\";\n\n\n    if(scorm.connection.isActive){\n\n        var API = scorm.API.getHandle();\n\n        if(API){\n\n            switch(scorm.version){\n                case \"1.2\" : success = makeBoolean(API.LMSCommit(\"\")); break;\n                case \"2004\": success = makeBoolean(API.Commit(\"\")); break;\n            }\n\n        } else {\n\n            trace(traceMsgPrefix +\": API is null.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\": API connection is inactive.\");\n\n    }\n\n    return success;\n\n};\n\n\npipwerks.SCORM.status = function (action, status){\n\n    var success = false,\n        scorm = pipwerks.SCORM,\n        trace = pipwerks.UTILS.trace,\n        traceMsgPrefix = \"SCORM.getStatus failed\",\n        cmi = \"\";\n\n    if(action !== null){\n\n        switch(scorm.version){\n            case \"1.2\" : cmi = \"cmi.core.lesson_status\"; break;\n            case \"2004\": cmi = \"cmi.completion_status\"; break;\n        }\n\n        switch(action){\n\n            case \"get\": success = scorm.data.get(cmi); break;\n\n            case \"set\": if(status !== null){\n\n                            success = scorm.data.set(cmi, status);\n\n                        } else {\n\n                            success = false;\n                            trace(traceMsgPrefix +\": status was not specified.\");\n\n                        }\n\n                        break;\n\n            default      : success = false;\n                        trace(traceMsgPrefix +\": no valid action was specified.\");\n\n        }\n\n    } else {\n\n        trace(traceMsgPrefix +\": action was not specified.\");\n\n    }\n\n    return success;\n\n};\n\n\n// ------------------------------------------------------------------------- //\n// --- pipwerks.SCORM.debug functions -------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.debug.getCode\n   Requests the error code for the current error state from the LMS\n\n   Parameters: None\n   Returns:    Integer (the last error code).\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.debug.getCode = function(){\n\n    var scorm = pipwerks.SCORM,\n        API = scorm.API.getHandle(),\n        trace = pipwerks.UTILS.trace,\n        code = 0;\n\n    if(API){\n\n        switch(scorm.version){\n            case \"1.2\" : code = parseInt(API.LMSGetLastError(), 10); break;\n            case \"2004\": code = parseInt(API.GetLastError(), 10); break;\n        }\n\n    } else {\n\n        trace(\"SCORM.debug.getCode failed: API is null.\");\n\n    }\n\n    return code;\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.debug.getInfo()\n   \"Used by a SCO to request the textual description for the error code\n   specified by the value of [errorCode].\"\n\n   Parameters: errorCode (integer).\n   Returns:    String.\n----------------------------------------------------------------------------- */\n\npipwerks.SCORM.debug.getInfo = function(errorCode){\n\n    var scorm = pipwerks.SCORM,\n        API = scorm.API.getHandle(),\n        trace = pipwerks.UTILS.trace,\n        result = \"\";\n\n\n    if(API){\n\n        switch(scorm.version){\n            case \"1.2\" : result = API.LMSGetErrorString(errorCode.toString()); break;\n            case \"2004\": result = API.GetErrorString(errorCode.toString()); break;\n        }\n\n    } else {\n\n        trace(\"SCORM.debug.getInfo failed: API is null.\");\n\n    }\n\n    return String(result);\n\n};\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.SCORM.debug.getDiagnosticInfo\n   \"Exists for LMS specific use. It allows the LMS to define additional\n   diagnostic information through the API Instance.\"\n\n   Parameters: errorCode (integer).\n   Returns:    String (Additional diagnostic information about the given error code).\n---------------------------------------------------------------------------- */\n\npipwerks.SCORM.debug.getDiagnosticInfo = function(errorCode){\n\n    var scorm = pipwerks.SCORM,\n        API = scorm.API.getHandle(),\n        trace = pipwerks.UTILS.trace,\n        result = \"\";\n\n    if(API){\n\n        switch(scorm.version){\n            case \"1.2\" : result = API.LMSGetDiagnostic(errorCode); break;\n            case \"2004\": result = API.GetDiagnostic(errorCode); break;\n        }\n\n    } else {\n\n        trace(\"SCORM.debug.getDiagnosticInfo failed: API is null.\");\n\n    }\n\n    return String(result);\n\n};\n\n\n// ------------------------------------------------------------------------- //\n// --- Shortcuts! ---------------------------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n// Because nobody likes typing verbose code.\n\npipwerks.SCORM.init = pipwerks.SCORM.connection.initialize;\npipwerks.SCORM.get  = pipwerks.SCORM.data.get;\npipwerks.SCORM.set  = pipwerks.SCORM.data.set;\npipwerks.SCORM.save = pipwerks.SCORM.data.save;\npipwerks.SCORM.quit = pipwerks.SCORM.connection.terminate;\n\n\n\n// ------------------------------------------------------------------------- //\n// --- pipwerks.UTILS functions -------------------------------------------- //\n// ------------------------------------------------------------------------- //\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.UTILS.StringToBoolean()\n   Converts 'boolean strings' into actual valid booleans.\n\n   (Most values returned from the API are the strings \"true\" and \"false\".)\n\n   Parameters: String\n   Returns:    Boolean\n---------------------------------------------------------------------------- */\n\npipwerks.UTILS.StringToBoolean = function(value){\n    var t = typeof value;\n    switch(t){\n       //typeof new String(\"true\") === \"object\", so handle objects as string via fall-through.\n       //See https://github.com/pipwerks/scorm-api-wrapper/issues/3\n       case \"object\":\n       case \"string\": return (/(true|1)/i).test(value);\n       case \"number\": return !!value;\n       case \"boolean\": return value;\n       case \"undefined\": return null;\n       default: return false;\n    }\n};\n\n\n\n/* -------------------------------------------------------------------------\n   pipwerks.UTILS.trace()\n   Displays error messages when in debug mode.\n\n   Parameters: msg (string)\n   Return:     None\n---------------------------------------------------------------------------- */\n\npipwerks.UTILS.trace = function(msg){\n\n     if(pipwerks.debug.isActive){\n\n        if(window.console && window.console.log){\n            window.console.log(msg);\n        } else {\n            //alert(msg);\n        }\n\n     }\n};\n\ndefine(\"extensions/adapt-contrib-spoor/js/scorm/API\", function(){});\n\n",
    "define ('extensions/adapt-contrib-spoor/js/scorm/wrapper',['require'],function(require) {\n\n\t/*\n\t\tIMPORTANT: This wrapper uses the Pipwerks SCORM wrapper and should therefore support both SCORM 1.2 and 2004. Ensure any changes support both versions.\n\t*/\n\n\tvar ScormWrapper = function() {\n\t\t/* configuration */\n\t\tthis.setCompletedWhenFailed = true;// this only applies to SCORM 2004\n\t\t/**\n\t\t * whether to commit each time there's a change to lesson_status or not\n\t\t */\n\t\tthis.commitOnStatusChange = true;\n\t\t/**\n\t\t * how frequently (in minutes) to commit automatically. set to 0 to disable.\n\t\t */\n\t\tthis.timedCommitFrequency = 10;\n\t\t/**\n\t\t * how many times to retry if a commit fails\n\t\t */\n\t\tthis.maxCommitRetries = 5;\n\t\t/**\n\t\t * time (in milliseconds) to wait between retries\n\t\t */\n\t\tthis.commitRetryDelay = 1000;\n\t\t\n\t\t/**\n\t\t * prevents commit from being called if there's already a 'commit retry' pending.\n\t\t */\n\t\tthis.commitRetryPending = false;\n\t\t/**\n\t\t * how many times we've done a 'commit retry'\n\t\t */\n\t\tthis.commitRetries = 0;\n\t\t/**\n\t\t * not currently used - but you could include in an error message to show when data was last saved\n\t\t */\n\t\tthis.lastCommitSuccessTime = null;\n\t\t\n\t\tthis.timedCommitIntervalID = null;\n\t\tthis.retryCommitTimeoutID = null;\n\t\tthis.logOutputWin = null;\n\t\tthis.startTime = null;\n\t\tthis.endTime = null;\n\t\t\n\t\tthis.lmsConnected = false;\n\t\tthis.finishCalled = false;\n\t\t\n\t\tthis.logger = Logger.getInstance();\n\t\tthis.scorm = pipwerks.SCORM;\n\n\t\tthis.suppressErrors = false;\n        \n\t\tif (window.__debug)\n\t\t\tthis.showDebugWindow();\n\n\t\tif ((window.API && window.API.__offlineAPIWrapper) || (window.API_1484_11 && window.API_1484_11.__offlineAPIWrapper))\n\t\t\tthis.logger.error(\"Offline SCORM API is being used. No data will be reported to the LMS!\");\n\t};\n\n\t// static\n\tScormWrapper.instance = null;\n\n\t/******************************* public methods *******************************/\n\n\t// static\n\tScormWrapper.getInstance = function() {\n\t\tif (ScormWrapper.instance === null)\n\t\t\tScormWrapper.instance = new ScormWrapper();\n\t\t\n\t\treturn ScormWrapper.instance;\n\t};\n\n\tScormWrapper.prototype.getVersion = function() {\n\t\treturn this.scorm.version;\n\t};\n\n\tScormWrapper.prototype.setVersion = function(value) {\n\t\tthis.logger.debug(\"ScormWrapper::setVersion: \" + value);\n\t\tthis.scorm.version = value;\n\t\t/**\n\t\t * stop the pipwerks code from setting cmi.core.exit to suspend/logout when targeting SCORM 1.2.\n\t\t * there doesn't seem to be any tangible benefit to doing this in 1.2 and it can actually cause problems with some LMSes\n\t\t * (e.g. setting it to 'logout' apparently causes Plateau to log the user completely out of the LMS!)\n\t\t * It needs to be on for SCORM 2004 though, otherwise the LMS might not restore the suspend_data\n\t\t */\n\t\tthis.scorm.handleExitMode = this.isSCORM2004();\n\t};\n\n\tScormWrapper.prototype.initialize = function() {\n\t\tthis.logger.debug(\"ScormWrapper::initialize\");\n\t\tthis.lmsConnected = this.scorm.init();\n\n\t\tif (this.lmsConnected) {\n\t\t\tthis.startTime = new Date();\n\t\t\t\n\t\t\tthis.initTimedCommit();\n\t\t}\n\t\telse {\n\t\t\tthis.handleError(\"Course could not connect to the LMS\");\n\t\t}\n\t\t\n\t\treturn this.lmsConnected;\n\t};\n\n\t/**\n\t* allows you to check if this is the user's first ever 'session' of a SCO, even after the lesson_status has been set to 'incomplete'\n\t*/\n\tScormWrapper.prototype.isFirstSession = function() {\n\t\treturn (this.getValue(this.isSCORM2004() ? \"cmi.entry\" :\"cmi.core.entry\") === \"ab-initio\");\n\t};\n\n\tScormWrapper.prototype.setIncomplete = function() {\n\t\tthis.setValue(this.isSCORM2004() ? \"cmi.completion_status\" : \"cmi.core.lesson_status\", \"incomplete\");\n\n\t\tif(this.commitOnStatusChange) this.commit();\n\t};\n\n\tScormWrapper.prototype.setCompleted = function() {\n\t\tthis.setValue(this.isSCORM2004() ? \"cmi.completion_status\" : \"cmi.core.lesson_status\", \"completed\");\n\t\t\n\t\tif(this.commitOnStatusChange) this.commit();\n\t};\n\n\tScormWrapper.prototype.setPassed = function() {\n\t\tif (this.isSCORM2004()) {\n\t\t\tthis.setValue(\"cmi.completion_status\", \"completed\");\n\t\t\tthis.setValue(\"cmi.success_status\", \"passed\");\n\t\t}\n\t\telse {\n\t\t\tthis.setValue(\"cmi.core.lesson_status\", \"passed\");\n\t\t}\n\n\t\tif(this.commitOnStatusChange) this.commit();\n\t};\n\n\tScormWrapper.prototype.setFailed = function() {\n\t\tif (this.isSCORM2004()) {\n\t\t\tthis.setValue(\"cmi.success_status\", \"failed\");\n\t\t\t\n\t\t\tif(this.setCompletedWhenFailed) {\n\t\t\t\tthis.setValue(\"cmi.completion_status\", \"completed\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.setValue(\"cmi.core.lesson_status\", \"failed\");\n\t\t}\n\n\t\tif(this.commitOnStatusChange) this.commit();\n\t};\n\n\tScormWrapper.prototype.getStatus = function() {\n\t\tvar status = this.getValue(this.isSCORM2004() ? \"cmi.completion_status\" : \"cmi.core.lesson_status\");\n\n\t\tswitch(status.toLowerCase()) {// workaround for some LMSes (e.g. Arena) not adhering to the all-lowercase rule\n\t\t\tcase \"passed\":\n\t\t\tcase \"completed\":\n\t\t\tcase \"incomplete\":\n\t\t\tcase \"failed\":\n\t\t\tcase \"browsed\":\n\t\t\tcase \"not attempted\":\n\t\t\tcase \"not_attempted\":// mentioned in SCORM 2004 docs but not sure it ever gets used\n\t\t\tcase \"unknown\": //the SCORM 2004 version of not attempted\n\t\t\t\treturn status;\n\t\t\tdefault:\n\t\t\t\tthis.handleError(\"ScormWrapper::getStatus: invalid lesson status '\" + status + \"' received from LMS\");\n\t\t\t\treturn null;\n\t\t}\n\t};\n\n\tScormWrapper.prototype.setStatus = function(status) {\n\t\tswitch (status.toLowerCase()){\n\t\t\tcase \"incomplete\":\n\t\t\t\tthis.setIncomplete();\n\t\t\tbreak;\n\t\t\tcase \"completed\":\n\t\t\t\tthis.setCompleted();\n\t\t\tbreak;\n\t\t\tcase \"passed\":\n\t\t\t\tthis.setPassed();\n\t\t\tbreak;\n\t\t\tcase \"failed\":\n\t\t\t\tthis.setFailed();\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.handleError(\"ScormWrapper::setStatus: the status '\" + status + \"' is not supported.\");\n\t\t}\n\t};\n\n\tScormWrapper.prototype.getScore = function() {\n\t\treturn this.getValue(this.isSCORM2004() ? \"cmi.score.raw\" : \"cmi.core.score.raw\");\n\t};\n\n\tScormWrapper.prototype.setScore = function(_score, _minScore, _maxScore) {\n\t\tif (this.isSCORM2004()) {\n\t\t\tthis.setValue(\"cmi.score.raw\", _score);\n\t\t\tthis.setValue(\"cmi.score.min\", _minScore);\n\t\t\tthis.setValue(\"cmi.score.max\", _maxScore);\n\n\t\t\tvar range = _maxScore - _minScore;\n\t\t\tvar scaledScore = ((_score - _minScore) / range).toFixed(7);\n\t\t\tthis.setValue(\"cmi.score.scaled\", scaledScore);\n\t\t}\n\t\telse {\n\t\t\tthis.setValue(\"cmi.core.score.raw\", _score);\n\n\t\t\tif(this.isSupported(\"cmi.core.score.min\")) this.setValue(\"cmi.core.score.min\", _minScore);\n\n\t\t\tif(this.isSupported(\"cmi.core.score.max\")) this.setValue(\"cmi.core.score.max\", _maxScore);\n\t\t}\n\t};\n\n\tScormWrapper.prototype.getLessonLocation = function() {\n\t\treturn this.getValue(this.isSCORM2004() ? \"cmi.location\" : \"cmi.core.lesson_location\");\n\t};\n\n\tScormWrapper.prototype.setLessonLocation = function(_location) {\n\t\tthis.setValue(this.isSCORM2004() ? \"cmi.location\" : \"cmi.core.lesson_location\", _location);\n\t};\n\n\tScormWrapper.prototype.getSuspendData = function() {\n\t\treturn this.getValue(\"cmi.suspend_data\");\n\t};\n\n\tScormWrapper.prototype.setSuspendData = function(_data) {\n\t\tthis.setValue(\"cmi.suspend_data\", _data);\n\t};\n\n\tScormWrapper.prototype.getStudentName = function() {\n\t\treturn this.getValue(this.isSCORM2004() ? \"cmi.learner_name\" : \"cmi.core.student_name\");\n\t};\n\n\tScormWrapper.prototype.getStudentId = function(){\n\t\treturn this.getValue(this.isSCORM2004() ? \"cmi.learner_id\":\"cmi.core.student_id\");\n\t};\n\t\n\tScormWrapper.prototype.setLanguage = function(_lang){\n\t\tif(this.isSCORM2004()) {\n\t\t\tthis.setValue(\"cmi.learner_preference.language\", _lang);\n\t\t} else {\n\t\t\tif(this.isSupported(\"cmi.student_preference.language\")) {\n\t\t\t\tthis.setValue(\"cmi.student_preference.language\", _lang);\n\t\t\t}\n\t\t}\n\t};\n\n\tScormWrapper.prototype.commit = function() {\n\t\tthis.logger.debug(\"ScormWrapper::commit\");\n\t\t\n\t\tif (this.lmsConnected) {\n\t\t\tif (this.commitRetryPending) {\n\t\t\t\tthis.logger.debug(\"ScormWrapper::commit: skipping this commit call as one is already pending.\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.scorm.save()) {\n\t\t\t\t\tthis.commitRetries = 0;\n\t\t\t\t\tthis.lastCommitSuccessTime = new Date();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.commitRetries < this.maxCommitRetries && !this.finishCalled) {\n\t\t\t\t\t\tthis.commitRetries++;\n\t\t\t\t\t\tthis.initRetryCommit();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar _errorCode = this.scorm.debug.getCode();\n\n\t\t\t\t\t\tvar _errorMsg = \"Course could not commit data to the LMS\";\n\t\t\t\t\t\t_errorMsg += \"\\nError \" + _errorCode + \": \" + this.scorm.debug.getInfo(_errorCode);\n\t\t\t\t\t\t_errorMsg += \"\\nLMS Error Info: \" + this.scorm.debug.getDiagnosticInfo(_errorCode);\n\n\t\t\t\t\t\tthis.handleError(_errorMsg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.handleError(\"Course is not connected to the LMS\");\n\t\t}\n\t};\n\n\tScormWrapper.prototype.finish = function() {\n\t\tthis.logger.debug(\"ScormWrapper::finish\");\n\t\t\n\t\tif (this.lmsConnected && !this.finishCalled) {\n\t\t\tthis.finishCalled = true;\n\t\t\t\n\t\t\tif(this.timedCommitIntervalID !== null) {\n\t\t\t\twindow.clearInterval(this.timedCommitIntervalID);\n\t\t\t}\n\t\t\t\n\t\t\tif(this.commitRetryPending) {\n\t\t\t\twindow.clearTimeout(this.retryCommitTimeoutID);\n\t\t\t\tthis.commitRetryPending = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.logOutputWin && !this.logOutputWin.closed) {\n\t\t\t\tthis.logOutputWin.close();\n\t\t\t}\n\t\t\t\n\t\t\tthis.endTime = new Date();\n\t\t\t\n\t\t\tif (this.isSCORM2004()) {\n\t\t\t\tthis.scorm.set(\"cmi.session_time\", this.convertToSCORM2004Time(this.endTime.getTime() - this.startTime.getTime()));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.scorm.set(\"cmi.core.session_time\", this.convertToSCORM12Time(this.endTime.getTime() - this.startTime.getTime()));\n\t\t\t\tthis.scorm.set(\"cmi.core.exit\", \"\");\n\t\t\t}\n\t\t\t\n\t\t\t// api no longer available from this point\n\t\t\tthis.lmsConnected = false;\n\t\t\t\n\t\t\tif (!this.scorm.quit()) {\n\t\t\t\tthis.handleError(\"Course could not finish\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.handleError(\"Course is not connected to the LMS\");\n\t\t}\n\t};\n\n\tScormWrapper.prototype.recordInteraction = function(id, response, correct, latency, type) {\n\t\tif(this.isSupported(\"cmi.interactions._count\")) {\n\t\t\tswitch(type) {\n\t\t\t\tcase \"choice\":\n\t\t\t\t\tthis.recordInteractionMultipleChoice.apply(this, arguments);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"matching\":\n\t\t\t\t\tthis.recordInteractionMatching.apply(this, arguments);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"numeric\":\n\t\t\t\t\tthis.isSCORM2004() ? this.recordInteractionScorm2004.apply(this, arguments) : this.recordInteractionScorm12.apply(this, arguments);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"fill-in\":\n\t\t\t\t\tthis.recordInteractionFillIn.apply(this, arguments);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error(\"ScormWrapper.recordInteraction: unknown interaction type of '\" + type + \"' encountered...\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.logger.info(\"ScormWrapper::recordInteraction: cmi.interactions are not supported by this LMS...\");\n\t\t}\n\t};\n\n\t/****************************** private methods ******************************/\n\tScormWrapper.prototype.getValue = function(_property) {\n\t\tthis.logger.debug(\"ScormWrapper::getValue: _property=\" + _property);\n\n\t\tif(this.finishCalled) {\n\t\t\tthis.logger.debug(\"ScormWrapper::getValue: ignoring request as 'finish' has been called\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (this.lmsConnected) {\n\t\t\tvar _value = this.scorm.get(_property);\n\t\t\tvar _errorCode = this.scorm.debug.getCode();\n\t\t\tvar _errorMsg = \"\";\n\t\t\t\n\t\t\tif (_errorCode !== 0) {\n\t\t\t\tif (_errorCode === 403) {\n\t\t\t\t\tthis.logger.warn(\"ScormWrapper::getValue: data model element not initialized\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t_errorMsg += \"Course could not get \" + _property;\n\t\t\t\t\t_errorMsg += \"\\nError Info: \" + this.scorm.debug.getInfo(_errorCode);\n\t\t\t\t\t_errorMsg += \"\\nLMS Error Info: \" + this.scorm.debug.getDiagnosticInfo(_errorCode);\n\t\t\t\t\t\n\t\t\t\t\tthis.handleError(_errorMsg);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.debug(\"ScormWrapper::getValue: returning \" + _value);\n\t\t\treturn _value + \"\";\n\t\t}\n\t\telse {\n\t\t\tthis.handleError(\"Course is not connected to the LMS\");\n\t\t}\n\t};\n\n\tScormWrapper.prototype.setValue = function(_property, _value) {\n\t\tthis.logger.debug(\"ScormWrapper::setValue: _property=\" + _property + \" _value=\" + _value);\n\n\t\tif(this.finishCalled) {\n\t\t\tthis.logger.debug(\"ScormWrapper::setValue: ignoring request as 'finish' has been called\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (this.lmsConnected) {\n\t\t\tvar _success = this.scorm.set(_property, _value);\n\t\t\tvar _errorCode = this.scorm.debug.getCode();\n\t\t\tvar _errorMsg = \"\";\n\t\t\t\n\t\t\tif (!_success) {\n\t\t\t\t/*\n\t\t\t\t* Some LMSes have an annoying tendency to return false from a set call even when it actually worked fine.\n\t\t\t\t* So, we should throw an error _only_ if there was a valid error code...\n\t\t\t\t*/\n\t\t\t\tif(_errorCode !== 0) {\n\t\t\t\t\t_errorMsg += \"Course could not set \" + _property + \" to \" + _value;\n\t\t\t\t\t_errorMsg += \"\\nError Info: \" + this.scorm.debug.getInfo(_errorCode);\n\t\t\t\t\t_errorMsg += \"\\nLMS Error Info: \" + this.scorm.debug.getDiagnosticInfo(_errorCode);\n\t\t\t\t\t\n\t\t\t\t\tthis.handleError(_errorMsg);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.logger.warn(\"ScormWrapper::setValue: LMS reported that the 'set' call failed but then said there was no error!\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn _success;\n\t\t}\n\t\telse {\n\t\t\tthis.handleError(\"Course is not connected to the LMS\");\n\t\t}\n\t};\n\n\t/**\n\t* used for checking any data field that is not 'LMS Mandatory' to see whether the LMS we're running on supports it or not.\n\t* Note that the way this check is being performed means it wouldn't work for any element that is\n\t* 'write only', but so far we've not had a requirement to check for any optional elements that are.\n\t*/\n\tScormWrapper.prototype.isSupported = function(_property) {\n\t\tthis.logger.debug(\"ScormWrapper::isSupported: _property=\" + _property);\n\n\t\tif(this.finishCalled) {\n\t\t\tthis.logger.debug(\"ScormWrapper::isSupported: ignoring request as 'finish' has been called\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (this.lmsConnected) {\n\t\t\tvar _value = this.scorm.get(_property);\n\t\t\tvar _errorCode = this.scorm.debug.getCode();\n\t\t\t\n\t\t\treturn (_errorCode === 401 ? false : true);\n\t\t}\n\t\telse {\n\t\t\tthis.handleError(\"Course is not connected to the LMS\");\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tScormWrapper.prototype.initTimedCommit = function() {\n\t\tthis.logger.debug(\"ScormWrapper::initTimedCommit\");\n\t\t\n\t\tif(this.timedCommitFrequency > 0) {\n\t\t\tvar delay = this.timedCommitFrequency * (60 * 1000);\n\t\t\tthis.timedCommitIntervalID = window.setInterval(_.bind(this.commit, this), delay);\n\t\t}\n\t};\n\n\tScormWrapper.prototype.initRetryCommit = function() {\n\t\tthis.logger.debug(\"ScormWrapper::initRetryCommit \" + this.commitRetries + \" out of \" + this.maxCommitRetries);\n\t\t\n\t\tthis.commitRetryPending = true;// stop anything else from calling commit until this is done\n\t\t\n\t\tthis.retryCommitTimeoutID = window.setTimeout(_.bind(this.doRetryCommit, this), this.commitRetryDelay);\n\t};\n\n\tScormWrapper.prototype.doRetryCommit = function() {\n\t\tthis.logger.debug(\"ScormWrapper::doRetryCommit\");\n\n\t\tthis.commitRetryPending = false;\n\n\t\tthis.commit();\n\t};\n\n\tScormWrapper.prototype.handleError = function(_msg) {\n\t\tthis.logger.error(_msg);\n\t\t\n\t\tif (!this.suppressErrors && (!this.logOutputWin || this.logOutputWin.closed) && confirm(\"An error has occured:\\n\\n\" + _msg + \"\\n\\nPress 'OK' to view debug information to send to technical support.\"))\n\t\t\tthis.showDebugWindow();\n\t};\n\n\tScormWrapper.prototype.getInteractionCount = function(){\n\t\tvar count = this.getValue(\"cmi.interactions._count\");\n\t\treturn count === \"\" ? 0 : count;\n\t};\n\t\n\tScormWrapper.prototype.recordInteractionScorm12 = function(id, response, correct, latency, type) {\n\t\t\n\t\tid = this.trim(id);\n\n\t\tvar cmiPrefix = \"cmi.interactions.\" + this.getInteractionCount();\n\t\t\n\t\tthis.setValue(cmiPrefix + \".id\", id);\n\t\tthis.setValue(cmiPrefix + \".type\", type);\n\t\tthis.setValue(cmiPrefix + \".student_response\", response);\n\t\tthis.setValue(cmiPrefix + \".result\", correct ? \"correct\" : \"wrong\");\n\t\tif (latency !== null && latency !== undefined) this.setValue(cmiPrefix + \".latency\", this.convertToSCORM12Time(latency));\n\t\tthis.setValue(cmiPrefix + \".time\", this.getCMITime());\n\t};\n\n\n\tScormWrapper.prototype.recordInteractionScorm2004 = function(id, response, correct, latency, type) {\n\n\t\tid = this.trim(id);\n\n\t\tvar cmiPrefix = \"cmi.interactions.\" + this.getInteractionCount();\n\t\t\n\t\tthis.setValue(cmiPrefix + \".id\", id);\n\t\tthis.setValue(cmiPrefix + \".type\", type);\n\t\tthis.setValue(cmiPrefix + \".learner_response\", response);\n\t\tthis.setValue(cmiPrefix + \".result\", correct ? \"correct\" : \"incorrect\");\n\t\tif (latency !== null && latency !== undefined) this.setValue(cmiPrefix + \".latency\", this.convertToSCORM2004Time(latency));\n\t\tthis.setValue(cmiPrefix + \".timestamp\", this.getISO8601Timestamp());\n\t};\n\n\n\tScormWrapper.prototype.recordInteractionMultipleChoice = function(id, response, correct, latency, type) {\n\t\t\n\t\tif(this.isSCORM2004()) {\n\t\t\tresponse = response.replace(/,|#/g, \"[,]\");\n\t\t} else {\n\t\t\tresponse = response.replace(/#/g, \",\");\n\t\t}\n\t\t\n\t\tvar scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;\n\n\t\tscormRecordInteraction.call(this, id, response, correct, latency, type);\n\t};\n\n\t\n\tScormWrapper.prototype.recordInteractionMatching = function(id, response, correct, latency, type) {\n\n\t\tresponse = response.replace(/#/g, \",\");\n\n\t\tif(this.isSCORM2004()) {\n\t\t\tresponse = response.replace(/,/g, \"[,]\");\n\t\t\tresponse = response.replace(/\\./g, \"[.]\");\n\t\t}\n\t\t\n\t\tvar scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;\n\n\t\tscormRecordInteraction.call(this, id, response, correct, latency, type);\n\t};\n\n\n\tScormWrapper.prototype.recordInteractionFillIn = function(id, response, correct, latency, type) {\n\t\t\n\t\tvar maxLength = this.isSCORM2004() ? 250 : 255;\n\n\t\tif(response.length > maxLength) {\n\t\t\tresponse = response.substr(0, maxLength);\n\n\t\t\tthis.logger.warn(\"ScormWrapper::recordInteractionFillIn: response data for \" + id + \" is longer than the maximum allowed length of \" + maxLength + \" characters; data will be truncated to avoid an error.\");\n\t\t}\n\n\t\tvar scormRecordInteraction = this.isSCORM2004() ? this.recordInteractionScorm2004 : this.recordInteractionScorm12;\n\n\t\tscormRecordInteraction.call(this, id, response, correct, latency, type);\n\t};\n\n\tScormWrapper.prototype.showDebugWindow = function() {\n\t\t\n\t\tif (this.logOutputWin && !this.logOutputWin.closed) {\n\t\t\tthis.logOutputWin.close();\n\t\t}\n\t\t\n\t\tthis.logOutputWin = window.open(\"log_output.html\", \"Log\", \"width=600,height=300,status=no,scrollbars=yes,resizable=yes,menubar=yes,toolbar=yes,location=yes,top=0,left=0\");\n\t\t\n\t\tif (this.logOutputWin)\n\t\t\tthis.logOutputWin.focus();\n\t\t\n\t\treturn;\n\t};\n\n\tScormWrapper.prototype.convertToSCORM12Time = function(msConvert) {\n\t\t\n\t\tvar msPerSec = 1000;\n\t\tvar msPerMin = msPerSec * 60;\n\t\tvar msPerHour = msPerMin * 60;\n\n\t\tvar ms = msConvert % msPerSec;\n\t\tmsConvert = msConvert - ms;\n\n\t\tvar secs = msConvert % msPerMin;\n\t\tmsConvert = msConvert - secs;\n\t\tsecs = secs / msPerSec;\n\n\t\tvar mins = msConvert % msPerHour;\n\t\tmsConvert = msConvert - mins;\n\t\tmins = mins / msPerMin;\n\n\t\tvar hrs = msConvert / msPerHour;\n\n\t\tif(hrs > 9999) {\n\t\t\treturn \"9999:99:99.99\";\n\t\t}\n\t\telse {\n\t\t\tvar str = [this.padWithZeroes(hrs,4), this.padWithZeroes(mins, 2), this.padWithZeroes(secs, 2)].join(\":\");\n\t\t\treturn (str + '.' + Math.floor(ms/10));\n\t\t}\n\t};\n\n\t/**\n\t* Converts milliseconds into the SCORM 2004 data type 'timeinterval (second, 10,2)'\n\t* this will output something like 'P1DT3H5M0S' which indicates a period of time of 1 day, 3 hours and 5 minutes\n\t* or 'PT2M10.1S' which indicates a period of time of 2 minutes and 10.1 seconds\n\t*/\n\tScormWrapper.prototype.convertToSCORM2004Time = function(msConvert) {\n\t\tvar csConvert = Math.floor(msConvert / 10);\n\t\tvar csPerSec = 100;\n\t\tvar csPerMin = csPerSec * 60;\n\t\tvar csPerHour = csPerMin * 60;\n\t\tvar csPerDay = csPerHour * 24;\n\n\t\tvar days = Math.floor(csConvert/ csPerDay);\n\t\tcsConvert -= days * csPerDay;\n\t\tdays = days ? days + \"D\" : \"\";\n\n\t\tvar hours = Math.floor(csConvert/ csPerHour);\n\t\tcsConvert -= hours * csPerHour;\n\t\thours = hours ? hours + \"H\" : \"\";\n\n\t\tvar mins = Math.floor(csConvert/ csPerMin);\n\t\tcsConvert -= mins * csPerMin;\n\t\tmins = mins ? mins + \"M\" : \"\";\n\n\t\tvar secs = Math.floor(csConvert/ csPerSec);\n\t\tcsConvert -= secs * csPerSec;\n\t\tsecs = secs ? secs : \"0\";\n\n\t\tvar cs = csConvert;\n\t\tcs = cs ? \".\" + cs : \"\";\n\t\t\n\t\tvar seconds = secs + cs + \"S\";\n\t\t\n\t\tvar hms = [hours,mins,seconds].join(\"\");\n\t\t\n\t\treturn \"P\" + days + \"T\" + hms;\n\t};\n\n\tScormWrapper.prototype.getCMITime = function() {\n\t\t\n\t\tvar date = new Date();\n\n\t\tvar hours = this.padWithZeroes(date.getHours(),2);\n\t\tvar min = this.padWithZeroes(date.getMinutes(),2);\n\t\tvar sec = this.padWithZeroes(date.getSeconds(),2);\n\n\t\treturn [hours, min, sec].join(\":\");\n\t};\n\n\t/**\n\t* returns the current date & time in the format YYYY-MM-DDTHH:mm:ss \n\t*/\n\tScormWrapper.prototype.getISO8601Timestamp = function() {\t\t\n\t\tvar date = new Date().toISOString();\n\t\treturn date.replace(/.\\d\\d\\dZ/, \"\");//Date.toISOString returns the date in the format YYYY-MM-DDTHH:mm:ss.sssZ so we need to drop the last bit to make it SCORM 2004 conformant\n\t};\n\n\tScormWrapper.prototype.padWithZeroes = function(numToPad, padBy) {\n\n\t\tvar len = padBy;\n\n\t\twhile(--len){ numToPad = \"0\" + numToPad; }\n\n\t\treturn numToPad.slice(-padBy);\n\t};\n\n\tScormWrapper.prototype.trim = function(str) {\n\t\treturn str.replace(/^\\s*|\\s*$/g, \"\");\n\t};\n\n\tScormWrapper.prototype.isSCORM2004 = function() {\n\t\treturn this.scorm.version === \"2004\";\n\t};\n\n\treturn ScormWrapper;\n});\n\n",
    "Logger = function() {\n\tthis.logArr = new Array();\n\tthis.registeredViews = new Array();\n};\n\nif (!Date.now) {\n    Date.now = function() { return new Date().getTime(); }\n}\n\n// static\nLogger.instance = null;\nLogger.LOG_TYPE_INFO = 0;\nLogger.LOG_TYPE_WARN = 1;\nLogger.LOG_TYPE_ERROR = 2;\nLogger.LOG_TYPE_DEBUG = 3;\n\nLogger.getInstance = function() {\n\tif (Logger.instance == null)\n\t\tLogger.instance = new Logger();\n\treturn Logger.instance;\n};\n\nLogger.prototype.getEntries = function() {\n\treturn this.logArr;\n};\n\nLogger.prototype.getLastEntry = function() {\n\treturn this.logArr[this.logArr.length - 1];\n};\n\nLogger.prototype.info = function(str) {\n\tthis.logArr[this.logArr.length] = {str:str, type:Logger.LOG_TYPE_INFO, time:Date.now()};\n\tthis.updateViews();\n};\n\nLogger.prototype.warn = function(str) {\n\tthis.logArr[this.logArr.length] = {str:str, type:Logger.LOG_TYPE_WARN, time:Date.now()};\n\tthis.updateViews();\n};\n\nLogger.prototype.error = function(str) {\n\tthis.logArr[this.logArr.length] = {str:str, type:Logger.LOG_TYPE_ERROR, time:Date.now()};\n\tthis.updateViews();\n};\n\nLogger.prototype.debug = function(str) {\n\tthis.logArr[this.logArr.length] = {str:str, type:Logger.LOG_TYPE_DEBUG, time:Date.now()};\n\tthis.updateViews();\n};\n\n//register a view\nLogger.prototype.registerView = function(_view) {\n\tthis.registeredViews[this.registeredViews.length] = _view;\n};\n\n//unregister a view\nLogger.prototype.unregisterView = function(_view) {\n\tfor (var i = 0; i < this.registeredViews.length; i++)\n\t\tif (this.registeredViews[i] == _view) {\n\t\t\tthis.registeredViews.splice(i, 1);\n\t\t\ti--;\n\t\t}\n};\n\n// update all views\nLogger.prototype.updateViews = function() {\n\tfor (var i = 0; i < this.registeredViews.length; i++) {\n\t\tif (this.registeredViews[i])\n\t\t\tthis.registeredViews[i].update(this);\n\t}\n};\ndefine(\"extensions/adapt-contrib-spoor/js/scorm/logger\", function(){});\n\n",
    "define('extensions/adapt-contrib-spoor/js/scorm',[\n\t'./scorm/API',\n \t'./scorm/wrapper',\n\t'./scorm/logger'\n], function(API, wrapper, logger) {\n\n\t//Load and prepare SCORM API\n\n\treturn wrapper.getInstance();\n\n});\n",
    "define('extensions/adapt-contrib-spoor/js/serializers/default',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    //Captures the completion status of the blocks\n    //Returns and parses a '1010101' style string\n\n    var serializer = {\n        serialize: function () {\n            return this.serializeSaveState('_isComplete');\n        },\n\n        serializeSaveState: function(attribute) {\n            if (Adapt.course.get('_latestTrackingId') === undefined) {\n                var message = \"This course is missing a latestTrackingID.\\n\\nPlease run the grunt process prior to deploying this module on LMS.\\n\\nScorm tracking will not work correctly until this is done.\";\n                console.error(message);\n            }\n\n            var excludeAssessments = Adapt.config.get('_spoor') && Adapt.config.get('_spoor')._tracking && Adapt.config.get('_spoor')._tracking._excludeAssessments;\n\n            // create the array to be serialised, pre-populated with dashes that represent unused tracking ids - because we'll never re-use a tracking id in the same course\n            var data = [];\n            var length = Adapt.course.get('_latestTrackingId') + 1;\n            for (var i = 0; i < length; i++) {\n                data[i] = \"-\";\n            }\n\n            // now go through all the blocks, replacing the appropriate dashes with 0 (incomplete) or 1 (completed) for each of the blocks\n            _.each(Adapt.blocks.models, function(model, index) {\n                var _trackingId = model.get('_trackingId'),\n                    isPartOfAssessment = model.getParent().get('_assessment'),\n                    state = model.get(attribute) ? 1: 0;\n\n                if(excludeAssessments && isPartOfAssessment) {\n                    state = 0;\n                }\n\n                if (_trackingId === undefined) {\n                    var message = \"Block '\" + model.get('_id') + \"' doesn't have a tracking ID assigned.\\n\\nPlease run the grunt process prior to deploying this module on LMS.\\n\\nScorm tracking will not work correctly until this is done.\";\n                    console.error(message);\n                } else {\n                    data[_trackingId] = state;\n                }\n            }, this);\n\n            return data.join(\"\");\n        },\n\n        deserialize: function (completion, callback) {\n            var syncIterations = 1; // number of synchronous iterations to perform\n            var i = 0, arr = this.deserializeSaveState(completion), len = arr.length;\n\n            function step() {\n                var state;\n                for (var j=0, count=Math.min(syncIterations, len-i); j < count; i++, j++) {\n                    state = arr[i];\n                    if (state === 1) {\n                        markBlockAsComplete(Adapt.blocks.findWhere({_trackingId: i}));\n                    }\n                }\n                i == len ? callback() : setTimeout(step);\n            }\n\n            function markBlockAsComplete(block) {\n                if (!block) {\n                    return;\n                }\n            \n                block.getChildren().each(function(child) {\n                    child.set('_isComplete', true);\n                });\n            }\n\n            step();\n        },  \n\n        deserializeSaveState: function (string) {\n            var completionArray = string.split(\"\");\n\n            for (var i = 0; i < completionArray.length; i++) {\n                if (completionArray[i] === \"-\") {\n                    completionArray[i] = -1;\n                } else {\n                    completionArray[i] = parseInt(completionArray[i], 10);\n                }\n            }\n\n            return completionArray;\n        }\n\n    };\n\n    return serializer;\n});\n\n",
    "//https://raw.githubusercontent.com/oliverfoster/SCORMSuspendDataSerializer 2015-06-27\n(function(_) {\n\n\tfunction toPrecision(number, precision) {\n\t\tif (precision === undefined) precision = 2\n\t\tvar multiplier = 1 * Math.pow(10, precision);\n\t\treturn Math.round(number * multiplier) / multiplier;\n\t}\n\n\tfunction BinaryToNumber(bin, length) {\n\t\treturn parseInt(bin.substr(0, length), 2);\n\t}\n\n\tfunction NumberToBinary(number, length) {\n\t\treturn Padding.fillLeft( number.toString(2), length );\n\t}\n\n\tvar Padding = {\n\t\taddLeft: function PaddingAddLeft(str, x , char) {\n\t\t\tchar = char || \"0\";\n\t\t\treturn (new Array( x + 1)).join(char) + str;\n\t\t},\n\t\taddRight: function PaddingAddRight(str, x, char) {\n\t\t\tchar = char || \"0\";\n\t\t\treturn  str + (new Array( x + 1)).join(char);\n\t\t},\n\t\tfillLeft: function PaddingFillLeft(str, x, char) {\n\t\t\tif (str.length < x) {\n\t        \tvar paddingLength = x - str.length;\n\t        \treturn Padding.addLeft(str, paddingLength, char)\n\t        }\n\t        return str;\n\t\t},\n\t\tfillRight: function PaddingFillLeft(str, x, char) {\n\t\t\tif (str.length < x) {\n\t        \tvar paddingLength = x - str.length;\n\t        \treturn Padding.addRight(str, paddingLength, char)\n\t        }\n\t        return str;\n\t\t},\n\t\tfillBlockLeft: function PaddingFillBlockRight(str, x, char) {\n\t\t\tif (str.length % x) {\n\t        \tvar paddingLength = x - (str.length % x);\n\t        \treturn Padding.addLeft(str, paddingLength, char)\n\t        }\n\t        return str;\n\t\t},\n\t\tfillBlockRight: function PaddingFillBlockRight(str, x, char) {\n\t\t\tif (str.length % x) {\n\t        \tvar paddingLength = x - (str.length % x);\n\t        \treturn Padding.addRight(str, paddingLength, char)\n\t        }\n\t        return str;\n\t\t}\n\t};\n\n\tfunction Base64() {\n\t\tswitch (arguments.length) {\n\t\tcase 1:\n\t\t\tvar firstArgumentType = typeof arguments[0];\n\t\t\tswitch (firstArgumentType) {\n\t\t\tcase \"number\":\n\t\t\t\treturn Base64._indexes[arguments[0]];\n\t\t\tcase \"string\":\n\t\t\t\treturn Base64._chars[arguments[0]];\n\t\t\tdefault:\n\t\t\t\tthrow \"Invalid arguments type\";\n\t\t\t}\n\t\tcase 2:\n\t\t\tvar char = arguments[0];\n\t\t\tvar index = arguments[1];\n\t\t\tBase64._chars[char] = index;\n\t\t\tBase64._indexes[index] = char;\n\t\t\treturn;\n\t\tdefault:\n\t\t\tthrow \"Invalid number of arguments\";\n\t\t}\n\t}\n\tBase64._chars = {};\n\tBase64._indexes = {};\n\t(function() {\n\t\tvar alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/\";\n\t\tfor (var i = 0, l = alphabet.length; i<l; i++) {\n\t\t\tBase64(alphabet[i], i);\n\t\t}\n\t})();\n\n\n\tfunction DataType() {\n\t\tswitch (arguments.length) {\n\t\tcase 1:\n\t\t\tswitch (typeof  arguments[0]) {\n\t\t\tcase \"object\":\n\t\t\t\tvar item = arguments[0]\n\t\t\t\tif (DataType._types[item.type] === undefined) DataType._types[item.type] = [];\n\t\t\t\tDataType._types[item.type].push(item);\n\t\t\t\titem.index = DataType._indexes.length\n\t\t\t\tDataType._indexes.push(item);\n\t\t\t\tDataType[item.name] = item;\n\t\t\t\treturn;\n\t\t\tcase \"string\":\n\t\t\t\treturn DataType.getName(arguments[0]);\n\t\t\tcase \"number\":\n\t\t\t\treturn DataType.getIndex(arguments[0]);\n\t\t\tdefault:\n\t\t\t\tthrow \"Argument type not allowed\";\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow \"Too many arguments\";\n\t\t}\n\t\t\n\t}\n\tDataType.VARIABLELENGTHDESCRIPTORSIZE = 8;\n\tDataType._types = {};\n\tDataType._indexes = [];\n\tDataType.getName = function DataTypeGetName(name) {\n\t\tif (DataType[name])\n\t\t\treturn DataType[name];\n\t\tthrow \"Type name not found '\"+name+\"'\";\n\t};\n\tDataType.getIndex = function DataTypeGetIndex(index) {\n\t\tif (DataType._indexes[index])\n\t\t\treturn DataType._indexes[index];\n\t\tthrow \"Type index not found '\"+index+\"'\";\n\t};\n\tDataType.getTypes = function DataTypeGetTypes(type) {\n\t\tif (DataType._types[type])\n\t\t\treturn DataType._types[type];\n\t\tthrow \"Type not found '\"+type+\"'\";\n\t};\n\tDataType.checkBounds = function DataTypeCheckBounds(name, number) {\n\t\tvar typeDef = DataType(name);\n\t\tif (number > typeDef.max) throw name + \" value is larger than \"+typeDef.max;\n\t\tif (number < typeDef.min) throw name + \" value is smaller than \"+typeDef.min;\n\t};\n\tDataType.getNumberType = function DataTypeGetNumberType(number) {\n\t\tvar isDecimal = (number - Math.floor(number)) !== 0;\n\t\tvar numberDataTypes = DataType.getTypes(\"number\");\n\t\tfor (var t = 0, type; type = numberDataTypes[t++];) {\n\t\t\tif (number <= type.max && number >= type.min && (!isDecimal || isDecimal == type.decimal) ) {\n\t\t\t\treturn type;\n\t\t\t}\n\t\t}\n\t};\n\tDataType.getVariableType = function DataTypeGetVariableType(variable) {\n\t\tvar variableNativeType = variable instanceof Array ? \"array\" : typeof variable;\n\t\tvar variableDataType;\n\n\t\tswitch(variableNativeType) {\n\t\tcase \"number\":\n\t\t\tvariableDataType = DataType.getNumberType(variable);\n\t\t\tbreak;\n\t\tcase \"string\":\n\t\t\tvariableDataType = DataType.getName(\"string\");\n\t\t\tbreak;\n\t\tdefault: \n\t\t\tvar supportedItemDataTypes = DataType.getTypes(variableNativeType);\n\t\t\tswitch (supportedItemDataTypes.length) {\n\t\t\tcase 1:\n\t\t\t\tvariableDataType = supportedItemDataTypes[0];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow \"Type not found '\"+variableNativeType+\"'\";\n\t\t\t}\n\t\t}\n\t\n\t\tif (!variableDataType) throw \"Cannot assess type '\"+variableNativeType+\"'\";\n\n\t\treturn variableDataType;\n\t};\n\tDataType.getArrayType = function getArrayType(arr) {\n\t\tvar foundItemTypes = [];\n\n\t\tfor (var i = 0, l = arr.length; i < l; i++) {\n\t\t\tvar item = arr[i];\n\t\t\tvar itemDataType = DataType.getVariableType(item);\n\n\t\t\tif (_.findWhere(foundItemTypes, { name: itemDataType.name })) continue;\n\t\n\t\t\tfoundItemTypes.push(itemDataType);\n\t\t}\n\n\t\tswitch (foundItemTypes.length) {\n\t\tcase 0:\n\t\t\tthrow \"Cannot determine array data types\";\n\t\tcase 1:\n\t\t\t//single value type\n\t\t \treturn foundItemTypes[0];\n\t\tdefault: \n\t\t\t//many value types\n\t\t\tvar nativeTypeNames = _.pluck(foundItemTypes, 'type');\n\t\t\tvar uniqueNativeTypeNames = _.uniq(nativeTypeNames);\n\t\t\tvar hasManyNativeTypes = (uniqueNativeTypeNames.length > 1);\n\n\t\t\tif (hasManyNativeTypes) return DataType(\"variable\"); //multiple types in array\n\n\t\t\t//single native type in array, multiple datatype lengths\n\t\t\tswitch (uniqueNativeTypeNames[0]) {\n\t\t\tcase \"number\":\n\t\t\t\tvar foundDecimal = _.findWhere(foundItemTypes, { decimal: true});\n\t\t\t\tif (foundDecimal) return foundDecimal;\n\t\t\t\treturn _.max(foundItemTypes, function(type) {\n\t\t\t\t\treturn type.max;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthrow \"Unsupported data types\";\n\t\t}\n\t\t\n\t};\n\t(function() {\n\t\tvar types = [\n\t\t\t{\n\t\t\t\t\"size\": \"fixed\",\n\t\t\t\t\"length\": 1,\n\t\t\t\t\"name\": \"boolean\",\n\t\t\t\t\"type\": \"boolean\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"max\": 15,\n\t\t\t\t\"min\": 0,\n\t\t\t\t\"decimal\": false,\n\t\t\t\t\"size\": \"fixed\",\n\t\t\t\t\"length\": 4,\n\t\t\t\t\"name\": \"half\",\n\t\t\t\t\"type\": \"number\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"max\": 255,\n\t\t\t\t\"min\": 0,\n\t\t\t\t\"decimal\": false,\n\t\t\t\t\"size\": \"fixed\",\n\t\t\t\t\"length\": 8,\n\t\t\t\t\"name\": \"byte\",\n\t\t\t\t\"type\": \"number\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"max\": 65535,\n\t\t\t\t\"min\": 0,\n\t\t\t\t\"decimal\": false,\n\t\t\t\t\"size\": \"fixed\",\n\t\t\t\t\"length\": 16,\n\t\t\t\t\"name\": \"short\",\n\t\t\t\t\"type\": \"number\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"max\": 4294967295,\n\t\t\t\t\"min\": 0,\n\t\t\t\t\"decimal\": false,\n\t\t\t\t\"size\": \"fixed\",\n\t\t\t\t\"length\": 32,\n\t\t\t\t\"name\": \"long\",\n\t\t\t\t\"type\": \"number\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"max\": 4294967295,\n\t\t\t\t\"min\": -4294967295,\n\t\t\t\t\"decimal\": true,\n\t\t\t\t\"precision\": 2,\n\t\t\t\t\"size\": \"variable\",\n\t\t\t\t\"name\": \"double\",\n\t\t\t\t\"type\": \"number\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"base16\",\n\t\t\t\t\"size\": \"variable\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"base64\",\n\t\t\t\t\"size\": \"variable\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"array\",\n\t\t\t\t\"size\": \"variable\",\n\t\t\t\t\"type\": \"array\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"variable\",\n\t\t\t\t\"size\": \"variable\",\n\t\t\t\t\"type\": \"variable\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"string\",\n\t\t\t\t\"size\": \"variable\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t];\n\t\tfor (var i = 0, type; type = types[i++];) {\n\t\t\tDataType(type);\n\t\t}\n\t})();\n\n\t\n\n\tfunction Converter(fromType, toType) {\n\t\tfromType = Converter.translateTypeAlias(fromType);\n\t\ttoType = Converter.translateTypeAlias(toType);\n\n\t\tvar args = [].slice.call(arguments, 2);\n\n\t\tif (fromType != \"binary\" && toType != \"binary\") {\n\t\t\tif (!Converter._converters[fromType]) throw \"Type not found '\" + fromType + \"'\";\n\t\t\tif (!Converter._converters[fromType]['binary']) throw \"Type not found 'binary'\";\n\t\t\t\n\t\t\tvar bin = Converter._converters[fromType]['binary'].call(this, args[0], Converter.WRAPOUTPUT);\n\n\t\t\tif (!Converter._converters['binary'][toType]) throw \"Type not found '\"+toType+\"'\";\n\n\t\t\treturn Converter._converters['binary'][toType].call(this, bin, Converter.WRAPOUTPUT);\n\t\t}\n\n\t\tif (!Converter._converters[fromType]) throw \"Type not found '\" + fromType + \"'\";\n\t\tif (!Converter._converters[fromType][toType]) throw \"Type not found '\" + toType + \"'\";\n\n\t\treturn Converter._converters[fromType][toType].call(this, args[0], Converter.WRAPOUTPUT);\n\t}\n\tConverter.WRAPOUTPUT = false;\n\tConverter.translateTypeAlias = function ConverterTranslateTypeAlias(type) {\n\t\ttype = type.toLowerCase();\n\t\tfor (var Type in Converter._typeAliases) {\n\t\t\tif (Type == type || (\" \"+Converter._typeAliases[Type].join(\" \")+\" \").indexOf(\" \"+type+\" \") >= 0 ) return Type;\n\t\t}\n\t\tthrow \"Type not found '\" + type + \"'\";\n\t};\n\tConverter._typeAliases = {\n\t\t\"base64\": [ \"b64\" ],\n\t\t\"base16\" : [ \"hex\", \"b16\" ],\n\t\t\"double\": [ \"dbl\", \"decimal\", \"d\" ],\n\t\t\"long\": [ \"lng\", \"l\" ],\n\t\t\"short\": [ \"s\" ],\n\t\t\"byte\" : [ \"b\" ],\n\t\t\"half\": [ \"h\" ],\n\t\t\"number\": [ \"num\", \"n\" ],\n\t\t\"binary\": [ \"bin\" ],\n\t\t\"boolean\": [ \"bool\" ],\n\t\t\"array\": [ \"arr\" ]\n\t};\n\tConverter._variableWrapLength = function ConverterVariableWrapLength(bin) {\n\t\tvar variableLength = bin.length;\n\t\tvar binLength = NumberToBinary(variableLength, DataType.VARIABLELENGTHDESCRIPTORSIZE)\n\n\t\treturn binLength + bin;\n\t};\n\tConverter._variableLength = function ConverterVariableLength(bin) {\n\t\tvar VLDS =  DataType.VARIABLELENGTHDESCRIPTORSIZE;\n\t\tvar variableLength = BinaryToNumber(bin, VLDS );\n\t\treturn variableLength;\n\t};\n\tConverter._variableUnwrapLength = function ConverterVariableUnwrapLength(bin) {\n\t\tvar VLDS =  DataType.VARIABLELENGTHDESCRIPTORSIZE;\n\t\tvar variableLength = BinaryToNumber(bin, VLDS );\n\n\t\treturn bin.substr( VLDS, variableLength);\n\t};\n\tConverter._converters = {\n\t\t\"base64\": {\n\t\t\t\"binary\": function ConverterBase64ToBinary(base64) { //TODO PADDING... ?\n\t\t\t\tvar firstByte = Base64(base64.substr(0,1));\n\t\t\t\tvar binFirstByte = NumberToBinary(firstByte, 6);\n\t\t\t\tvar paddingLength = BinaryToNumber(binFirstByte, 6);\n\n\t\t\t    var bin = \"\";\n\t\t\t    for (var i = 0, ch; ch = base64[i++];) {\n\t\t\t        var block = Base64(ch).toString(2);\n\t\t\t        block = Padding.fillLeft(block, 6);\n\t\t\t        bin += block;\n\t\t\t    }\n\t\t\t    bin =  bin.substr(6+paddingLength);\n\t\t\t    return bin;\n\t\t\t}\n\t\t},\n\t\t\"base16\": {\n\t\t\t\"binary\": function ConverterBase16ToBinary(hex) {\n\t\t\t\tvar firstByte = Base64(base64.substr(0,1));\n\t\t\t\tvar binFirstByte = NumberToBinary(firstByte, 4);\n\t\t\t\tvar paddingLength = BinaryToNumber(binFirstByte, 4);\n\n\t\t\t    var bin = \"\";\n\t\t\t    for (var i = 0, ch; ch = hex[i++];) {\n\t\t\t        var block = parseInt(ch, 16).toString(2);\n\t\t\t        block = Padding.fillLeft(block, 4);\n\t\t\t        bin += block;\n\t\t\t    }\n\n\t\t\t     bin =  bin.substr(6+paddingLength);\n\t\t\t    return bin;\n\t\t\t}\n\t\t},\n\t\t\"double\": {\n\t\t\t\"binary\": function ConverterDoubleToBinary(dbl, wrap) {\n\t\t\t\tvar typeDef = DataType(\"double\");\n\t\t\t\tDataType.checkBounds(\"double\", dbl);\n\n\t\t\t\tdbl = toPrecision(dbl, typeDef.precision);\n\n\t\t\t\tvar dblStr = dbl.toString(10);\n\n\t\t\t\tvar isMinus = dbl < 0;\n\t\t\t\n\t\t\t\tvar baseStr, exponentStr, highStr, lowStr, decimalPosition, hasDecimal;\n\n\t\t\t\t\n\t\t\t\tvar exponentPos = dblStr.indexOf(\"e\");\n\t\t\t\tif (exponentPos > -1) {\n\t\t\t\t\t//exponential float representation \"nE-x\"\n\t\t\t\t\tbaseStr = dblStr.substr(0, exponentPos);\n\t\t\t\t\texponentStr = Math.abs(dblStr.substr(exponentPos+1));\n\n\t\t\t\t\tif (isMinus) baseStr = baseStr.substr(1);\n\n\t\t\t\t\tdecimalPosition = baseStr.indexOf(\".\");\n\t\t\t\t\thasDecimal = (decimalPosition > -1);\n\n\t\t\t\t\tif (hasDecimal) {\n\t\t\t\t\t\thighStr = baseStr.substr(0, decimalPosition);\n\t\t\t\t\t\tlowStr = baseStr.substr(decimalPosition+1);\n\n\t\t\t\t\t\texponentStr = (Math.abs(exponentStr) + lowStr.length);\n\n\t\t\t\t\t\tbaseStr = highStr + lowStr;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\t//normal long float representation \"0.00000000\"\n\t\t\t\t\tbaseStr = dblStr;\n\t\t\t\t\texponentStr = \"0\";\n\n\t\t\t\t\tif (isMinus) dblStr = dblStr.substr(1);\n\n\t\t\t\t\tdecimalPosition = dblStr.indexOf(\".\");\n\t\t\t\t\thasDecimal = (decimalPosition > -1);\n\t\t\t\t\tif (hasDecimal) {\n\t\t\t\t\t\thighStr = dblStr.substr(0, decimalPosition);\n\t\t\t\t\t\tlowStr = dblStr.substr(decimalPosition+1);\n\n\t\t\t\t\t\texponentStr = (lowStr.length);\n\t\t\t\t\t\tif (highStr == \"0\") {\n\t\t\t\t\t\t\tbaseStr = parseInt(lowStr, 10).toString(10);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbaseStr = highStr + lowStr;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbaseStr = dblStr;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar bin = [];\n\n\t\t\t\tvar binLong = Padding.fillBlockLeft (parseInt(baseStr, 10).toString(2), 4);\n\t\t\t\tvar binMinus = isMinus ? \"1\" : \"0\";\n\t\t\t\tvar binExponent = Padding.fillLeft( parseInt(exponentStr, 10).toString(2), 7);\n\t\t\t\t\n\t\t\t\tbin.push( binMinus );\n\t\t\t\tbin.push( binExponent );\n\t\t\t\tbin.push( binLong );\n\n\t\t\t\tif (wrap === false) {\n\t\t\t\t\treturn bin.join(\"\");\n\t\t\t\t} else {\n\t\t\t\t\treturn Converter._variableWrapLength(bin.join(\"\"));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"long\": {\n\t\t\t\"binary\": function ConverterLongToBinary(value) {\n\t\t\t\tvar typeDef = DataType(\"long\");\n\t\t\t\tDataType.checkBounds(\"long\", value);\n\t\t\t\tvalue = toPrecision(value, 0);\n\t\t\t\treturn Padding.fillLeft(value.toString(2), typeDef.length);\n\t\t\t}\n\t\t},\n\t\t\"short\": {\n\t\t\t\"binary\": function ConverterShortToBinary(value) {\n\t\t\t\tvar typeDef = DataType(\"short\");\n\t\t\t\tDataType.checkBounds(\"short\", value);\n\t\t\t\tvalue = toPrecision(value, 0);\n\t\t\t\treturn Padding.fillLeft(value.toString(2), typeDef.length);\n\t\t\t}\n\t\t},\n\t\t\"byte\": {\n\t\t\t\"binary\": function ConverterByteToBinary(value) {\n\t\t\t\tvar typeDef = DataType(\"byte\");\n\t\t\t\tDataType.checkBounds(\"byte\", value);\n\t\t\t\tvalue = toPrecision(value, 0);\n\t\t\t\treturn Padding.fillLeft(value.toString(2), typeDef.length);\n\t\t\t}\n\t\t},\n\t\t\"half\": {\n\t\t\t\"binary\": function ConverterHalfToBinary(value) {\n\t\t\t\tvar typeDef = DataType(\"half\");\n\t\t\t\tDataType.checkBounds(\"half\", value);\n\t\t\t\tvalue = toPrecision(value, 0);\n\t\t\t\treturn Padding.fillLeft(value.toString(2), typeDef.length);\n\t\t\t}\n\t\t},\n\t\t\"boolean\": {\n\t\t\t\"binary\": function ConverterBooleanToBinary(bool) {\n\t\t\t\treturn bool ? \"1\" : \"0\";\n\t\t\t},\n\t\t},\n\t\t\"array\": {\n\t\t\t\"binary\": function ConverterArrayToBinary(arr, wrap) { //TODO PADDING NOT GOOD\n\t\t\t\tvar typeDef = DataType(\"array\");\n\t\t\t\tvar arrayItemType = DataType.getArrayType(arr);\n\t\t\t\tvar isVariableArray = arrayItemType.name == \"vairable\";\n\n\t\t\t\tif (isVariableArray) {\n\t\t\t\t\tvar bin = half2bin(15);\n\t\t\t\t\t//variable array\n\t\t\t\t\treturn bin;\n\t\t\t\t} else {\n\t\t\t\t\tvar binArrayIdentifier = Converter._converters['half']['binary'](arrayItemType.index);\n\n\t\t\t\t\tvar binItemsArray = [];\n\t\t\t\t\tfor (var i = 0, l = arr.length; i < l; i++) {\n\t\t\t\t\t\tvar item = arr[i];\n\t\t\t\t\t\tvar binItem = Converter._converters[arrayItemType.name]['binary'](item);\n\t\t\t\t\t\t//console.log(\"binItem\", binItem);\n\t\t\t\t\t\tbinItemsArray.push( binItem );\n\t\t\t\t\t}\n\n\t\t\t\t\tvar binItems = binItemsArray.join(\"\");\n\n\t\t\t\t\tvar paddingLength = 0;\n\t\t\t\t\tif (binItems.length % 4) paddingLength = 4 - (binItems.length % 4);\n\t\t\t\t\tvar binPaddingLen = NumberToBinary(paddingLength, 2);\n\n\t\t\t\t\tvar binPadding = (new Array(paddingLength+1)).join(\"0\");\n\n\t\t\t\t\tvar bin = [];\n\t\t\t\t\tbin.push(binArrayIdentifier);\n\t\t\t\t\tbin.push(binPaddingLen);\n\t\t\t\t\tbin.push(binPadding);\n\t\t\t\t\tbin.push(binItems);\n\n\t\t\t\t\tvar finished = bin.join(\"\");\n\t\t\t\t\t//console.log(\"unwrapped\", finished);\n\n\t\t\t\t\tif (wrap === false) return finished;\n\n\t\t\t\t\tvar wrapped = Converter._variableWrapLength( finished);\n\t\t\t\t\t//console.log(\"wrapped\", wrapped);\n\n\t\t\t\t\treturn wrapped;\n\t\t\t\t}\n\n\t\t\t}\n\t\t},\n\t\t\"binary\": {\n\t\t\t\"array\": function ConverterBinaryToArray(bin, wrap) { //TODO PADDING NOT GOOD\n\t\t\t\tvar typeDef = DataType(\"array\");\n\n\t\t\t\t//console.log(\"wrapped\", bin);\n\t\t\t\tif (wrap !== false)\n\t\t\t\t\tbin = Converter._variableUnwrapLength( bin);\n\t\t\t\t//console.log(\"unwrapped\", bin);\n\n\t\t\t\tvar binArrayIdentifier = bin.substr(0, 4);\n\t\t\t\tvar binPaddingLen = bin.substr(4 , 2);\n\n\t\t\t\tvar arrayIdentifier = Converter._converters['binary'][ 'half' ]( binArrayIdentifier );\n\t\t\t\tvar paddingLength = BinaryToNumber( binPaddingLen, 2 );\n\n\t\t\t\tvar dataStart = 4 + 2 + paddingLength;\n\t\t\t\tvar dataLength = bin.length - dataStart;\n\n\t\t\t\tvar binItems = bin.substr(dataStart, dataLength );\n\n\t\t\t\tvar arrayItemType = DataType(arrayIdentifier);\n\t\t\t\tvar isVariableArray = arrayItemType.name == \"variable\";\n\n\t\t\t\tvar rtn = [];\n\t\t\t\tif (isVariableArray) {\n\n\t\t\t\t} else {\n\t\t\t\t\tvar hasVariableLengthChildren = arrayItemType.size == \"variable\";\n\t\t\t\t\tif (hasVariableLengthChildren) {\n\t\t\t\t\t\tvar VLDS = DataType.VARIABLELENGTHDESCRIPTORSIZE;\n\t\t\t\t\t\twhile ( binItems != \"\" ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar variableLength = Converter._variableLength( binItems );\n\t\t\t\t\t\t\tvar binItem = binItems.substr(0, VLDS + variableLength);\n\t\t\t\t\t\t\tbinItems = binItems.substr(VLDS+variableLength);\n\t\t\t\t\t\t\t//console.log(\"binItem\", binItem, BinaryToNumber(binItem, 16));\n\n\t\t\t\t\t\t\trtn.push( Converter._converters['binary'][ arrayItemType.name ]( binItem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhile ( binItems != \"\" ) {\n\t\t\t\t\t\t\tvar binItem = binItems.substr(0, arrayItemType.length);\n\t\t\t\t\t\t\tbinItems = binItems.substr(arrayItemType.length);\n\n\t\t\t\t\t\t\trtn.push( Converter._converters['binary'][ arrayItemType.name ](binItem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\treturn rtn;\n\n\t\t\t},\n\t\t\t\"base64\": function ConverterBinaryToBase64(bin) { //TODO PADDING NOT GOOD\n\t\t\t\tvar paddingLength = 0;\n\t\t\t\tif (bin.length % 6) paddingLength = 6 - (bin.length % 6);\n\t\t\t\tbinPaddingLen = NumberToBinary(paddingLength, 6);\n\t\t\t\tbinPadding = Padding.addLeft(\"\", paddingLength);\n\t\t\t\tbin = binPaddingLen + binPadding + bin;\n\n\t\t\t\tvar binLength = bin.length;\n\t\t\t    var base64 = \"\";\n\t\t\t    for (var b = 0; b < 10000; b++) {\n\t\t\t        if (b*6 >= binLength) break;\n\t\t\t     \n\t\t\t        var block = bin.substr(b*6,6);\n\t\t\t        base64 += Base64(parseInt(block, 2));\n\t\t\t    }\n\n\t\t\t    return base64;\n\t\t\t},\n\t\t\t\"base16\": function ConverterBinaryToBase16(bin) {\n\t\t\t\tvar paddingLength = 0;\n\t\t\t\tif (bin.length % 4) paddingLength = 4 - (bin.length % 4);\n\t\t\t\tbinPaddingLen = NumberToBinary(paddingLength, 4);\n\t\t\t\tbinPadding = Padding.addLeft(\"\", paddingLength);\n\t\t\t\tbin = binPaddingLen + binPadding + bin;\n\n\t\t\t    var binLength = bin.length;\n\t\t\t    var hex = \"\";\n\t\t\t    for (var b = 0; b < 10000; b++) {\n\t\t\t        if (b*4 >= binLength) break;\n\t\t\t     \n\t\t\t        var block = bin.substr(b*4,4);\n\t\t\t        hex += parseInt(block, 2).toString(16);\n\t\t\t    }\n\t\t\t    return hex;\n\t\t\t},\n\t\t\t\"double\": function ConverterBinaryToDouble(bin, wrap) {\n\t\t\t\tvar typeDef = DataType(\"double\");\n\t\t\t\t\n\t\t\t\tif (wrap !== false)\n\t\t\t\t\tbin = Converter._variableUnwrapLength(bin);\n\n\t\t\t\tvar isMinus = bin.substr(0 ,1) == 1;\n\n\t\t\t\tvar exponentByte = parseInt(\"0\" + bin.substr(1, 7), 2);\n\t\t\t\tvar baseLong = parseInt( bin.substr(8, bin.length), 2);\n\n\t\t\t\tvar dbl = parseFloat(baseLong+\"E-\"+exponentByte, 10);\n\t\t\t\tif (isMinus) dbl = dbl * -1;\n\n\t\t\t\treturn dbl;\n\t\t\t},\n\t\t\t\"long\": function ConverterBinaryToLong(bin) {\n\t\t\t\treturn parseInt(bin.substr(0, 32), 2);\n\t\t\t},\n\t\t\t\"short\": function ConverterBinaryToShort(bin) {\n\t\t\t\treturn parseInt(bin.substr(0, 16), 2);\n\t\t\t},\n\t\t\t\"byte\": function ConverterBinaryToByte(bin) {\n\t\t\t\treturn parseInt(bin.substr(0, 8), 2);\n\t\t\t},\n\t\t\t\"half\": function ConverterBinaryToHalf(bin) {\n\t\t\t\treturn parseInt(bin.substr(0, 4), 2);\n\t\t\t},\n\t\t\t\"boolean\": function ConverterBinaryToBoolean(bin) {\n\t\t\t\treturn bin.substr(0,1) == \"1\" ? true: false;\n\t\t\t},\n\t\t\t\"number\": function ConverterBinaryToNumber(bin) {\n\t\t\t\treturn parseInt(bin, 2);\n\t\t\t}\n\t\t}\n\t};\n\t\n\twindow.SCORMSuspendData = {\n\t\tserialize: function SCORMSuspendDataSerialize(arr) {\n\t\t\treturn Converter (\"array\", \"base64\", arr);\n\t\t},\n\t\tdeserialize: function SCORMSuspendDataDeserialize(base64) {\n\t\t\treturn Converter(\"base64\", \"array\", base64);\n\t\t},\n\t\tBase64: Base64,\n\t\tConverter: Converter,\n\t\tDataType: DataType\n\t};\n\n\n})(_);\n\ndefine(\"extensions/adapt-contrib-spoor/js/serializers/scormSuspendDataSerializer\", function(){});\n\n",
    "define('extensions/adapt-contrib-spoor/js/serializers/questions',[\n    'core/js/adapt',\n    './scormSuspendDataSerializer'\n], function (Adapt) {\n\n    //Captures the completion status and user selections of the question components\n    //Returns and parses a base64 style string\n    var includes = {\n        \"_isQuestionType\": true,\n        \"_isResetOnRevisit\": false\n    };\n\n    var serializer = {\n        serialize: function () {\n            return this.serializeSaveState();\n        },\n\n        serializeSaveState: function() {\n            if (Adapt.course.get('_latestTrackingId') === undefined) {\n                var message = \"This course is missing a latestTrackingID.\\n\\nPlease run the grunt process prior to deploying this module on LMS.\\n\\nScorm tracking will not work correctly until this is done.\";\n                console.error(message);\n                return \"\";\n            }\n\n            var rtn = \"\";\n            try {\n                var data = this.captureData();\n                if (data.length === 0) return \"\";\n                rtn = SCORMSuspendData.serialize(data);\n            } catch(e) {\n                console.error(e);\n            }\n\n            return rtn;\n        },\n\n        captureData: function() {\n            var data = [];\n            \n            var trackingIds = Adapt.blocks.pluck(\"_trackingId\");\n            var blocks = {};\n            var countInBlock = {};\n\n            for (var i = 0, l = trackingIds.length; i < l; i++) {\n\n                var trackingId = trackingIds[i];\n                var blockModel = Adapt.blocks.findWhere({_trackingId: trackingId });\n                var componentModels = blockModel.getChildren().where(includes);\n\n                for (var c = 0, cl = componentModels.length; c < cl; c++) {\n\n                    var component = componentModels[c].toJSON();\n                    var blockId = component._parentId;\n\n                    if (!blocks[blockId]) {\n                        blocks[blockId] = blockModel.toJSON();\n                    }\n\n                    var block = blocks[blockId];\n                    if (countInBlock[blockId] === undefined) countInBlock[blockId] = -1;\n                    countInBlock[blockId]++;\n\n                    var blockLocation = countInBlock[blockId];\n\n                    if (component['_isInteractionComplete'] === false || component['_isComplete'] === false) {\n                        //if component is not currently complete skip it\n                        continue;\n                    }\n\n                    var hasUserAnswer = (component['_userAnswer'] !== undefined);\n                    var isUserAnswerArray = (component['_userAnswer'] instanceof Array);\n\n                    if (hasUserAnswer && isUserAnswerArray && component['_userAnswer'].length === 0) {\n                        hasUserAnswer = false;\n                        isUserAnswerArray = false;\n                    }\n                    \n                    var numericParameters = [\n                            blockLocation,\n                            block['_trackingId'],\n                            component['_score'] || 0,\n                            component['_attemptsLeft'] || 0\n                        ];\n\n                    var booleanParameters = [\n                            hasUserAnswer,\n                            isUserAnswerArray,\n                            component['_isInteractionComplete'],\n                            component['_isSubmitted'],\n                            component['_isCorrect'] || false\n                        ];\n\n                    var dataItem = [\n                        numericParameters,\n                        booleanParameters\n                    ];\n\n\n                    if (hasUserAnswer) {\n                        var userAnswer = isUserAnswerArray ? component['_userAnswer'] : [component['_userAnswer']];\n\n                        var arrayType = SCORMSuspendData.DataType.getArrayType(userAnswer);\n\n                        switch(arrayType.name) {\n                        case \"string\": case \"variable\":\n                            console.log(\"Cannot store _userAnswers from component \" + component._id + \" as array is of variable or string type.\");\n                            continue;\n                        }\n\n                        dataItem.push(userAnswer);\n                    }\n\n                    data.push(dataItem);\n\n                }\n\n            }\n\n            return data;\n\n        },\n\n        deserialize: function (str) {\n\n            try {\n                var data = SCORMSuspendData.deserialize(str);\n                this.releaseData( data );\n            } catch(e) {\n                console.error(e);\n            }\n            \n        },    \n\n        releaseData: function (arr) {\n            \n            for (var i = 0, l = arr.length; i < l; i++) {\n                var dataItem = arr[i];\n\n                var numericParameters = dataItem[0];\n                var booleanParameters = dataItem[1];\n\n                var blockLocation = numericParameters[0];\n                var trackingId = numericParameters[1];\n                var score = numericParameters[2];\n                var attemptsLeft = numericParameters[3] || 0;\n\n                var hasUserAnswer = booleanParameters[0];\n                var isUserAnswerArray = booleanParameters[1];\n                var isInteractionComplete = booleanParameters[2];\n                var isSubmitted = booleanParameters[3];\n                var isCorrect = booleanParameters[4];\n\n                var block = Adapt.blocks.findWhere({_trackingId: trackingId});\n                var components = block.getChildren();\n                components = components.where(includes);\n                var component = components[blockLocation];\n\n                component.set(\"_isComplete\", true);\n                component.set(\"_isInteractionComplete\", isInteractionComplete);\n                component.set(\"_isSubmitted\", isSubmitted);\n                component.set(\"_score\", score);\n                component.set(\"_isCorrect\", isCorrect);\n                component.set(\"_attemptsLeft\", attemptsLeft);\n\n                if (hasUserAnswer) {\n                    var userAnswer = dataItem[2];\n                    if (!isUserAnswerArray) userAnswer = userAnswer[0];\n\n                    component.set(\"_userAnswer\", userAnswer);\n                }\n\n\n            }\n        }\n    };\n\n    return serializer;\n});\n\n",
    "define('extensions/adapt-contrib-spoor/js/adapt-stateful-session',[\n\t'core/js/adapt',\n\t'./serializers/default',\n\t'./serializers/questions'\n], function(Adapt, serializer, questions) {\n\n\t//Implements Adapt session statefulness\n\t\n\tvar AdaptStatefulSession = _.extend({\n\n\t\t_config: null,\n\t\t_shouldStoreResponses: true,\n\t\t_shouldRecordInteractions: true,\n\n\t//Session Begin\n\t\tinitialize: function(callback) {\n\t\t\tthis._onWindowUnload = _.bind(this.onWindowUnload, this);\n\t\t\t\n\t\t\tthis.getConfig();\n\n\t\t\tthis.getLearnerInfo();\n\t\t\t\n\t\t\t// restore state asynchronously to prevent IE8 freezes\n\t\t\tthis.restoreSessionState(_.bind(function() {\n\t\t\t\t// still need to defer call because AdaptModel.check*Status functions are asynchronous\n\t\t\t\t_.defer(_.bind(this.setupEventListeners, this));\n\t\t\t\tcallback();\n\t\t\t}, this));\n\t\t},\n\n\t\tgetConfig: function() {\n\t\t\tthis._config = Adapt.config.has('_spoor') ? Adapt.config.get('_spoor') : false;\n\t\t\t\n\t\t\tthis._shouldStoreResponses = (this._config && this._config._tracking && this._config._tracking._shouldStoreResponses);\n\t\t\t\n\t\t\t// default should be to record interactions, so only avoid doing that if _shouldRecordInteractions is set to false\n\t\t\tif (this._config && this._config._tracking && this._config._tracking._shouldRecordInteractions === false) {\n\t\t\t\tthis._shouldRecordInteractions = false;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * replace the hard-coded _learnerInfo data in _globals with the actual data from the LMS\n\t\t * if the course has been published from the AT, the _learnerInfo object won't exist so we'll need to create it\n\t\t */\n\t\tgetLearnerInfo: function() {\n\t\t\tvar globals = Adapt.course.get('_globals');\n\t\t\tif (!globals._learnerInfo) {\n\t\t\t\tglobals._learnerInfo = {};\n\t\t\t}\n\t\t\t_.extend(globals._learnerInfo, Adapt.offlineStorage.get(\"learnerinfo\"));\n\t\t},\n\n\t\tsaveSessionState: function() {\n\t\t\tvar sessionPairs = this.getSessionState();\n\t\t\tAdapt.offlineStorage.set(sessionPairs);\n\t\t},\n\n\t\trestoreSessionState: function(callback) {\n\t\t\tvar sessionPairs = Adapt.offlineStorage.get();\n\t\t\tvar hasNoPairs = _.keys(sessionPairs).length === 0;\n\n\t\t\tvar doSynchronousPart = _.bind(function() {\n\t\t\t\tif (sessionPairs.questions && this._shouldStoreResponses) questions.deserialize(sessionPairs.questions);\n\t\t\t\tif (sessionPairs._isCourseComplete) Adapt.course.set('_isComplete', sessionPairs._isCourseComplete);\n\t\t\t\tif (sessionPairs._isAssessmentPassed) Adapt.course.set('_isAssessmentPassed', sessionPairs._isAssessmentPassed);\n\t\t\t\tcallback();\n\t\t\t}, this);\n\n\t\t\tif (hasNoPairs) return callback();\n\n\t\t\t// asynchronously restore block completion data because this has been known to be a choke-point resulting in IE8 freezes\n\t\t\tif (sessionPairs.completion) {\n\t\t\t\tserializer.deserialize(sessionPairs.completion, doSynchronousPart);\n\t\t\t} else {\n\t\t\t\tdoSynchronousPart();\n\t\t\t}\n\t\t},\n\n\t\tgetSessionState: function() {\n\t\t\tvar sessionPairs = {\n\t\t\t\t\"completion\": serializer.serialize(),\n\t\t\t\t\"questions\": (this._shouldStoreResponses === true ? questions.serialize() : \"\"),\n\t\t\t\t\"_isCourseComplete\": Adapt.course.get(\"_isComplete\") || false,\n\t\t\t\t\"_isAssessmentPassed\": Adapt.course.get('_isAssessmentPassed') || false\n\t\t\t};\n\t\t\treturn sessionPairs;\n\t\t},\n\n\t//Session In Progress\n\t\tsetupEventListeners: function() {\n\t\t\t$(window).on('beforeunload unload', this._onWindowUnload);\n\n\t\t\tif (this._shouldStoreResponses) {\n\t\t\t\tthis.listenTo(Adapt.components, 'change:_isInteractionComplete', this.onQuestionComponentComplete);\n\t\t\t}\n\n\t\t\tif(this._shouldRecordInteractions) {\n\t\t\t\tthis.listenTo(Adapt, 'questionView:recordInteraction', this.onQuestionRecordInteraction);\n\t\t\t}\n\n\t\t\tthis.listenTo(Adapt.blocks, 'change:_isComplete', this.onBlockComplete);\n\t\t\tthis.listenTo(Adapt.course, 'change:_isComplete', this.onCompletion);\n\t\t\tthis.listenTo(Adapt, 'assessment:complete', this.onAssessmentComplete);\n\t\t\tthis.listenTo(Adapt, 'app:languageChanged', this.onLanguageChanged);\n\t\t},\n\n\t\tremoveEventListeners: function () {\n\t\t\t$(window).off('beforeunload unload', this._onWindowUnload);\n\t\t\tthis.stopListening();\n\t\t},\n\n\t\treattachEventListeners: function() {\n\t\t\tthis.removeEventListeners();\n\t\t\tthis.setupEventListeners();\n\t\t},\n\n\t\tonBlockComplete: function(block) {\n\t\t\tthis.saveSessionState();\n\t\t},\n\n\t\tonQuestionComponentComplete: function(component) {\n\t\t\tif (!component.get(\"_isQuestionType\")) return;\n\n\t\t\tthis.saveSessionState();\n\t\t},\n\n\t\tonCompletion: function() {\n\t\t\tif (!this.checkTrackingCriteriaMet()) return;\n\n\t\t\tthis.saveSessionState();\n\t\t\t\n\t\t\tAdapt.offlineStorage.set(\"status\", this._config._reporting._onTrackingCriteriaMet);\n\t\t},\n\n\t\tonAssessmentComplete: function(stateModel) {\n\t\t\tAdapt.course.set('_isAssessmentPassed', stateModel.isPass);\n\t\t\t\n\t\t\tthis.saveSessionState();\n\n\t\t\tthis.submitScore(stateModel);\n\n\t\t\tif (stateModel.isPass) {\n\t\t\t\tthis.onCompletion();\n\t\t\t} else if (this._config && this._config._tracking._requireAssessmentPassed) {\n\t\t\t\tthis.submitAssessmentFailed();\n\t\t\t}\n\t\t},\n\n\t\tonQuestionRecordInteraction:function(questionView) {\n\t\t\tvar responseType = questionView.getResponseType();\n\n\t\t\t// if responseType doesn't contain any data, assume that the question component hasn't been set up for cmi.interaction tracking\n\t\t\tif(_.isEmpty(responseType)) return;\n\n\t\t\tvar id = questionView.model.get('_id');\n\t\t\tvar response = questionView.getResponse();\n\t\t\tvar result = questionView.isCorrect();\n\t\t\tvar latency = questionView.getLatency();\n\t\t\t\n\t\t\tAdapt.offlineStorage.set(\"interaction\", id, response, result, latency, responseType);\n\t\t},\n\n\t\t/**\n\t\t * when the user switches language, we need to:\n\t\t * - reattach the event listeners as the language change triggers a reload of the json, which will create brand new collections\n\t\t * - get and save a fresh copy of the session state. as the json has been reloaded, the blocks completion data will be reset (the user is warned that this will happen by the language picker extension)\n\t\t * - check to see if the config requires that the lesson_status be reset to 'incomplete'\n\t\t */\n\t\tonLanguageChanged: function () {\n\t\t\tthis.reattachEventListeners();\n\n\t\t\tthis.saveSessionState();\n\t\t\t\n\t\t\tif (this._config._reporting && this._config._reporting._resetStatusOnLanguageChange === true) {\n\t\t\t\tAdapt.offlineStorage.set(\"status\", \"incomplete\");\n\t\t\t}\n\t\t},\n\n\t\tsubmitScore: function(stateModel) {\n\t\t\tif (this._config && !this._config._tracking._shouldSubmitScore) return;\n\n\t\t\tif (stateModel.isPercentageBased) {\n\t\t\t\tAdapt.offlineStorage.set(\"score\", stateModel.scoreAsPercent, 0, 100);\n\t\t\t} else {\n\t\t\t\tAdapt.offlineStorage.set(\"score\", stateModel.score, 0, stateModel.maxScore);\n\t\t\t}\n\t\t},\n\n\t\tsubmitAssessmentFailed: function() {\n\t\t\tif (this._config && this._config._reporting.hasOwnProperty(\"_onAssessmentFailure\")) {\n\t\t\t\tvar onAssessmentFailure = this._config._reporting._onAssessmentFailure;\n\t\t\t\tif (onAssessmentFailure === \"\") return;\n\t\t\t\t\t\n\t\t\t\tAdapt.offlineStorage.set(\"status\", onAssessmentFailure);\n\t\t\t}\n\t\t},\n\t\t\n\t\tcheckTrackingCriteriaMet: function() {\n\t\t\tvar criteriaMet = false;\n\n\t\t\tif (!this._config) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this._config._tracking._requireCourseCompleted && this._config._tracking._requireAssessmentPassed) { // user must complete all blocks AND pass the assessment\n\t\t\t\tcriteriaMet = (Adapt.course.get('_isComplete') && Adapt.course.get('_isAssessmentPassed'));\n\t\t\t} else if (this._config._tracking._requireCourseCompleted) { //user only needs to complete all blocks\n\t\t\t\tcriteriaMet = Adapt.course.get('_isComplete');\n\t\t\t} else if (this._config._tracking._requireAssessmentPassed) { // user only needs to pass the assessment\n\t\t\t\tcriteriaMet = Adapt.course.get('_isAssessmentPassed');\n\t\t\t}\n\n\t\t\treturn criteriaMet;\n\t\t},\n\n\t//Session End\n\t\tonWindowUnload: function() {\n\t\t\tthis.removeEventListeners();\n\t\t}\n\t\t\n\t}, Backbone.Events);\n\n\treturn AdaptStatefulSession;\n\n});\n",
    "define('extensions/adapt-contrib-spoor/js/adapt-offlineStorage-scorm',[\n\t'core/js/adapt',\n\t'./scorm',\n\t'core/js/offlineStorage'\n], function(Adapt, scorm) {\n\n\t//SCORM handler for Adapt.offlineStorage interface.\n\n\t//Stores to help handle posting and offline uniformity\n\tvar temporaryStore = {};\n\tvar suspendDataStore = {};\n\tvar suspendDataRestored = false;\n\n\tAdapt.offlineStorage.initialize({\n\n\t\tget: function(name) {\n\t\t\tif (name === undefined) {\n\t\t\t\t//If not connected return just temporary store.\n\t\t\t\tif (this.useTemporaryStore()) return temporaryStore;\n\n\t\t\t\t//Get all values as a combined object\n\t\t\t\tsuspendDataStore = this.getCustomStates();\n\n\t\t\t\tvar data = _.extend(_.clone(suspendDataStore), {\n\t\t\t\t\tlocation: scorm.getLessonLocation(),\n\t\t\t\t\tscore: scorm.getScore(),\n\t\t\t\t\tstatus: scorm.getStatus(),\n\t\t\t\t\tstudent: scorm.getStudentName(),\n\t\t\t\t\tlearnerInfo: this.getLearnerInfo()\n\t\t\t\t});\n\n\t\t\t\tsuspendDataRestored = true;\n\t\t\t\t\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t//If not connected return just temporary store value.\n\t\t\tif (this.useTemporaryStore()) return temporaryStore[name];\n\n\t\t\t//Get by name\n\t\t\tswitch (name.toLowerCase()) {\n\t\t\t\tcase \"location\":\n\t\t\t\t\treturn scorm.getLessonLocation();\n\t\t\t\tcase \"score\":\n\t\t\t\t\treturn scorm.getScore();\n\t\t\t\tcase \"status\":\n\t\t\t\t\treturn scorm.getStatus();\n\t\t\t\tcase \"student\":// for backwards-compatibility. learnerInfo is preferred now and will give you more information\n\t\t\t\t\treturn scorm.getStudentName();\n\t\t\t\tcase \"learnerinfo\":\n\t\t\t\t\treturn this.getLearnerInfo();\n\t\t\t\tdefault:\n\t\t\t\t\treturn this.getCustomState(name);\n\t\t\t}\n\t\t},\n\n\t\tset: function(name, value) {\n\t\t\t//Convert arguments to array and drop the 'name' parameter\n\t\t\tvar args = [].slice.call(arguments, 1);\n\t\t\tvar isObject = typeof name == \"object\";\n\n\t\t\tif (isObject) {\n\t\t\t\tvalue = name;\n\t\t\t\tname = \"suspendData\";\n\t\t\t}\n\n\t\t\tif (this.useTemporaryStore()) {\n\t\t\t\tif (isObject) {\n\t\t\t\t\ttemporaryStore = _.extend(temporaryStore, value);\n\t\t\t\t} else {\n\t\t\t\t\ttemporaryStore[name] = value;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tswitch (name.toLowerCase()) {\n\t\t\t\tcase \"interaction\":\n\t\t\t\t\treturn scorm.recordInteraction.apply(scorm, args);\n\t\t\t\tcase \"location\":\n\t\t\t\t\treturn scorm.setLessonLocation.apply(scorm, args);\n\t\t\t\tcase \"score\":\n\t\t\t\t\treturn scorm.setScore.apply(scorm, args);\n\t\t\t\tcase \"status\":\n\t\t\t\t\treturn scorm.setStatus.apply(scorm, args);\n\t\t\t\tcase \"student\":\n\t\t\t\tcase \"learnerinfo\":\n\t\t\t\t\treturn false;// these properties are read-only\n\t\t\t\tcase \"lang\":\n\t\t\t\t\tscorm.setLanguage(value);\n\t\t\t\t\t// fall-through so that lang gets stored in suspend_data as well:\n\t\t\t\t\t// because in SCORM 1.2 cmi.student_preference.language is an optional data element\n\t\t\t\t\t// so we can't rely on the LMS having support for it. \n\t\t\t\t\t// If it does support it we may as well save the user's choice there purely for reporting purposes\n\t\t\t\tcase \"suspenddata\":\n\t\t\t\tdefault:\n\t\t\t\t\tif (isObject) {\n\t\t\t\t\t\tsuspendDataStore = _.extend(suspendDataStore, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsuspendDataStore[name] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dataAsString = JSON.stringify(suspendDataStore);\n\t\t\t\t\treturn (suspendDataRestored) ? scorm.setSuspendData(dataAsString) : false;\n\t\t\t}\n\t\t},\n\n\t\tgetCustomStates: function() {\n\t\t\tvar isSuspendDataStoreEmpty = _.isEmpty(suspendDataStore);\n\t\t\tif (!isSuspendDataStoreEmpty && suspendDataRestored) return _.clone(suspendDataStore);\n\n\t\t\tvar dataAsString = scorm.getSuspendData();\n\t\t\tif (dataAsString === \"\" || dataAsString === \" \" || dataAsString === undefined) return {};\n\n\t\t\tvar dataAsJSON = JSON.parse(dataAsString);\n\t\t\tif (!isSuspendDataStoreEmpty && !suspendDataRestored) dataAsJSON = _.extend(dataAsJSON, suspendDataStore);\n\t\t\treturn dataAsJSON;\n\t\t},\n\n\t\tgetCustomState: function(name) {\n\t\t\tvar dataAsJSON = this.getCustomStates();\n\t\t\treturn dataAsJSON[name];\n\t\t},\n\t\t\n\t\tuseTemporaryStore: function() {\n\t\t\tvar cfg = Adapt.config.get('_spoor');\n\t\t\t\n\t\t\tif (!scorm.lmsConnected || (cfg && cfg._isEnabled === false)) return true;\n\t\t\treturn false;\n\t\t},\n\n\t\t/**\n\t\t * Returns an object with the properties:\n\t\t * - id (cmi.core.student_id)\n\t\t * - name (cmi.core.student_name - which is usually in the format \"Lastname, Firstname\" - but sometimes doesn't have the space after the comma)\n\t\t * - firstname\n\t\t * - lastname\n\t\t */\n\t\tgetLearnerInfo: function() {\n\t\t\tvar name = scorm.getStudentName();\n\t\t\tvar firstname = \"\", lastname = \"\";\n\t\t\tif (name && name !== 'undefined' && name.indexOf(\",\") > -1) {\n\t\t\t\t//last name first, comma separated\n\t\t\t\tvar nameSplit = name.split(\",\");\n\t\t\t\tlastname = $.trim(nameSplit[0]);\n\t\t\t\tfirstname = $.trim(nameSplit[1]);\n\t\t\t\tname = firstname + \" \" + lastname;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"SPOOR: LMS learner_name not in 'lastname, firstname' format\");\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tname: name,\n\t\t\t\tlastname: lastname,\n\t\t\t\tfirstname: firstname,\n\t\t\t\tid: scorm.getStudentId()\n\t\t\t};\n\t\t}\n\t\t\n\t});\n\n});\n",
    "define('extensions/adapt-contrib-spoor/js/adapt-contrib-spoor',[\n    'core/js/adapt',\n    './scorm',\n    './adapt-stateful-session',\n    './adapt-offlineStorage-scorm'\n], function(Adapt, scorm, adaptStatefulSession) {\n\n    //SCORM session manager\n\n    var Spoor = _.extend({\n\n        _config: null,\n\n    //Session Begin\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"configModel:dataLoaded\", this.onConfigLoaded);\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onDataReady);\n        },\n\n        onConfigLoaded: function() {\n            if (!this.checkConfig()) {\n                if (Adapt.offlineStorage.setReadyStatus) {// backwards-compatibility check - setReadyStatus was only introduced in framework v2.0.14\n                    Adapt.offlineStorage.setReadyStatus();\n                }\n                return;\n            }\n\n            this.configureAdvancedSettings();\n\n            scorm.initialize();\n\n            /*\n            force offlineStorage-scorm to initialise suspendDataStore - this allows us to do things like store the user's \n            chosen language before the rest of the course data loads \n            */\n            Adapt.offlineStorage.get();\n\n            if (Adapt.offlineStorage.setReadyStatus) {\n                Adapt.offlineStorage.setReadyStatus();\n            }\n\n            this.setupEventListeners();\n        },\n\n        onDataReady: function() {\n            Adapt.trigger('plugin:beginWait');\n            adaptStatefulSession.initialize(function() {\n                Adapt.trigger('plugin:endWait');\n            });\n        },\n\n        checkConfig: function() {\n            this._config = Adapt.config.get('_spoor') || false;\n\n            if (this._config && this._config._isEnabled !== false) return true;\n            \n            return false;\n        },\n\n        configureAdvancedSettings: function() {\n            if(this._config._advancedSettings) {\n                var settings = this._config._advancedSettings;\n\n                if(settings._showDebugWindow) scorm.showDebugWindow();\n\n                scorm.setVersion(settings._scormVersion || \"1.2\");\n\n                if(settings.hasOwnProperty(\"_suppressErrors\")) {\n                    scorm.suppressErrors = settings._suppressErrors;\n                }\n\n                if(settings.hasOwnProperty(\"_commitOnStatusChange\")) {\n                    scorm.commitOnStatusChange = settings._commitOnStatusChange;\n                }\n\n                if(settings.hasOwnProperty(\"_timedCommitFrequency\")) {\n                    scorm.timedCommitFrequency = settings._timedCommitFrequency;\n                }\n\n                if(settings.hasOwnProperty(\"_maxCommitRetries\")) {\n                    scorm.maxCommitRetries = settings._maxCommitRetries;\n                }\n\n                if(settings.hasOwnProperty(\"_commitRetryDelay\")) {\n                    scorm.commitRetryDelay = settings._commitRetryDelay;\n                }\n            } else {\n                /**\n                * force use of SCORM 1.2 by default - some LMSes (SABA/Kallidus for instance) present both APIs to the SCO and, if given the choice,\n                * the pipwerks code will automatically select the SCORM 2004 API - which can lead to unexpected behaviour.\n                */\n                scorm.setVersion(\"1.2\");\n            }\n\n            /**\n            * suppress SCORM errors if 'nolmserrors' is found in the querystring\n            */\n            if(window.location.search.indexOf('nolmserrors') != -1) scorm.suppressErrors = true;\n        },\n\n        setupEventListeners: function() {\n            var advancedSettings = this._config._advancedSettings;\n            var shouldCommitOnVisibilityChange = (!advancedSettings ||\n                advancedSettings._commitOnVisibilityChangeHidden !== false) &&\n                document.addEventListener;\n\n            this._onWindowUnload = _.bind(this.onWindowUnload, this);\n            $(window).on('beforeunload unload', this._onWindowUnload);\n\n            if (shouldCommitOnVisibilityChange) {\n                document.addEventListener(\"visibilitychange\", this.onVisibilityChange);\n            }\n\n            require(['libraries/jquery.keycombo'], function() {\n                // listen for user holding 'd', 'e', 'v' keys together\n                $.onKeyCombo([68, 69, 86], function() {\n                    scorm.showDebugWindow();\n                });\n            });\n        },\n\n        removeEventListeners: function() {\n            $(window).off('beforeunload unload', this._onWindowUnload);\n\n            if (document.removeEventListener) {\n                document.removeEventListener(\"visibilitychange\", this.onVisibilityChange);\n            }\n        },\n\n        onVisibilityChange: function() {\n            if (document.visibilityState === \"hidden\") scorm.commit();\n        },\n\n    //Session End\n\n        onWindowUnload: function() {\n            this.removeEventListeners();\n\n            if (!scorm.finishCalled){\n                scorm.finish();\n            }\n        }\n        \n    }, Backbone.Events);\n\n    Spoor.initialize();\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/trickleView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleView = Backbone.View.extend({\n\n        isSteplocked: false,\n\n        initialize: function(options) {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            var AdaptEvents = {\n                \"trickle:kill\": this.onKill,\n                \"remove\": this.onRemove\n            };\n            \n            this.onPreRender(this);\n\n            AdaptEvents[this.model.get(\"_type\") + \"View:postRender\"] = this.onPostRender;\n            this.listenTo(Adapt, AdaptEvents);\n\n            this.on(\"steplock\", this.onStepLock);\n            this.on(\"stepunlock\", this.onStepUnlock);\n        },\n\n        onPreRender: function(view) {\n            if (!this.isElementEnabled()) return;\n\n            Adapt.trigger(\"trickle:preRender\", this);\n        },\n\n        onPostRender: function(view) {\n            if (view.model.get(\"_id\") !== this.model.get(\"_id\")) return;\n            if (!this.isElementEnabled()) return;\n\n            Adapt.trigger(\"trickle:postRender\", this);\n        },\n\n        isElementEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (!trickle) return false;\n\n            var isArticleWithOnChildren = (this.model.get(\"_type\") === \"article\" && trickle._onChildren);\n            if (isArticleWithOnChildren) {\n                return false;\n            }\n\n            if (trickle._isEnabled === true) return true;\n            return false;\n        },\n\n        onStepLock: function() {\n            if (!this.isElementEnabled()) {\n                this.continueToNext();\n                return;\n            }\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            var isSteplocking = (trickle._stepLocking && trickle._stepLocking._isEnabled);\n            if (!isSteplocking) {\n                this.continueToNext();\n                return;\n            }\n\n            Adapt.trigger(\"trickle:steplock\", this);\n            //console.log(\"trickle steplock at\", this.model.get(\"_id\"))\n\n            this.isSteplocked = true;\n        },\n\n        continueToNext: function() {\n            _.defer(_.bind(function() {\n                Adapt.trigger(\"trickle:continue\", this);\n            }, this));\n        },\n\n\n        onStepUnlock: function() {\n            if (!this.isSteplocked) return;\n            this.isSteplocked = false;\n            Adapt.trigger(\"trickle:stepunlock\", this);\n        },\n\n        onKill: function() {\n            this.detachFromElement();\n        },\n\n        onRemove: function() {\n            this.detachFromElement();\n        },\n\n        detachFromElement: function() {\n            this.undelegateEvents();\n            this.stopListening();\n            this.model = null;\n            this.articleModel = null;\n            this.$el = null;\n            this.el = null;\n        }\n                \n    });\n\n    return TrickleView;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/pageView',[\n    'core/js/adapt',\n    './trickleView'\n], function(Adapt, TrickleView) {\n\n    var PageView = Backbone.View.extend({\n\n        currentDescendantIndex: 0,\n        currentLocksOnDescendant: 0,\n        currentDescendant: null,\n\n        initialize: function(options) {\n            if (!this.isPageEnabled()) {\n                return this.detachFromPage();\n            }\n            this.setupDescendants();\n            if (!this.haveDescendantsGotTrickle()) {\n                return this.detachFromPage();   \n            }\n            this.addClassToHtml();\n            this.setupEventListeners();\n        },\n\n        isPageEnabled: function() {\n            var trickleConfig = Adapt.trickle.getModelConfig(this.model);\n            if (trickleConfig && trickleConfig._isEnabled === false) return false;\n            return true;\n        },\n\n        setupDescendants: function() {\n            this.currentDescendant = null;\n            this.descendantViews = {};\n            this.getDescendants();\n            Adapt.trigger(\"trickle:descendants\", this);\n        },\n\n        descendantsChildFirst: null,\n        descendantsParentFirst: null,\n        descendantViews: null,\n\n        getDescendants: function() {\n            this.descendantsChildFirst = this.model.getDescendants();\n            this.descendantsParentFirst = this.model.getDescendants(true);\n\n            //if some descendants flip between _isAvailable true/false they must have their defaults set before the filter is applied\n            this.setDescendantsTrickleDefaults();\n\n            this.descendantsChildFirst = this.filterComponents(this.descendantsChildFirst);\n            this.descendantsParentFirst = this.filterComponents(this.descendantsParentFirst);\n\n        },\n\n        filterComponents: function(descendants) {\n            return _.filter(descendants, function(descendant) {\n                if (descendant.get(\"_type\") === \"component\") return false;\n                if (!descendant.get(\"_isAvailable\")) return false;\n                return true;\n            });\n        },\n\n        setDescendantsTrickleDefaults: function() {\n            //use parent first as likely to get to article\n            _.each(this.descendantsParentFirst, _.bind(function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                if (!trickle) {\n                    return;\n                }\n\n                //check if trickle is configures on descendant\n                //NOTE: Removed for banked assessments\n                //var isTrickleConfigured = descendant.get(\"_isTrickleConfigured\");\n                //if (isTrickleConfigured) return;\n\n                //setup steplocking defaults\n                trickle._stepLocking = _.extend({\n                    \"_isEnabled\": true, //(default=true)\n                    \"_isCompletionRequired\": true, //(default=true)\n                    \"_isLockedOnRevisit\": false //(default=false)\n                }, trickle._stepLocking);\n\n                //setup main trickle defaults\n                trickle = _.extend({\n                    \"_isEnabled\": true, //(default=true)\n                    \"_autoScroll\": true, //(default=true)\n                    \"_scrollDuration\": 500, //(default=500)\n                    \"_onChildren\": true, //(default=true)\n                    \"_scrollTo\": \"@block +1\" //(default=\"@block +1\")\n                }, trickle);\n\n                Adapt.trickle.setModelConfig(descendant, trickle);\n\n                //check article \"onChildren\" rule\n                if (trickle._onChildren \n                    && descendant.get(\"_type\") === \"article\") {\n                    this.setupArticleOnChildren(descendant, trickle);\n                }\n\n                //set descendant trickle as configured\n                descendant.set(\"_isTrickleConfigured\", true);\n\n            }, this));\n        },\n\n        setupArticleOnChildren: function(articleModel, articleTrickleConfig) {\n            //set trickle on all blocks, using article config with block overrides\n            var articleBlocks = articleModel.getChildren();\n\n            articleBlocks.each(function(blockModel, index) {\n                var blockTrickleConfig = Adapt.trickle.getModelConfig(blockModel);\n\n                //overlay block trickle on article trickle\n                //this allows values to carry through from the article to the block \n                //retains any value overriden in the block\n                for (var k in blockTrickleConfig) {\n                    //handle nested objects to one level\n                    if (typeof blockTrickleConfig[k] === \"object\") {\n                        blockTrickleConfig[k] = _.extend({}, articleTrickleConfig[k], blockTrickleConfig[k]);\n                    }\n                }\n\n                blockTrickleConfig = _.extend({}, articleTrickleConfig, blockTrickleConfig);\n\n\n                //setup start/final config\n                if (articleBlocks.length === index+1) {\n                    blockTrickleConfig._isFinal = true;\n                }\n                if (index === 0) {\n                    blockTrickleConfig._isStart = true;\n                }\n\n                Adapt.trickle.setModelConfig(blockModel, blockTrickleConfig);\n            });\n\n        },\n\n        haveDescendantsGotTrickle: function() {\n            return _.some(this.descendantsChildFirst, function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                if (!trickle) return false;\n                if (trickle._isEnabled === true) {\n                    return true;\n                }\n                return false;\n            });\n        },\n\n        addClassToHtml: function() {\n            $(\"html\").addClass(\"trickle\");\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"remove\": this.onRemove,\n                \n                \"articleView:preRender\": this.onDescendantPreRender,\n                \"blockView:preRender\": this.onDescendantPreRender,\n\n                \"trickle:unwait\": this.onUnwait,\n                \"trickle:wait\": this.onWait,\n                \"trickle:continue\": this.onContinue,\n                \"trickle:skip\": this.onSkip,\n\n                \"trickle:kill\": this.onKill\n            });\n            this.listenToOnce(this.model, \"change:_isReady\", this.onPageReady);\n        },\n\n        onDescendantPreRender: function(view) {\n            //ignore components\n            if (view.model.get(\"_type\") === \"component\") return;\n\n            var descendantView = new TrickleView({\n                model: view.model,\n                el: view.el\n            });\n            this.descendantViews[view.model.get(\"_id\")] = descendantView;\n        },\n\n        //trickle lifecycle\n\n        onPageReady: function(model, value) {\n            if (!value) return;\n\n            this.currentDescendant = null;\n\n            Adapt.trigger(\"trickle:started\");\n            this.gotoNextDescendant();\n        },\n\n        gotoNextDescendant: function() {\n            this.getDescendants();\n\n            if (this.currentDescendant) {\n                this.currentDescendant.trigger(\"stepunlock\");\n                this.currentDescendant = null;\n            }\n\n            for (var index = this.currentDescendantIndex || 0, l = this.descendantsChildFirst.length; index < l; index++) {\n                var descendant = this.descendantsChildFirst[index];\n                switch ( descendant.get(\"_type\") ) {\n                case \"block\": case \"article\":\n                    this.currentLocksOnDescendant = 0;\n                    this.currentDescendantIndex = index;\n                    var currentId = descendant.get(\"_id\");\n                    this.currentDescendant = this.descendantViews[currentId];\n                    this.currentDescendant.trigger(\"steplock\");\n                    return;\n                }\n            }\n            this.finished();\n        },\n\n        onContinue: function(view) {\n            if (!this.currentDescendant) return;\n            if (view.model.get(\"_id\") !== this.currentDescendant.model.get(\"_id\")) return;\n\n            this.onSkip();\n        },\n\n        onWait: function() {\n            this.currentLocksOnDescendant++;\n        },\n\n        onUnwait: function() {\n            this.currentLocksOnDescendant--;\n            if (this.currentLocksOnDescendant > 0) return;\n            \n            var lastDescendant = this.currentDescendant.model;\n            \n            this.currentDescendantIndex++;\n            this.gotoNextDescendant();\n\n            Adapt.trickle.scroll(lastDescendant);\n            \n        },\n\n        onSkip: function() {\n            //wait for all handlers to accept skip\n            _.defer(_.bind(function() {\n                this.currentDescendantIndex++;\n                this.gotoNextDescendant();\n            }, this));\n        },\n\n        onKill: function() {\n            this.finished();\n            this.detachFromPage();\n        },\n\n        finished: function() {\n            Adapt.trigger(\"trickle:finished\");\n            this.detachFromPage();\n        },\n\n        //end of trickle lifecycle\n\n        onRemove: function() {\n            this.finished();\n        },\n\n        detachFromPage: function() {\n            this.removeClassFromHtml();\n            this.undelegateEvents();\n            this.stopListening();\n            this.model = null;\n            this.$el = null;\n            this.el = null;\n            this.currentDescendant = null;\n            this.descendantViews = null;\n            this.descendantsChildFirst = null;\n            this.descendantsParentFirst = null;\n            Adapt.trickle.pageView = null;\n        },\n\n        removeClassFromHtml: function() {\n            $(\"html\").removeClass(\"trickle\");\n        }\n                \n    });\n\n    return PageView;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/lib/adaptModelExtension',[\n    'coreJS/adapt',\n    'coreModels/adaptModel'\n], function(Adapt, AdaptModel) {\n\n    _.extend(AdaptModel.prototype, {\n        \n        /*\n        * Fetchs the sub structure of an id as a flattened array\n        *\n        *   Such that the tree:\n        *       { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\n        *\n        *   will become the array (parent first = false):\n        *       [ c1, c2, b1, c3, c4, b2, a1, c5, c6, b3, a2 ]\n        *\n        *   or (parent first = true):\n        *       [ a1, b1, c1, c2, b2, c3, c4, a2, b3, c5, c6 ]\n        *\n        * This is useful when sequential operations are performed on the page/article/block/component hierarchy.\n        */\n        getDescendants: function(parentFirst) {\n            var descendants = [];\n\n            if (this.get(\"_type\") === \"component\") {\n                descendants.push(this);\n                return descendants;\n            }\n\n            var children = this.getChildren().models;\n\n            for (var i = 0, l = children.length; i < l; i++) {\n\n                var child = children[i];\n                if (child.get(\"_type\") === \"component\") {\n\n                    descendants.push(child);\n\n                } else {\n\n                    var subDescendants = child.getDescendants(parentFirst);\n                    if (parentFirst == true) descendants.push(child);\n                    descendants = descendants.concat(subDescendants);\n                    if (parentFirst != true) descendants.push(child);\n\n                }\n\n            }\n\n            return descendants;\n        },\n\n        /*\n        * Returns a relative structural item from the Adapt hierarchy\n        *   \n        *   Such that in the tree:\n        *       { a1: { b1: [ c1, c2 ], b2: [ c3, c4 ] }, a2: { b3: [ c5, c6 ] } }\n        *\n        *       findRelative(modelC1, \"@block +1\") = modelB2;\n        *       findRelative(modelC1, \"@component +4\") = modelC5;\n        *\n        */\n        findRelative: function(relativeString, options) {\n            var types = [ \"menu\", \"page\", \"article\", \"block\", \"component\" ];\n\n            options = options || {};\n\n            var modelId = this.get(\"_id\");\n            var modelType = this.get(\"_type\");\n\n            //return a model relative to the specified one if opinionated\n            var rootModel = Adapt.course;\n            if (options.limitParentId) {\n                rootModel = Adapt.findById(options.limitParentId);\n            }\n\n            var relativeDescriptor = parseRelativeString(relativeString);\n\n            var findAncestorType = (_.indexOf(types, modelType) > _.indexOf(types, relativeDescriptor.type));\n            var findSameType = (modelType === relativeDescriptor.type);\n\n            var searchBackwards = false;\n            var movementCount = 0;\n\n            // children first [c,c,b,a,c,c,b,a,p,c,c,b,a,c,c,b,a,p]\n            var pageDescendants = rootModel.getDescendants();\n\n            //choose search style\n            if (findSameType || findAncestorType) {\n                //examples a<>a or c<>b,a,p\n                //assume next is 0 index\n                //assume last is -1 index\n                searchBackwards = (relativeDescriptor.offset <= 0);\n            } else {\n                //finding descendant\n                //examples a<>c or a<>b\n                if (relativeDescriptor.offset < 1) {\n                    //assume last descendant is 0 index\n                    searchBackwards = true;\n                } else {\n                    //assume next descendant is +1 index\n                    movementCount = 1;\n                    searchBackwards = false;\n                }\n            }\n\n            //exclude not available and not visible if opinionated\n            if (options.filterNotVisible) {\n                pageDescendants = _.filter(pageDescendants, function(descendant) {\n                    return descendant.get(\"_isVisible\");\n                });\n            } \n            if (options.filterNotAvailable) {\n                pageDescendants = _.filter(pageDescendants, function(descendant) {\n                    return descendant.get(\"_isAvailable\");\n                });\n            } \n\n            //find current index in array\n            var modelIndex = _.findIndex(pageDescendants, function(pageDescendant) {\n                if (pageDescendant.get(\"_id\") === modelId) {\n                    return true;\n                }\n                return false;\n            });\n\n            //search in appropriate order\n            if (searchBackwards) {\n                for (var i = modelIndex, l = -1; i > l; i--) {\n                    var descendant = pageDescendants[i];\n                    if (descendant.get(\"_type\") === relativeDescriptor.type) {\n                        if (-movementCount === relativeDescriptor.offset) {\n                            return Adapt.findById(descendant.get(\"_id\"));\n                        }\n                        movementCount++;\n                    }\n                }\n            } else {\n                for (var i = modelIndex, l = pageDescendants.length; i < l; i++) {\n                    var descendant = pageDescendants[i];\n                    if (descendant.get(\"_type\") === relativeDescriptor.type) {\n                        if (movementCount === relativeDescriptor.offset) {\n                            return Adapt.findById(descendant.get(\"_id\"));\n                        }\n                        movementCount++;\n                    }\n                }\n            }\n\n            return undefined;\n        }\n    });\n\n\n    function parseRelativeString(relativeString) {\n        var type = relativeString.substr(0, _.indexOf(relativeString, \" \"));\n        var offset = parseInt(relativeString.substr(type.length));\n        type = type.substr(1);\n\n        /*RETURN THE TYPE AND OFFSET OF THE SCROLLTO\n        * \"@component +1\"  : \n        * {\n        *       type: \"component\",\n        *       offset: 1\n        * }\n        */\n        return { \n            type: type,\n            offset: offset\n        };\n    }\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/buttonView',[\n    'core/js/adapt',\n    'core/js/views/componentView'\n], function(Adapt, ComponentView) {\n\n    var completionAttribute = \"_isComplete\";\n\n    var TrickleButtonView = Backbone.View.extend({\n\n        isStepLocking: false,\n        hasStepLocked: false,\n        isStepLocked: false,\n        isStepLockFinished: false,\n        hasStepPreCompleted: false,\n        isWaitingForClick: false,\n        allowVisible: false,\n        allowEnabled: true,\n        overlayShownCount: 0,\n\n        el: function() {\n\n            this.setupPreRender();\n\n            return Handlebars.templates['trickle-button'](this.model.toJSON());\n        },\n\n        setupPreRender: function() {\n            \n            this.setupButtonVisible();\n            this.setupButtonEnabled();\n        },\n\n        setupButtonVisible: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            this.allowVisible = false;\n            trickle._button._isVisible = false;\n\n            if (trickle._button._styleBeforeCompletion === \"visible\") {\n                this.allowVisible = true;\n                if (trickle._button._autoHide && trickle._button._isFullWidth) {\n                    trickle._button._isVisible = false;    \n                } else {\n                    trickle._button._isVisible = true;\n                }\n            }\n        },\n\n        setupButtonEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            \n            if (trickle._stepLocking._isCompletionRequired === false) {\n                this.allowEnabled = true;\n                trickle._button._isDisabled = false;   \n            } else if (trickle._button._styleBeforeCompletion === \"visible\") {\n                this.allowEnabled = false;\n                trickle._button._isDisabled = true;\n            } else {\n                trickle._button._isDisabled = false;\n                this.allowEnabled = true;\n            }\n\n        },\n        \n        events: {\n            \"click button\": \"onButtonClick\"\n        },\n\n        initialize: function(options) {\n            this.getCompletionAttribute();\n            this.debounceCheckAutoHide();\n            this.setupStepLocking();\n            this.setupEventListeners();\n        },\n\n        getCompletionAttribute: function() {\n            var trickle = Adapt.trickle.getModelConfig(Adapt.config);\n            if (!trickle) return;\n            if (trickle._completionAttribute) {\n                completionAttribute = trickle._completionAttribute;\n            }\n        },\n\n        setupStepLocking: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (trickle._stepLocking._isEnabled) {\n                this.isStepLocked = true;\n            } else {\n                this.isStepLocked = false;\n            }\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:overlay\": this.onOverlay,\n                \"trickle:unoverlay\": this.onUnoverlay,\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:skip\": this.onSkip,\n                \"trickle:kill\": this.onKill,\n                \"trickle:update\": this.onUpdate,\n                \"remove\": this.onRemove \n            });\n\n            this.listenTo(this.model, \"change:\"+completionAttribute, this.onCompletion);\n        },\n\n        debounceCheckAutoHide: function() {\n            this.checkButtonAutoHideSync = _.bind(this.checkButtonAutoHide, this);\n            this.checkButtonAutoHide = _.debounce(this.checkButtonAutoHideSync, 100);\n        },\n\n        checkButtonAutoHide: function() {\n            if (!this.allowVisible) {\n                this.setButtonVisible(false);\n                return;\n            }\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (!trickle._button._autoHide) {\n                this.setButtonVisible(true);\n                return;\n            } else if (this.overlayShownCount > 0) {\n                this.setButtonVisible(false);\n                return;\n            }\n\n            var measurements = this.$el.onscreen();\n\n            //this is to fix ios7 iphone4 miscalculation\n            var isJustOffscreen = (measurements.bottom > -100);\n\n\n            //add show/hide animation here if needed\n            if (measurements.onscreen || isJustOffscreen) {\n                this.setButtonVisible(true);\n            } else {\n                this.setButtonVisible(false);\n            }\n        },\n\n        setButtonVisible: function(bool) {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (!bool) {\n                this.$(\".component-inner\").addClass(\"display-none\");\n                trickle._button._isVisible = false;\n                //console.log(\"trickle hiding button\", this.model.get(\"_id\"));\n            } else {\n                this.$(\".component-inner\").removeClass(\"display-none\");\n                trickle._button._isVisible = true;\n                //console.log(\"trickle showing button\", this.model.get(\"_id\"));\n            }\n        },\n\n        checkButtonEnabled: function(bool) {\n            if (!this.allowEnabled) {\n                this.setButtonEnabled(false);\n            } else {\n                this.setButtonEnabled(true);\n            }\n        },\n\n        setButtonEnabled: function(bool) {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n            if (bool) {\n                this.$(\"button\").removeClass(\"disabled\").removeAttr(\"disabled\");\n                trickle._button._isDisabled = true;\n            } else {\n                this.$(\"button\").addClass(\"disabled\").attr(\"disabled\", \"disabled\");\n                trickle._button._isDisabled = false;\n            }\n        },\n\n        onStepLock: function(view) {\n            if (!this.isViewMatch(view)) return;\n\n            this.hasStepLocked = true;\n            this.isStepLocking = true;\n            this.overlayShownCount = 0;\n\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (this.isButtonEnabled()) {\n                var isCompleteAndShouldRelock = (trickle._stepLocking._isLockedOnRevisit && this.model.get(completionAttribute));\n\n                if (isCompleteAndShouldRelock) {\n                    this.isStepLocked = true;\n                    this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                    Adapt.trigger(\"trickle:wait\");\n                    this.allowVisible = true;\n                    this.checkButtonAutoHide();\n                } else if (this.hasStepPreCompleted) {\n                    //force the button to show if section completed before it was steplocked\n                    this.isStepLocked = true;\n                    this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                    this.allowVisible = true;\n                    this.stepCompleted();\n                }\n                this.setupOnScreenListener();\n            }\n        },\n\n        onOverlay: function() {\n            this.overlayShownCount++;\n        },\n\n        onUnoverlay: function() {\n            this.overlayShownCount--;\n            this.checkButtonAutoHide();\n        },\n\n        setupOnScreenListener: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (trickle._button._autoHide) {\n                this.$el.on(\"onscreen\", this.checkButtonAutoHideSync);\n            }\n        },\n\n        isViewMatch: function(view) {\n            return view.model.get(\"_id\") === this.model.get(\"_id\");\n        },\n\n        isButtonEnabled: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (!trickle._isEnabled || !trickle._button._isEnabled) return false;\n            return true;\n        },\n\n        onCompletion: function(model, value) {\n            if (value === false) return;\n\n            this.hasStepPreCompleted = true;\n\n            if (!this.hasStepLocked) return;\n\n            _.defer(_.bind(function() {\n                this.stepCompleted();\n            }, this));\n        },\n\n        stepCompleted: function() {\n\n            if (this.isStepLockFinished) return;\n\n            this.isStepLocked = false;\n            this.allowVisible = false;\n            this.allowEnabled = false;\n\n            if (this.isButtonEnabled()) {\n                if (this.isStepLocking) {\n\n                    this.isStepLocked = true;\n                    this.isWaitingForClick = true;\n                    Adapt.trigger(\"trickle:wait\");\n\n                } else {\n\n                    this.isStepLockFinished = true;\n                }\n\n                this.allowVisible = true;\n                this.allowEnabled = true;\n            }\n\n            this.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.checkButtonAutoHide();\n            this.checkButtonEnabled();\n\n        },\n\n        onButtonClick: function() {\n            if (this.isStepLocked) {\n                Adapt.trigger(\"trickle:unwait\");\n                this.isStepLocked = false;\n                this.isStepLockFinished = true;\n\n            } else {\n                this.model.set(\"_isTrickleAutoScrollComplete\", false);\n                _.defer(_.bind(function() {\n                    Adapt.trickle.scroll(this.model);\n                }, this));\n            }\n\n            var trickle = this.model.get(\"_trickle\");\n            switch (trickle._button._styleAfterClick) {\n            case \"hidden\":\n                this.allowVisible = false;\n                this.checkButtonAutoHideSync();\n                break;\n            case \"disabled\":\n                this.allowEnabled = false;\n                this.checkButtonAutoHideSync();\n            }\n        },\n\n        onUpdate: function() {\n            var trickle = Adapt.trickle.getModelConfig(this.model);\n\n            if (trickle._button._autoHide && this.isStepLocking) {\n                this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            }\n            \n            var $original = this.$el;\n            var $newEl = $(Handlebars.templates['trickle-button'](this.model.toJSON()));\n            $original.replaceWith($newEl);\n\n            this.setElement($newEl);\n\n            if (trickle._button._autoHide && this.isStepLocking) {\n                this.$el.on(\"onscreen\", this.checkButtonAutoHideSync);\n            }\n        },\n\n        onStepUnlock: function(view) {\n            if (!this.isViewMatch(view)) return;\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            this.isStepLocking = false;\n            this.overlayShownCount = 0;\n        },\n\n        onSkip: function() {\n            if (!this.isStepLocking) return;\n\n            this.onKill();\n        },\n\n        onKill: function() {\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            if (this.isWaitingForClick) {\n                this.model.set(\"_isTrickleAutoScrollComplete\", true);\n            }\n            this.isWaitingForClick = false;\n            this.isStepLocked = false;\n            this.isStepLocking = false;\n            this.allowVisible = false;\n            this.allowEnabled = false;\n            this.isStepLockFinished = true;\n            this.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.checkButtonAutoHide();\n            this.checkButtonEnabled();\n        },\n\n        onRemove: function() {\n            if (this.isWaitingForClick) {\n                this.model.set(\"_isTrickleAutoScrollComplete\", true);\n            }\n            this.isWaitingForClick = false;\n            this.$el.off(\"onscreen\", this.checkButtonAutoHideSync);\n            this.isStepLocking = true;\n            this.remove();\n        }\n\n    });\n\n    return TrickleButtonView;\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/button',[\n    'core/js/adapt',\n    './buttonView'\n], function(Adapt, ButtonView) {\n\n    var TrickleButtonHandler = _.extend({\n\n        buttonViews: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                \"app:dataReady\": this.onAppDataReady,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onAppDataReady: function() {\n            this.buttonViews = {};\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:preRender\": this.onPreRender,\n                \"trickle:postRender\": this.onPostRender\n            });\n        },\n\n        onPreRender: function(view) {\n            //setup button on prerender to allow it to control the steplocking process\n            if (!this.isTrickleEnabled(view.model)) return;\n\n            this.setupConfigDefaults(view.model);\n\n            this.buttonViews[view.model.get(\"_id\")] = new ButtonView({\n                model: view.model\n            });\n        },\n\n        onPostRender: function(view) {\n            //inject the button at post render\n            if (!this.isTrickleEnabled(view.model)) return;\n\n            view.$el.append(this.buttonViews[view.model.get(\"_id\")].$el);\n        },\n\n        isTrickleEnabled: function(model) {\n            var trickle = Adapt.trickle.getModelConfig(model);\n            if (!trickle || !trickle._isEnabled) return false;\n\n            if (trickle._onChildren && model.get(\"_type\") === \"article\") return false;\n\n            return true;\n        },\n\n        setupConfigDefaults: function(model) {\n            if (model.get(\"_isTrickleButtonConfigured\")) return;\n\n            var trickle = Adapt.trickle.getModelConfig(model);\n            trickle._button = _.extend({\n                \"_isEnabled\": true, //(default=true)\n                \"_styleBeforeCompletion\": \"hidden\", //(default=hidden)\n                \"_styleAfterClick\": \"hidden\", //(default=hidden)\n                \"_isFullWidth\": true, //(default=true)\n                \"_autoHide\": true, //(default=true)\n                \"_className\": \"\", //(default=\"\")\n                \"text\": \"Continue\", //(default=\"Continue\")\n                \"startText\": \"Begin\", //(default=\"Begin\")\n                \"finalText\": \"Finish\", //(default=\"Finish\")\n                \"_component\": \"trickle-button\", //(default=\"trickle-button\")\n                \"_isLocking\": true,\n                \"_isVisible\": false,\n                \"_isDisabled\": false\n            }, trickle._button);\n\n\n            if (trickle._button._isFullWidth) {\n                trickle._stepLocking._isEnabled = true;\n                trickle._button._styleAfterClick = \"hidden\";\n            } else {\n                trickle._button._autoHide = false;\n            }\n\n            Adapt.trickle.setModelConfig(model, trickle);\n            model.set(\"_isTrickleButtonConfigured\", true);\n\n        },\n\n        onRemove: function() {\n            this.buttonViews = {};\n        }\n\n    }, Backbone.Events);\n\n    TrickleButtonHandler.initialize();\n\n    return TrickleButtonHandler;\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/completion',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var completionAttribute = \"_isComplete\";\n\n    var TrickleCompletionHandler = _.extend({\n\n        isStepLocking: false,\n        isCompleted: false,\n        \n        stepModel: null,\n        \n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.getCompletionAttribute();\n            this.setupEventListeners();\n        },\n\n        getCompletionAttribute: function() {\n            var trickle = Adapt.trickle.getModelConfig(Adapt.config);\n            if (!trickle) return;\n            if (trickle._completionAttribute) {\n                completionAttribute = trickle._completionAttribute;\n            }\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:descendants\": this.onDescendants,\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onDescendants: function(view) {\n            //save the original completion state of the component before steplocking\n            _.each(view.descendantsParentFirst, _.bind(function(descendant) {\n                var trickle = Adapt.trickle.getModelConfig(descendant);\n                if (!trickle) return;\n                trickle._wasCompletedPreRender = descendant.get(completionAttribute);\n            }, this));\n        },\n\n        onStepLock: function(view) {\n            var isModelComplete = view.model.get(completionAttribute);\n\n            var trickle = Adapt.trickle.getModelConfig(view.model);\n            if (!trickle._stepLocking._isCompletionRequired\n                && !trickle._stepLocking._isLockedOnRevisit) {\n                if (isModelComplete) {\n                    //skip any components that do not require completion but that are already complete\n                    //this is needed for a second visit to a page with 'inview' components that aren't reset and don't require completion and are not relocked on revisit\n                    Adapt.trigger(\"trickle:continue\", view);\n                }\n                return;\n            }\n\n            if (trickle._stepLocking._isCompletionRequired\n                && isModelComplete\n                && trickle._wasCompletedPreRender) {\n                //skip any components that are complete, have require completion and we completed before the page rendered\n                Adapt.trigger(\"trickle:continue\", view);\n                return;\n            }\n\n            Adapt.trigger(\"trickle:wait\");\n\n            if (isModelComplete) {\n                _.defer(function() {\n                    Adapt.trigger(\"trickle:unwait\");\n                });\n                return;\n            }\n\n            view.model.set(\"_isTrickleAutoScrollComplete\", false);\n            this.isCompleted = false;\n            this.isStepLocking = true;\n            this.stepModel = view.model;\n\n            this.listenTo(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n        },\n\n        onCompletion: function(model, value) {\n            if (value === false) return;\n\n            _.defer(_.bind(function() {\n                this.stepCompleted();\n            }, this));\n\n        },\n\n        stepCompleted: function() {\n\n            if (!this.isStepLocking) return;\n\n            if (this.isCompleted) return;\n            this.isCompleted = true;\n\n            this.stopListening(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n            \n            _.defer(function(){\n                Adapt.trigger(\"trickle:unwait\");\n            });\n        },\n\n        onKill: function() {\n            this.onStepUnlock();\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        },\n\n        onStepUnlock: function() {\n            this.stopListening(this.stepModel, \"change:\"+completionAttribute, this.onCompletion);\n            this.isStepLocking = false;\n            this.stepModel = null;\n            this.isCompleted = false;\n        }        \n\n    }, Backbone.Events);\n\n    TrickleCompletionHandler.initialize();\n\n    return TrickleCompletionHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/notify',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleNotifyHandler = _.extend({\n\n        isStepLocking: false,\n        isNotifyOpen: false,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"notify:opened\": this.onNotifyOpened,\n                \"notify:closed\": this.onNotifyClosed,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n        },\n\n        onNotifyOpened: function() {\n            if (!this.isStepLocking) return;\n\n            this.isNotifyOpen = true;\n            Adapt.trigger(\"trickle:overlay\");\n            Adapt.trigger(\"trickle:wait\");\n        },\n\n        onNotifyClosed: function() {\n            if (!this.isStepLocking) return;\n            if (!this.isNotifyOpen) return;\n\n            this.isNotifyOpen = false;\n            Adapt.trigger(\"trickle:unoverlay\");\n            Adapt.trigger(\"trickle:unwait\");\n        },\n\n        onStepUnlock: function() {\n            this.isStepLocking = false;\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    }, Backbone.Events);\n\n    TrickleNotifyHandler.initialize();\n\n    return TrickleNotifyHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/resize',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleBodyResizeHandler = _.extend({\n\n        isStepLocking: false,\n\n        stepView: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.debounceOnResize();\n            this.setupEventListeners();\n        },\n\n        debounceOnResize: function() {\n            this.onResize = _.debounce(_.bind(this.onResize, this), 10);\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:resize\": this.onTrickleResize,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"trickle:finished\": this.onFinished,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n            this.stepView = view;\n            $(window).on(\"resize\", this.onResize);\n            $(\".page\").on(\"resize\", this.onResize);\n\n            //wait for height / visibility to adjust\n            _.defer(function() {\n                Adapt.trigger(\"trickle:resize\");\n            });\n        },\n\n        onResize: function() {\n            if (!this.isStepLocking) return;\n            Adapt.trigger(\"trickle:resize\");\n        },\n\n        onTrickleResize: function() {\n            if (!this.isStepLocking) return;\n            var offset = this.stepView.$el.offset();\n            var height = this.stepView.$el.height();\n\n            var topPadding = parseInt($(\"#wrapper\").css(\"padding-top\") || \"0\");\n\n            var bottom = (offset['top'] - topPadding) + height;\n\n            $(\"#wrapper\").css(\"height\", bottom );\n        },\n\n        onStepUnlock: function(view) {\n            this.isStepLocking = false;\n            this.stepView = null;\n            $(window).off(\"resize\", this.onResize);\n            $(\".page\").off(\"resize\", this.onResize);\n        },\n\n        onKill: function() {\n            this.onFinished();\n            this.onStepUnlock();\n        },\n\n        onFinished: function() {\n             $(\"#wrapper\").css(\"height\", \"\" );\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n            this.stepView = null;\n        }\n\n    }, Backbone.Events);\n\n    TrickleBodyResizeHandler.initialize();\n\n    return TrickleBodyResizeHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/tutor',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleTutorHandler = _.extend({\n\n        stepLockedId: null,\n        isStepLocking: false,\n        isTutorOpen: false,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"tutor:opened\": this.onTutorOpened,\n                \"tutor:closed\": this.onTutorClosed,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onStepLock: function(view) {\n            if (view) {\n                this.stepLockedId = view.model.get(\"_id\");\n            }\n            this.isStepLocking = true;\n        },\n\n        onTutorOpened: function(view, alertObject) {\n            if (!this.isStepLocking) return;\n            if (!this.isOriginStepLocked(view)) return;\n\n            this.isTutorOpen = true;\n            Adapt.trigger(\"trickle:overlay\");\n            Adapt.trigger(\"trickle:wait\");\n        },\n\n        isOriginStepLocked: function(view) {\n            if (!view || !this.stepLockedId) return true;\n\n            var parents = view.model.getAncestorModels();\n            var hasStepLockedParent = _.find(parents, function(ancestor) {\n                return ancestor.get('_id') === this.stepLockedId;\n            }, this);\n            if (!hasStepLockedParent) return false;\n            return true;\n        },\n\n        onTutorClosed: function(view, alertObject) {\n            if (!this.isStepLocking) return;\n            if (!this.isTutorOpen) return;\n            if (!this.isOriginStepLocked(view)) return;\n\n            this.isTutorOpen = false;\n            Adapt.trigger(\"trickle:unoverlay\");\n            Adapt.trigger(\"trickle:unwait\");\n        },\n\n        onStepUnlock: function() {\n            this.isStepLocking = false;\n            this.stepLockedId = null;\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    }, Backbone.Events);\n\n    TrickleTutorHandler.initialize();\n\n    return TrickleTutorHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/visibility',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleVisibilityHandler = _.extend({\n\n        isStepLocking: false,\n\n        trickleModel: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onStepLock,\n                \"trickle:visibility\": this.onVisibility,\n                \"trickle:stepunlock\": this.onStepUnlock,\n                \"trickle:kill\": this.onKill,\n                \"trickle:finished\": this.onFinished,\n                \"remove\": this.onRemove\n            });\n\n        },\n\n        onStepLock: function(view) {\n            this.isStepLocking = true;\n            this.trickleModel = view.model;\n            Adapt.trigger(\"trickle:visibility\");\n        },\n\n        onVisibility: function() {\n            if (!this.isStepLocking) return;\n\n            if (!Adapt.trickle.pageView) return;\n\n            var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;\n\n            var trickleModelId = this.trickleModel.get(\"_id\");\n            var trickleType = this.trickleModel.get(\"_type\");\n\n            var atIndex = _.findIndex(descendantsParentFirst, function(descendant) {\n                if (descendant.get(\"_id\") === trickleModelId) return true;\n            });\n\n            _.each(descendantsParentFirst, function(descendant, index) {\n                var components = descendant.findDescendantModels(\"components\");\n                if (index <= atIndex) {\n                    descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                    _.each(components, function(componentModel) {\n                        componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                    });\n                } else {\n\n                    if (trickleType === \"article\" && descendant.get(\"_type\") === \"block\") {\n                        //make sure article blocks are shown\n                        if (descendant.get(\"_parentId\") === trickleModelId) {\n                            descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                            _.each(components, function(componentModel) {\n                                componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                            });\n                            return;\n                        }\n                    }\n\n                    descendant.set(\"_isVisible\", false, {pluginName:\"trickle\"});\n                    _.each(components, function(componentModel) {\n                        componentModel.set(\"_isVisible\", false, {pluginName:\"trickle\"});\n                    });\n                }\n            });\n\n        },\n\n        onStepUnlock: function(view) {\n            this.isStepLocking = false;\n            this.trickleModel = null;\n        },\n\n        onKill: function() {\n            this.onFinished();\n            this.onStepUnlock();\n        },\n\n        onFinished: function() {\n\n            var descendantsParentFirst = Adapt.trickle.pageView.descendantsParentFirst;\n            _.each(descendantsParentFirst, function(descendant) {\n                descendant.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                var components = descendant.findDescendantModels(\"components\");\n                _.each(components, function(componentModel) {\n                    componentModel.set(\"_isVisible\", true, {pluginName:\"trickle\"});\n                });\n            });\n\n        },\n\n        onRemove: function() {\n            this.onStepUnlock();\n        }\n\n    }, Backbone.Events);\n\n    TrickleVisibilityHandler.initialize();\n\n    return TrickleVisibilityHandler;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/handlers/done',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var TrickleDone = _.extend({\n\n        initialize: function() {\n            this.listenToOnce(Adapt, \"app:dataReady\", this.onAppDataReady);\n        },\n\n        onAppDataReady: function() {\n            this.setupEventListeners();\n        },\n\n        setupEventListeners: function() {\n            this.onDone = _.debounce(_.bind(this.onDone), 50);\n            this.listenTo(Adapt, {\n                \"trickle:steplock\": this.onDone,\n                \"trickle:stepunlock\": this.onDone,\n                \"trickle:continue\": this.onDone,\n                \"trickle:finished\": this.onDone\n            });\n        },\n\n        onDone: function() {\n            Adapt.trigger(\"trickle:done\");\n        }\n\n    }, Backbone.Events);\n\n    TrickleDone.initialize();\n\n    return TrickleDone;\n\n});\n\n",
    "define('extensions/adapt-contrib-trickle/js/adapt-contrib-trickle',[\n    'coreJS/adapt',\n    './pageView',\n    'libraries/jquery.resize',\n    './lib/adaptModelExtension',\n    './handlers/button',\n    './handlers/completion',\n    './handlers/notify',\n    './handlers/resize',\n    './handlers/tutor',\n    './handlers/visibility',\n    './handlers/done'\n], function(Adapt, PageView) {\n\n    Adapt.trickle = _.extend({\n\n        model: null,\n        pageView: null,\n\n        initialize: function() {\n            this.listenToOnce(Adapt, {\n                \"app:dataReady\": this.onAppDataReady\n            });\n        },\n\n        onAppDataReady: function() {\n            this.getCourseModel();\n            if (!this.isCourseEnabled()) return;\n            this.setupListeners();\n        },\n\n        getCourseModel: function() {\n            this.model = Adapt.course;\n        },\n\n        isCourseEnabled: function() {\n            var trickleConfig = this.getModelConfig(this.model);\n            if (trickleConfig && trickleConfig._isEnabled === false) return false;\n            return true;\n        },\n\n        getModelConfig: function(model) {\n            return model.get(\"_trickle\");\n        },\n\n        setModelConfig: function(model, config) {\n            return model.set(\"_trickle\", config);\n        },\n\n        setupListeners: function() {\n            this.listenTo(Adapt, {\n                \"pageView:preRender\": this.onPagePreRender,\n                \"remove\": this.onRemove\n            });\n        },\n\n        onPagePreRender: function(view) {\n            this.pageView = new PageView({\n                model: view.model, \n                el: view.el\n            });\n        },\n\n        scroll: function(fromModel) {\n            //wait for model visibility to handle\n            _.delay(_.bind(function() {\n\n                if (!this.shouldScrollPage(fromModel)) return;\n\n                var trickle = Adapt.trickle.getModelConfig(fromModel);\n                var scrollTo = trickle._scrollTo;\n                if (scrollTo === undefined) scrollTo = \"@block +1\";\n\n                fromModel.set(\"_isTrickleAutoScrollComplete\", true);\n\n                var scrollToId = \"\";\n                switch (scrollTo.substr(0,1)) {\n                case \"@\":\n                    //NAVIGATE BY RELATIVE TYPE\n                    \n                    //Allows trickle to scroll to a sibling / cousin component relative to the current trickle item\n                    var relativeModel = fromModel.findRelative(scrollTo, {\n                        filterNotAvailable: true\n                    });\n                    \n                    if (relativeModel === undefined) return;\n                    scrollToId = relativeModel.get(\"_id\");\n\n                    //console.log(\"trickle scrolling to\", scrollToId, \"from\", fromModel.get(\"_id\"));\n\n                    break;\n                case \".\":\n                    //NAVIGATE BY CLASS\n                    scrollToId = scrollTo.substr(1, scrollTo.length-1);\n                    break;\n                default: \n                    scrollToId = scrollTo;\n                }\n\n                if (scrollToId == \"\") return;\n                \n                var duration = fromModel.get(\"_trickle\")._scrollDuration || 500;\n                Adapt.scrollTo(\".\" + scrollToId, { duration: duration });\n\n            }, this), 250);\n        },\n\n        shouldScrollPage: function(fromModel) {\n            var trickle = Adapt.trickle.getModelConfig(fromModel);\n            if (!trickle || !trickle._isEnabled) return false;\n\n            var hasScrolled = fromModel.get(\"_isTrickleAutoScrollComplete\");\n            if (hasScrolled) return false;\n\n            var isAutoScrollOff = (!trickle._autoScroll);\n            if (isAutoScrollOff) return false;\n\n            var isArticleWithOnChildren = (fromModel.get(\"_type\") === \"article\" && trickle._onChildren);\n            if (isArticleWithOnChildren) return false;\n\n            return true;\n        },\n\n        onRemove: function() {\n            \n        }\n                \n    }, Backbone.Events);\n\n    Adapt.trickle.initialize();\n\n    return Adapt.trickle;\n\n});\n\n",
    "define('extensions/adapt-contrib-tutor/js/adapt-contrib-tutor',[\n    'coreJS/adapt'\n],function(Adapt) {\n\n    Adapt.on('questionView:showFeedback', function(view) {\n\n        var alertObject = {\n            title: view.model.get(\"feedbackTitle\"),\n            body: view.model.get(\"feedbackMessage\")\n        };\n\n        var attributes = {};\n        var classes = [];\n\n        if (view.model.has('_isCorrect')) {\n            // Attach specific classes so that feedback can be styled.\n            if (view.model.get('_isCorrect')) {\n                classes.push('correct');\n            } else {\n                if (view.model.has('_isAtLeastOneCorrectSelection')) {\n                    // Partially correct feedback is an option.\n                    if (view.model.get('_isAtLeastOneCorrectSelection')) {\n                        classes.push('partially-correct');\n                    } else {\n                        classes.push('incorrect');\n                    }\n                } else {\n                    classes.push('incorrect');\n                }\n            }\n        }\n\n        // Add the extension/component type which triggered this.\n        if (view.model.has('_component')) {\n            classes.push('component-' + view.model.get('_component'));\n        } else if (view.model.has('_extension')) {\n            classes.push('extension-' + view.model.get('_extension'));\n        }\n\n        // Add the _id property as attribute.\n        attributes['data-adapt-id'] = view.model.get('_id');\n\n        alertObject._classes = classes.join(' ');\n        alertObject._attributes = attributes;\n\n        Adapt.once(\"notify:closed\", function() {\n            Adapt.trigger(\"tutor:closed\", view, alertObject);\n        });\n\n        Adapt.trigger('notify:popup', alertObject);\n\n        Adapt.trigger('tutor:opened', view, alertObject);\n    });\n\n});\n\n",
    "define('core/js/views/menuView',[\n    'core/js/adapt',\n    'core/js/views/adaptView'\n], function(Adapt, AdaptView) {\n\n    var MenuView = AdaptView.extend({\n\n    \tclassName: function() {\n            var visible = \"visibility-hidden\";\n            if (this.model.get('_isVisible')) {\n                visible = \"\";\n            }\n    \t\treturn 'menu ' +\n            'menu-' +\n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') +\n            \" \" + this.setVisibility();\n    \t},\n\n        preRender: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this.$el.css('opacity', 0);\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\n        },\n\n        postRender: function() {\n        },\n\n        isReady: function() {\n            if (this.model.get('_isReady')) {\n                _.defer(_.bind(function() {\n                    $('.loading').hide();\n                    $(window).scrollTop(0);\n                    Adapt.trigger('menuView:ready', this);\n                    var styleOptions = { opacity: 1 };\n                    if (this.disableAnimation) {\n                        this.$el.css(styleOptions);\n                        $.inview();\n                    } else {\n                        this.$el.velocity(styleOptions, {\n                            duration: 'fast',\n                            complete: function() {\n                                $.inview();\n                            }\n                        });\n                    }\n                    $(window).scroll();\n                }, this));\n            }\n        }\n\n    }, {\n        type:'menu'\n    });\n\n    return MenuView;\n\n});\n\n",
    "define('menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu',[\n    'coreJS/adapt',\n    'coreViews/menuView'\n], function(Adapt, MenuView) {\n\n    var BoxMenuView = MenuView.extend({\n\n        postRender: function() {\n            var nthChild = 0;\n            this.model.getChildren().each(function(item) {\n                if (item.get('_isAvailable')) {\n                    nthChild++;\n                    item.set(\"_nthChild\", nthChild);\n                    this.$('.menu-container-inner').append(new BoxMenuItemView({model: item}).$el);\n                }\n            });\n        }\n\n    }, {\n        template: 'boxmenu'\n    });\n\n    var BoxMenuItemView = MenuView.extend({\n\n        events: {\n            'click button' : 'onClickMenuItemButton'\n        },\n\n        className: function() {\n            var nthChild = this.model.get(\"_nthChild\");\n            return [\n                'menu-item',\n                'menu-item-' + this.model.get('_id') ,\n                this.model.get('_classes'),\n                this.model.get('_isVisited') ? 'visited' : '',\n                this.model.get('_isComplete') ? 'completed' : '',\n                this.model.get('_isLocked') ? 'locked' : '',\n                'nth-child-' + nthChild,\n                nthChild % 2 === 0 ? 'nth-child-even' : 'nth-child-odd'\n            ].join(' ');\n        },\n\n        preRender: function() {\n            this.model.checkCompletionStatus();\n            this.model.checkInteractionCompletionStatus();\n        },\n\n        postRender: function() {\n            var graphic = this.model.get('_graphic');\n            if (graphic && graphic.src && graphic.src.length > 0) {\n                this.$el.imageready(_.bind(function() {\n                    this.setReadyStatus();\n                }, this));\n            } else {\n                this.setReadyStatus();\n            }\n        },\n\n        onClickMenuItemButton: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            if(this.model.get('_isLocked')) return;\n            Backbone.history.navigate('#/id/' + this.model.get('_id'), {trigger: true});\n        }\n\n    }, {\n        template: 'boxmenu-item'\n    });\n\n    Adapt.on('router:menu', function(model) {\n\n        $('#wrapper').append(new BoxMenuView({model: model}).$el);\n\n    });\n\n});\n\n",
    "define('theme/adapt-contrib-vanilla/js/theme-block',['require','coreJS/adapt','backbone'],function(require) {\n\t\n\tvar Adapt = require('coreJS/adapt');\n\tvar Backbone = require('backbone');\n\n\tvar ThemeBlockView = Backbone.View.extend({\n\n\t\tinitialize: function() {\n\t\t\tthis.setStyles();\n\t\t\tthis.listenTo(Adapt, 'device:resize', this.setStyles);\n\t\t\tthis.listenTo(Adapt, 'remove', this.remove);\n\t\t},\n\n\t\tsetStyles: function() {\n\t\t\tthis.setBackground();\n\t\t\tthis.setMinHeight();\n\t\t\tthis.setDividerBlock();\n\t\t},\n\n\t\tsetBackground: function() {\n\t\t\tvar backgroundColor = this.model.get('_themeBlockConfig')._backgroundColor;\n\t\t\t\n\t\t\tif (backgroundColor) {\n\t\t\t\tthis.$el.addClass(backgroundColor);\n\t\t\t}\n\t\t},\n\n\t\tsetMinHeight: function() {\n\t\t\tvar minHeight = 0;\n\t\t\tvar minHeights = this.model.get('_themeBlockConfig')._minimumHeights;\n\n\t\t\tif (minHeights) {\n\n\t\t\t\tif(Adapt.device.screenSize == 'large') {\n\t\t\t\t\tminHeight = minHeights._large;\n\t\t\t\t} else if (Adapt.device.screenSize == 'medium') {\n\t\t\t\t\tminHeight = minHeights._medium;\n\t\t\t\t} else {\n\t\t\t\t\tminHeight = minHeights._small;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.$el.css({\n\t\t\t\tminHeight: minHeight + \"px\"\n\t\t\t});\n\t\t},\n\n\t\tsetDividerBlock: function() {\n\t\t\tvar dividerBlock = this.model.get('_themeBlockConfig')._isDividerBlock;\n\n\t\t\tif (dividerBlock) {\n\t\t\t\tthis.$el.addClass('divider-block');\n\t\t\t}\n\t\t}\n\t});\n\n\treturn ThemeBlockView;\n\t\n});\n\n",
    "define('theme/adapt-contrib-vanilla/js/vanilla',['require','coreJS/adapt','backbone','theme/adapt-contrib-vanilla/js/theme-block'],function(require) {\n\t\n\tvar Adapt = require('coreJS/adapt');\n\tvar Backbone = require('backbone');\n\tvar ThemeBlock = require('theme/adapt-contrib-vanilla/js/theme-block');\n\n\t// Block View\n\t// ==========\n\n\tAdapt.on('blockView:postRender', function(view) {\n\t\tvar theme = view.model.get('_theme');\n\t\t\n\t\tif (theme) {\n\t\t\tnew ThemeBlock({\n\t\t\t\tmodel: new Backbone.Model({\n\t\t\t\t\t_themeBlockConfig: theme\n\t\t\t\t}),\n\t\t\t\tel: view.$el\n\t\t\t});\n\t\t}\n\t});\n});\n\n",
    ";\ndefine(\"plugins\", [\"components/adapt-contrib-accordion/js/adapt-contrib-accordion\",\"components/adapt-contrib-assessmentResults/js/adapt-contrib-assessmentResults\",\"components/adapt-contrib-blank/js/adapt-contrib-blank\",\"components/adapt-contrib-gmcq/js/adapt-contrib-gmcq\",\"components/adapt-contrib-graphic/js/adapt-contrib-graphic\",\"components/adapt-contrib-hotgraphic/js/adapt-contrib-hotgraphic\",\"components/adapt-contrib-matching/js/adapt-contrib-matching\",\"components/adapt-contrib-mcq/js/adapt-contrib-mcq\",\"components/adapt-contrib-media/js/adapt-contrib-media\",\"components/adapt-contrib-narrative/js/adapt-contrib-narrative\",\"components/adapt-contrib-slider/js/adapt-contrib-slider\",\"components/adapt-contrib-text/js/adapt-contrib-text\",\"components/adapt-contrib-textInput/js/adapt-contrib-textInput\",\"extensions/adapt-contrib-assessment/js/adapt-assessmentArticleExtension\",\"extensions/adapt-contrib-bookmarking/js/adapt-contrib-bookmarking\",\"extensions/adapt-contrib-languagePicker/js/adapt-languagePicker\",\"extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress\",\"extensions/adapt-contrib-resources/js/adapt-contrib-resources\",\"extensions/adapt-contrib-spoor/js/adapt-contrib-spoor\",\"extensions/adapt-contrib-trickle/js/adapt-contrib-trickle\",\"extensions/adapt-contrib-tutor/js/adapt-contrib-tutor\",\"menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu\",\"theme/adapt-contrib-vanilla/js/vanilla\"], function(){});\n\n",
    "require([\n    'core/js/adapt',\n    'core/js/adaptCollection',\n    'core/js/startController',\n    'core/js/models/buildModel',\n    'core/js/models/articleModel',\n    'core/js/models/blockModel',\n    'core/js/models/configModel',\n    'core/js/models/contentObjectModel',\n    'core/js/models/componentModel',\n    'core/js/models/courseModel',\n    'core/js/models/questionModel',\n    'core/js/views/navigationView',\n    'core/js/accessibility',\n    'core/js/offlineStorage',\n    'core/js/logging',\n    'core/js/tracking',\n    'core/js/device',\n    'core/js/graphics',\n    'core/js/drawer',\n    'core/js/notify',\n    'core/js/popupManager',\n    'core/js/router',\n    'core/js/models/lockingModel',\n    'core/js/helpers',\n    'plugins'\n], function (Adapt, AdaptCollection, StartController, BuildModel, ArticleModel, BlockModel, ConfigModel, ContentObjectModel, ComponentModel, CourseModel, QuestionModel, NavigationView) {\n\n    // Append loading template and show\n    window.Handlebars = _.extend(require(\"handlebars\"), window.Handlebars);\n\n    var template = Handlebars.templates['loading'];\n    $('#wrapper').append(template());\n\n    Adapt.build = new BuildModel(null, {url: \"adapt/js/build.min.js\", reset:true});\n\n    // This function is called anytime a course object is loaded\n    // Once all course files are loaded trigger events and call Adapt.initialize\n    Adapt.checkDataIsLoaded = function(newLanguage) {\n        if (Adapt.contentObjects.models.length > 0\n            && Adapt.articles.models.length > 0\n            && Adapt.blocks.models.length > 0\n            && Adapt.components.models.length > 0\n            && Adapt.course.get('_id')) {\n\n            configureInview();\n\n            mapAdaptIdsToObjects();\n\n            if (typeof Adapt.course.get('_buttons').submit !== 'undefined') {\n                // Backwards compatibility with v1.x\n                var oldButtons = Adapt.course.get('_buttons');\n                var buttons = [];\n\n                for (var key in oldButtons) {\n                    buttons['_' + key] = {\n                        buttonText: oldButtons[key],\n                        ariaLabel: oldButtons[key]\n                    };\n                }\n\n                // HACK - Append other missing values\n                buttons['_showFeedback'] = {\n                    buttonText: 'Show feedback',\n                    ariaLabel: 'Show feedback'\n                };\n\n                // Replace the existing property\n                Adapt.course.set('_buttons', buttons);\n            }\n\n            Adapt.log.debug('Firing app:dataLoaded');\n\n            try {\n                Adapt.trigger('app:dataLoaded');// Triggered to setup model connections in AdaptModel.js\n            } catch(e) {\n                Adapt.log.error('Error during app:dataLoading trigger', e);\n            }\n\n            Adapt.setupMapping();\n\n            Adapt.wait.queue(function() {\n                triggerDataReady(newLanguage);\n            });\n\n        }\n    };\n\n    function triggerDataReady(newLanguage) {\n        if (newLanguage) {\n\n            Adapt.trigger('app:languageChanged', newLanguage);\n\n            _.defer(function() {\n                var startController = new StartController();\n                var hash = '#/';\n\n                if (startController.isEnabled()) {\n                    hash = startController.getStartHash(true);\n                }\n\n                Backbone.history.navigate(hash, { trigger: true, replace: true });\n            });\n        }\n\n        Adapt.log.debug('Firing app:dataReady');\n\n        try {\n            Adapt.trigger('app:dataReady');\n        } catch(e) {\n            Adapt.log.error('Error during app:dataReady trigger', e);\n        }\n\n        Adapt.wait.queue(triggerInitialize);\n\n    }\n\n    function triggerInitialize() {\n        Adapt.log.debug('Calling Adapt.initialize');\n\n        addNavigationBar();\n\n        Adapt.initialize();\n\n        Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');\n    }\n\n    function addNavigationBar() {\n\n        var adaptConfig = Adapt.course.get(\"_navigation\");\n\n        if (adaptConfig && adaptConfig._isDefaultNavigationDisabled) {\n            Adapt.trigger(\"navigation:initialize\");\n            return;\n        }\n\n        Adapt.navigation = new NavigationView();// This should be triggered after 'app:dataReady' as plugins might want to manipulate the navigation\n\n    }\n\n    function configureInview() {\n\n        var adaptConfig = Adapt.config.get(\"_inview\");\n\n        var allowScrollOver = (adaptConfig && adaptConfig._allowScrollOver === false ? false : true);\n\n        $.inview.config({\n            allowScrollOver: allowScrollOver\n        });\n\n    }\n\n    function mapAdaptIdsToObjects () {\n        Adapt.contentObjects._byAdaptID = Adapt.contentObjects.groupBy(\"_id\");\n        Adapt.articles._byAdaptID = Adapt.articles.groupBy(\"_id\");\n        Adapt.blocks._byAdaptID = Adapt.blocks.groupBy(\"_id\");\n        Adapt.components._byAdaptID = Adapt.components.groupBy(\"_id\");\n    }\n\n    // This function is called when the config model triggers 'configModel:loadCourseData'\n    // Once the config model is loaded get the course files\n    // This enables plugins to tap in before the course files are loaded & also to change the default language\n    Adapt.loadCourseData = function(newLanguage) {\n        Adapt.on('adaptCollection:dataLoaded courseModel:dataLoaded', function() {\n            Adapt.checkDataIsLoaded(newLanguage);\n        });\n\n        // All code that needs to run before adapt starts should go here\n        var language = Adapt.config.get('_activeLanguage');\n        var jsonext = Adapt.build.get(\"jsonext\");\n        var courseFolder = \"course/\" + language +\"/\";\n\n        $('html').attr(\"lang\", language);\n\n        Adapt.course = new CourseModel(null, {url:courseFolder + \"course.\"+jsonext, reset:true});\n\n        Adapt.contentObjects = new AdaptCollection(null, {\n            model: ContentObjectModel,\n            url: courseFolder +\"contentObjects.\"+jsonext\n        });\n\n        Adapt.articles = new AdaptCollection(null, {\n            model: ArticleModel,\n            url: courseFolder + \"articles.\"+jsonext\n        });\n\n        Adapt.blocks = new AdaptCollection(null, {\n            model: BlockModel,\n            url: courseFolder + \"blocks.\"+jsonext\n        });\n\n        Adapt.components = new AdaptCollection(null, {\n            model: function(json) {\n\n                //use view+model object\n                var ViewModelObject = Adapt.componentStore[json._component];\n\n                if(!ViewModelObject) {\n                    throw new Error(json._component + ' component not found. Is it installed and included?');\n                }\n\n                //if model defined for component use component model\n                if (ViewModelObject.model) {\n                    return new ViewModelObject.model(json);\n                }\n\n                var View = ViewModelObject.view || ViewModelObject;\n                //if question type use question model\n                if (View._isQuestionType) {\n                    return new QuestionModel(json);\n                }\n\n                //otherwise use component model\n                return new ComponentModel(json);\n            },\n            url: courseFolder + \"components.\"+jsonext\n        });\n    };\n\n    function onLanguageChange(model, language) {\n        Adapt.offlineStorage.set('lang', language);\n        Adapt.loadCourseData(language);\n    }\n\n    function onDirectionChange(model, direction) {\n        if (direction === 'rtl') {\n            $('html').removeClass('dir-ltr').addClass('dir-rtl');\n        } else {\n            $('html').removeClass('dir-rtl').addClass('dir-ltr');\n        }\n    }\n\n    /**\n    * Before we actually go to load the course data, we first need to check to see if a language has been set\n    * If it has we can go ahead and start loading; if it hasn't, apply the defaultLanguage from config.json\n    */\n    function onLoadCourseData() {\n        if (Adapt.config.get('_activeLanguage')) {\n            Adapt.loadCourseData();\n        } else {\n            Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));\n        }\n    }\n\n    function onBuildDataLoaded() {\n\n        Adapt.config = new ConfigModel(null, {url: \"course/config.\"+Adapt.build.get(\"jsonext\"), reset:true});\n        Adapt.config.on({\n            'change:_activeLanguage': onLanguageChange,\n            'change:_defaultDirection': onDirectionChange\n        });\n\n        // Events that are triggered by the main Adapt content collections and models\n        Adapt.once('configModel:loadCourseData', onLoadCourseData);\n\n    }\n\n    Adapt.once('buildModel:dataLoaded', onBuildDataLoaded);\n\n});\n\ndefine(\"core/js/app\", function(){});\n\n"
  ]
}